<?php
// $Id$

define('CLEARING_CENTRAL_URL', 'http://www.cxn.org.za/txinput.php');

/*
  //login not needed!
  $nid = variable_get('mc_clearing_central_login', '');
  $password = variable_get('mc_clearing_central_password', '');
*/

/*
 * buyer_id=mcgr0014
 * buyer_nid=cen0008
 * seller_id=1
 * seller_nid=cen0263
 * seller_name=Matthew+Slater
 * seller_email=matslats%40gmail.com
 * description=Testing
 * amount=123
 */

/*
 * Clearing Central is a service offered by CES which allows mutual credit clearing between independent exchange circles
 */
function mc_clearing_central_menu() {
  $items['admin/mc/clearing_central'] = array(
    'title' => 'Clearing Central',
    'description' => 'Settings for trading via CES',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clearing_central_settings_form'),
    'access arguments' => array('configure currencies'),
    'weight' => 5,
  );
  $items['clearing_central/request'] = array(
    'page callback' => 'clearing_central_request',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['clearing_central/response'] = array(
    'page callback' => 'clearing_central_response',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  if (variable_get('mc_clearing_central_cid', 0) && variable_get('mc_intertrading_uid', 0) && variable_get('mc_clearing_central_cid', 0) && variable_get('mc_intertrading_ratio', 0)) {
    $items['exchange/intertrade'] = array(
      'title' => 'Clearing Central',
      'description' => 'Settings for trading via CES',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('clearing_central_form'),
      'access arguments' => array('intertrade'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 5,
    );
  }
  else {
    drupal_set_message(
      t(
        'Clearing Central is installed but not configured: !configure',
        array('!configure' => l(
          'configure',
          'admin/mc/clearing_central'
        ))
      ),
      'warning'
    );
  }
  return $items;
}

function mc_clearing_central_cron() {
  $cid = variable_get('mc_clearing_central_cid', 0);
  $uid = variable_get('mc_intertrading_uid', 0);

  if ($cid && $uid) {
    //alter the balance limits of the intertrading account
    //get the turnover from the last month and divide it by the ratio
    //this figure includes all taxes, corrected errors etc
    $turnover = db_result(db_query(
      "SELECT SUM(quantity) FROM {mc_exchanges} e LEFT JOIN {node} n ON e.nid = n.nid
        WHERE e.cid = %d AND e.state = %d AND n.changed > %d",
      array($cid, EXCHANGE_STATE_FINISHED, strtotime('-1 month'))
    ));
    //this is an integer simply for elegance.
    $limit = intval($turnover / variable_get('mc_intertrading_ratio', 10));
    $edit = array('mc_limits' => array($cid => array('max' => $limit, 'min' => $limit)));
    user_save(user_load($uid), $edit);
  }
}

function clearing_central_settings_form() {
  $form['mc_clearing_central_logon'] = array(
    '#type' => 'textfield',
    '#title' => t("ID of this currency on Clearing Central"),
    '#description' => t('The id is provided for each account created at !link', array('!link' => l('Clearing Central', 'http://www.cxn.org.za'))),
    '#default_value' => variable_get('mc_clearing_central_logon', ''),
    '#weight' => -6,
    '#disabled' => TRUE
  );
  $form['mc_clearing_central_password'] = array(
    '#title' => 'Password',
    '#description' => 'password for your cxn account',
    '#type' => 'textfield',
    '#default_value' => variable_get('mc_clearing_central_password', ''),
    '#weight' => -5,
    '#disabled' => TRUE
  );
  $form['mc_clearing_central_cid'] = array(
    '#title' => 'Currency',
    '#description' => 'Presently the intertrading form assumes only one currency per system. This will change but for now please specify which currency to use',
    '#type' => 'select',
    '#options' =>  mc_node_select_options(currencies_load()),
    '#default_value' => variable_get('mc_clearing_central_cid', ''),
    '#required' => TRUE,
    '#weight' => -4,
  );
  $form['mc_intertrading_uid'] = array(
    '#type' => 'textfield',
    '#title' => t("Intertrading account"),
    '#description' => t('Which user account on this system is for intertrading? (Give account number)'),
    '#default_value' => variable_get('mc_intertrading_uid', ''),
    '#weight' => -3,
    '#required' => TRUE,
    '#element_validate' => array('mc_validate_trader')
  );
  $form['mc_intertrading_ratio'] = array(
    '#title' => t('Per cent of turnover which can be externalised. (Requires cron)'),
    '#description' => t('A trade imbalance can cause liquidity problems in a currency.') .' '.
      t('It is strongly reccommended that the external balance be limited.'),
    '#default_value' => variable_get('mc_intertrading_ratio', 10),
    '#type' => 'textfield',
    '#element_validate' => 'mc_validate_percentage',
    '#required' => TRUE
  );
  return system_settings_form($form);
}

function mc_validate_percentage(&$element, $form_state) {
  if (is_numeric($element['#value']) && $element['#value'] > 0 && $element['#value'] < 100) {
    return;
  }
  form_error($element, t('@name must be a number between 1 and 100', array('@name', $element['#name'])));
}

function clearing_central_form($form_state) {
  $currency = node_load(variable_get('mc_clearing_central_cid', 0));
  $form['buyer_nid'] = array(
    '#title' => t("Buyer's network ID"),
    '#description' => t('Example: eg cen0008 ?'),
    '#type' => 'textfield',
    '#weight' => -10,
    '#element_validate' => array('mc_validate_plain'),
    '#required' => TRUE
  );
  $form['buyer_id'] = array(
    '#title' => t("Buyer's account ID"),
    '#description' => 'e.g. mcgr0014',
    '#type' => 'textfield',
    '#weight' => -9,
    '#element_validate' => array('mc_validate_plain'),
    '#required' => TRUE
  );
  $form['description'] = array(
    '#title' => t("Description"),
    '#description' => t("What did you sell?"),
    '#type' => 'textfield',
    '#weight' => -8,
    '#element_validate' => array('mc_validate_plain'),
    '#required' => TRUE
  );
  $form['amount'] = array(
    '#title' => t("Amount"),
    '#description' => t('e.g. 50.00 or 125'),
    '#type' => 'textfield',
    '#weight' => -7,
    '#field_prefix' => theme('image', $currency->icon),
    '#required' => TRUE
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t("Submit"),
    '#weight' => -6,
  );

  $form['seller_id'] = array(
    '#type' => 'hidden',
    '#value' => $GLOBALS['user']->uid,
  );
  $form['seller_nid'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('mc_clearing_central_logon', 0),
  );

  $form['seller_name'] = array(
    '#type' => 'hidden',
    '#value' => strip_tags(theme('username', $GLOBALS['user'])),
  );
  $form['seller_email'] = array(
    '#type' => 'hidden',
    '#value' => $GLOBALS['user']->mail,
  );
  return $form;
}

function mc_validate_plain(&$element, $form_state) {
  if (check_plain($element['#value']) != $element['#value']) {
    form_error($element, t('Plain text only'));
  }
}

function clearing_central_form_validate($form, $form_state) {
  $message = mc_api_check_user_limits(
    user_load($form['seller_id']['#value']),
    $form['amount']['#value'],
    variable_get('mc_clearing_central_cid', '')
  );
  if ($message) {
    form_set_error('amount', $message);
  }
}

function clearing_central_form_submit($form, &$form_state) {
  $values = &$form_state['values'];
  //build up what we can of the transactioin object and send it
  unset($values['form_id'], $values['form_token'], $values['form_build_id'], $values['op'], $values['submit']);


  foreach ($form_state['values'] as $key => $val) {
    $args[] = $key . '=' . urlencode($val);
  }
  $url = CLEARING_CENTRAL_URL .'?'. implode('&', $args);
  $reply = drupal_http_request(CLEARING_CENTRAL_URL, array(), 'GET', implode('&', $args));
  print_r($reply);
}

//the reply comes in the form of a completely separate request



/*
txid*            Transaction ID
buyer_nid*        Network ID of buyer's exchange (e.g. cen1234)
buyer_xname        Name of buyer's exchange (e.g. Cape Town Talent Exchange)
buyer_country    Country where buyer's exchange is recorded
buyer_id*        Buyer's ID or account number
buyer_name        Buyer's name
buyer_email        Buyer's email address
seller_nid*        Network ID of seller's exchange (e.g. cen1234)
seller_xname    Name of seller's exchange (e.g. Cape Town Talent Exchange)
seller_country    Country where seller's exchange is recorded
seller_id*        Seller's ID or account number
seller_name        Seller's name
seller_email    Seller's email
description*        Description of trade (e.g. Books, Web design)
amount(            Amount (e.g. 10.00, 15, 123.45)
result            Response/progress code
 */

//http://mcapi/?q=clearing_central/response&test=test
function clearing_central_response() {

  return cc_write('clearing_central_response.debug', print_r($_GET, 1));
}

function clearing_central_request() {
  return cc_write('clearing_central_request.debug', print_r($_GET, 1));
}

function cc_write($filename, $data){
  $handle = fopen($filename, 'w');
  fwrite ($handle, $data);
  fclose ($handle);
  return $data;
}

