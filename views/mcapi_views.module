<?php
//$Id
//define ('GOOGLE_CHARTS_URI', 'http://chart.apis.google.com/chart?');

/*
 * Module keeps a cache of transactions which is optimised for views to interrogate
 */

/*
 * implements hook_requirements
 * tests that the transaction controller is default. i.e. using drupal
 */
function mcapi_views_requirements() {
  $controller = variable_get('mcapi_controller', 'mcapi');
  $requirements['transaction_controller'] = array(
    'title' => 'Transaction controller',
    'value' => 'mcapi_views module does not work with contoller: '.$controller,
    'severity' => $controller == 'mcapi' ? REQUIREMENT_INFO : REQUIREMENT_ERROR,
  );
  return $requirements;
}


function mcapi_views_entity_insert($entity, $type) {
  if ($type == 'transaction') update_mcapi_index($entity);
  //then we'll need to recalc the running balances of everything after that
}
function mcapi_views_entity_update($entity, $type) {
  if ($type == 'transaction') update_mcapi_index($entity, $entity->xid);
  //then we'll need to recalc the running balances of everything after that
}

function mcapi_views_entity_delete($entity, $type) {
  if ($type == 'transaction') {
    db_query("DELETE FROM {mcapi_index} WHERE xid = :xid", array(':xid' => $entity->xid));
  }
  //then we'll need to recalc the running balances of everything after that
}

/*
 * To reduce the number of permutations of data which could be cached,
 * Caching is done for each transaction, and views does most of the work
 * This function merely clears those caches
 */
function update_mcapi_index($transaction, $xid = NULL) {
  if ($transaction->state == TRANSACTION_STATE_FINISHED) {
    foreach ($transaction->worth['und'] as $delta => $transfer) {
      $balance_query = "SELECT SUM(diff) FROM {mcapi_index} WHERE uid1 = :uid AND currcode = :currcode AND xid < :xid";
      $args = array(
        ':currcode' => $transfer['currcode'],
        ':xid' => $transaction->xid,
      );
      $quant = &$transfer['quantity'];

      $args[':uid'] = $transaction->payee;
      $balance = db_query($balance_query, $args)->fetchfield();
      db_merge('mcapi_index')
      ->key(array('xid' =>$transaction->xid, 'uid1' => $transaction->payee))
      ->fields(array(
        'uid2' => $transaction->payer,
        'created' => $transaction->created,
        'currcode' => $transfer['currcode'],
        'expenditure' => $quant,
        'volume' => $quant,
        'diff' => -$quant,
        'balance' => $balance - $quant,
      ))->execute();

      $args[':uid'] = $transaction->payer;
      $balance = db_query($balance_query, $args)->fetchfield();
      db_merge('mcapi_index')
      ->key(array('xid' =>$transaction->xid, 'uid1' => $transaction->payer))
      ->fields(array(
        'uid2' => $transaction->payee,
        'created' => $transaction->created,
        'currcode' => $transfer['currcode'],
        'income' => $quant,
        'volume' => $quant,
        'diff' => $quant,
        'balance' => $balance + $quant,
      ))->execute();
    }
  }
  else {
    //only completed transactions are indexed
    mcapi_views_entity_delete('transaction', $transaction);
  }
}


/**
 * http://api.drupal.org/api/function/hook_theme/6
 * This hook is required for modules to define one or more node types.
 */
/*
function mcapi_views_theme($existing, $type, $theme, $path) {
  $path .='/theme';
  return array(
    'balance_history' => array(
      'template' => 'balance_history',
      'path' => $path,
      'variables' => array(
        'histories' => array(),
        'extent' => NULL,
        'legend' => ''
      )
    ),
  );
}*/

/*
 * This should really be its own Style plugin, but for now we need to process the running balances and output using a theme function
 */
/*
function show_balance_history($account, $currcodes, $extent = 'limits', $since = 0) {
  $histories = array();
  foreach($currcodes as $currcode) {
    $hist = get_balance_history($account, $currcode, $since);
    if (count($hist)) {
      $histories[$currcode] = $hist;
    }
  }
  return theme('balance_history', array('histories' => $histories));
}
*/
/*
 * implements hook_form_alter
 * renames the exposed filters on views forms
 */
function mcapi_views_form_alter($form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $description = t('Comma separated usernames');
    $form['payee']['#description'] = $description;
    $form['payer']['#description'] = $description;
  }
}

/*
 * Implements views hook_views_api
 */
function mcapi_views_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_views'),
  );
}


function mcapi_views_rebuild_index() {
  db_query("TRUNCATE table {mcapi_index}");
  //load all the transactions and then index them
  $transactions = transaction_load_multiple(NULL, array('state' => 0));
  foreach($transactions as $transaction) {
    update_mcapi_index($transaction);
  }
}


function mcapi_views_views_query_alter($view, &$query) {
  if (in_array('mcapi_index', array_keys($query->table_queue))) {
    $query->add_field('mcapi_index', 'currcode', 'currcode');
  }
}

/*
 * implements hook_query_TAG_alter
 * the saved view adds the tag 'transaction_access'
 * this modifies the query only to show the transactions visible to the user.
 * this is pretty elaborate, but the access control has to be done in the query or views pager won't know how many results there were
 */
function _mcapi_query_transaction_access_views_alter(QueryAlterableInterface $query) {
  $query->addJoin('LEFT', 'field_data_worth', 'tw', 'tw.entity_id = xid');
  //what currencies can the current user see?
  $currencies = currencies_load();
  //WHERE (
  //  (
  //    tw.field_worth_currcode = 1
  //  ) AND (//$currcode_and_states
  //    (
  //      (
  //        mcapi_transactions.state = 0
  //      ) AND (// $state_and_callback
  //        callback
  //      )
  //    ) OR (//$state_or_state
  //      (
  //        mcapi_transactions.state = 1
  //      ) AND (// $state_and_callback
  //        callback
  //      )
  //   )
  // ) OR ( //$or_currcodes
  //  currcode = 2 ...
  $or_currcodes = db_or();
  foreach ($currencies as $currency) {
    $currcode_and_states = db_and();
    $currcode_and_states->condition('tw.worth_currcode', $currency->currcode);
    //note for views we are only interested in viewing permission
    $state_or_state = db_or();
    foreach ($currency->view as $state => $callback) {
      $callback .= '_views';
      $state_and_callback = $callback($state);
      $state_or_state->condition($state_and_callback);
    }
    $currcode_and_states->condition($state_or_state);
    $or_currcodes->condition($currcode_and_states);
  }
  //debug($query->__toString());
  $query->condition($or_currcodes);
}

//must return a condition objectmcapi_transactions.state
function mcapi_access_unrestricted_views($state){
  $condition = db_and();
  return $condition->condition('mcapi_transactions.state', $state);
}
function mcapi_access_authenticated_views($state){
  $condition = db_and();
  $condition->condition('mcapi_transactions.state', $state);
  $condition->condition(0, $GLOBALS['user']->uid, '<>');
  return $condition;
}
function mcapi_access_none_views($state){
  $condition = db_and();
  $condition->condition('mcapi_transactions.state', $state);
  $condition->condition(0, 1);//which is to say, FALSE
  return $condition;
}
function mcapi_access_participants_admin_views($state) {
  $condition = db_and();
  $condition->condition('mcapi_transactions.state', $state);
  $subcondition = db_or();
  $subcondition->condition('mcapi_transactions.payee', $GLOBALS['user']->uid);
  $subcondition->condition('mcapi_transactions.payer', $GLOBALS['user']->uid);
  $subcondition->condition(1, user_access('administer all transactions'));
  $condition->condition($subcondition);
  return $condition;
}
function mcapi_access_admin_views($state) {
  $condition = db_and();
  $condition->condition('mcapi_transactions.state', $state);
  $condition->condition(1, user_access('administer all transactions'));
  return $condition;
}
function mcapi_access_participants_views($state) {
  $condition = db_and();
  $condition->condition('mcapi_transactions.state', $state);
  $subcondition = db_or();
  $subcondition->condition('mcapi_transactions.payee', $GLOBALS['user']->uid);
  $subcondition->condition('mcapi_transactions.payer', $GLOBALS['user']->uid);
  $condition->condition($subcondition);
}
//this isn't working without the $currency, which the others do not need
//perhaps it doesn't belong here
function mcapi_access_currency_views($state) {
  $condition = db_and();
  return $condition->condition('mcapi_transactions.state', $state);
}
