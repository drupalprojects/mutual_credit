<?php // ;id:

/*
 * Permitted users can design their own transaction forms, hopefully all valid!
 */
//define('TRANSACTION_STATE_TEMPLATE', -3);

function mcapi_forms_menu() {
  //all the admin menu items are generated via the ctools export-ui plugin
  $items = array();
  $items['transaction/%transaction/formedit'] = array(
    'title' => 'Modify transaction',
    'page callback' => 'mcapi_form_edit_wrapper',
    'page arguments' => array(1), //+ we need the right form object
    'access callback' => 'transaction_access',
    'access arguments' => array('update', 1), //+ the right form object
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mcapi_forms.inc',
  );
  //one menu callback for each form.
  $mcapi_forms = mcapi_forms_load();
  foreach($mcapi_forms as $mcapi_form) {
    if (!empty($mcapi_form->disabled)) continue;
    $sections = explode('/',$mcapi_form->path);
    //the first ->name is for drupal_get_form, the second is for hook_forms to be more efficient
    //then we add subsequent arguments in an order expected by mcapi_forms_form
    $page_args = array(
      $mcapi_form->name,
      array_search('%transaction', $sections),
      array_search('%user', $sections)
    );
    $item = array(
      'title' => $mcapi_form->data['step-1']['title'],
      'description' => $mcapi_form->data['help'], //this will be help
      'page callback' => 'drupal_get_form',
      'page arguments' => $page_args,
      'access callback' => strtok($mcapi_form->data['outputs']['access'], ':'),
      'access arguments' => array(strtok(':')),
      'file' => 'mcapi_forms.inc',
    );

    if (is_numeric($mcapi_form->data['outputs']['menu_link'])) {
      $item['type'] = $mcapi_form->data['outputs']['menu_link'];
    }
    else {
      $item['type'] = MENU_NORMAL_ITEM;
      $item['menu_name'] = $mcapi_form->data['outputs']['menu_link'];
    }
    $items[$mcapi_form->path] = $item;
  }
  return $items;
}
/*
 * implements hook_menu_alter
 * alters the menu item provided by ctools so it can be used for context
 */
function mcapi_forms_menu_alter(&$items) {
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['_tab'] = TRUE;
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['tab_parent'] = 'admin/accounting/forms/list/%';
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['context'] = MENU_CONTEXT_INLINE;
}


/**
 * Implements hook_admin_paths().
 */
function mcapi_forms_admin_paths() {
  return array('transaction/*/formedit' => TRUE);
}

/*
 * implements hook_forms
 * args[0] is a transaction
 * args[1] is the form name
 * args[2] is a loaded user (optional)
 * args added here are not put into $form_state[build_info][args]
 */
function mcapi_forms_forms($form_id, $args) {
  //this function only need bother return anything if the first arg is passed
  //perhaps it should just return an array of all forms as the examples indicate?
  if (!count($args)) return;
  if ($mcapi_form = mcapi_forms_load($form_id)) {
    module_load_include('inc', 'mcapi_forms');
    //ensure there is a transaction object in arg 1
    return array(
      $form_id => array(
        'callback' => 'mcapi_forms_form',
        'callback arguments' => array(
          0 => empty($args[0]->xid) ?  new transaction : $args[0],
          1 => $mcapi_form
        )
      )
    );
  }
}

/*
 * Implements hook_permissions
 */
function mcapi_forms_permissions() {
  return array(
    'design transaction forms' => array(
      'title' => t('Design transaction forms'),
      'description' => t('Create and edit the forms used to record and edit transactions'),
    )
  );
}

/*
 * Implements hook_block_info
 */
function mcapi_forms_block_info() {
  $mcapi_forms = mcapi_forms_load();
  $blocks = array();
  foreach ($mcapi_forms as $mcapi_form) {
    if ($mcapi_form->data['outputs']['use_block']) {
      $blocks[$mcapi_form->name] = array(
        'info' => $mcapi_form->data['step-1']['title'],
        'cache' => DRUPAL_CACHE_PER_USER
      );
    }
  }
  return $blocks;
}

/*
 * Implements hook_block_view
 */
function mcapi_forms_block_view($delta) {
  //load the form and check access first
  $mcapi_form = mcapi_forms_load($delta);
  //it's generally a bad idea to show the form in block on its own page
  if (current_path() == $mcapi_form->path) return;
  $form = drupal_get_form($delta, $mcapi_form);
  if (!$form) return;
  return array(
    'subject' => isset($mcapi_form->data['templates']['step-1']['title']) ? $mcapi_form->data['templates']['step-1']['title'] : '<none>',
    'content' => drupal_get_form($delta, $mcapi_form)//delta is the $mcapi_form->machine_name
  );
  module_load_include('inc', 'mcapi_forms');
}

/*
 * Implements hook_mcapi_info
 */
function mcapi_forms_mcapi_info($field) {
  switch($field) {
    case 'states':
    case 'access':
      return array();
      //return array(TRANSACTION_STATE_TEMPLATE => t('Template'));
    case 'types':
      $mcapi_forms = mcapi_forms_load();
      foreach($mcapi_forms as $mcapi_form) {
        $types[] = $mcapi_form->name;
      }
      return $types;
  }
}

/*
 * Implements hook_theme
 */
function mcapi_forms_theme($existing, $type, $theme, $path) {
  return array(
    'mcapi_form' => array(
      'render element' => 'form',
    ),
  );
}

/*
 * callback specified in the export_ui plugin
 */
function mcapi_edit_mcapi_form(&$form, &$form_state) {
  //I can't think of a better place to put this.
  //menu needs rebuilding when a form is saved
  //but I can't mess with the ctools submit handlers
  //were does views do it?
  menu_rebuild();
  $form_state['build_info']['files']['menu'] = drupal_get_path('module', 'mcapi_forms') .'/mcapi_forms.admin.inc';
  $form_state['build_info']['files']['ctools'] = drupal_get_path('module', 'ctools') .'/includes/export.inc';
  $form['#tree'] = TRUE;

  //this big form builder function is kept in admin.inc
  form_load_include($form_state, 'admin.inc', 'mcapi_forms');
  return _edit_mcapi_form($form, $form_state);
}

/*
 * load an mcapi_form by name, using ctools
 */
function mcapi_forms_load($name = NULL) {
  ctools_include('export');
  $results = ctools_export_crud_load_all('mcapi_forms');
  if ($name) {
    if (!empty($results[$name])) {
      return $results[$name];
    }
    return;
  }
  return $results;
}

/*
 * Implements ctools hook_ctools_plugin_directory
 */
function mcapi_forms_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/export_ui';//directory
  }
}
/*
 * Implements ctools hook_ctools_plugin_api
 */
function mcapi_forms_ctools_plugin_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_forms'),
  );
}

/**
 * Find out whether the logged in user has one of the given roles
 */
function mcapi_access_check_roles($rid) {
  global $user;
  $roles = array_keys($user->roles);
  $roles[] = DRUPAL_AUTHENTICATED_RID;
  return in_array($rid, $roles);
}

/*
 * menu callback
 * determines which form to use to edit the transaction,
 * on the basis of the transaction 'type', which is the form name
 */
function mcapi_form_edit_wrapper($transaction) {
  if ( $mcapi_form = mcapi_forms_load($transaction->type)) {
    return drupal_get_form('mcapi_forms_form', $transaction, $mcapi_form);
  }
  else {
    drupal_set_message(t('Appropriate transaction editing form not found: @formname; reverting to admin edit form', array('@formname' => $transaction->type)), 'warning');
    return drupal_get_form('transaction_admin_form', $transaction);
  }
}
/*
 * return an array of fields added to the transaction entity,  - critically, keyed by machine_name
 */
function mcapi_form_get_additional_form_fields() {
  //get the names of the additional entity fields
  $pseudo_form = array();
  $transaction = new transaction;
  $fs = array();//just a placeholder for form_state
  //add the fields to our imaginary form, and then iterate through them
  field_attach_form('transaction', $transaction, $pseudo_form, $fs);
  $fields = array();
  foreach (element_children($pseudo_form) as $fieldname) {
    $fields[$fieldname] = $pseudo_form[$fieldname];
  }
  return $fields;
}

//there is a function very similar to this in form api.
//it doesn't explore or assume, but takes the parents as an argument.
function _get_deepest_child($element) {
  $children = element_children($element);
  if (count($children)) {
    $last_child = array_pop($children);
    return _get_deepest_child($element[$last_child]);
  }
  return $element;
}



/*
 * element validate callback
 * make sure at least one incoming state is chosen for the workflow
 * for some reason admin.inc isn't loading up on form submission, despite using form_load_include
 * so this has to go in the module file until someone wants to sort it out!
 */
function mcapi_form_workflow_incoming_validate(&$element, $form_state) {
  if (!array_filter($form_state['values']['workflow']['incoming'])) {
    form_error($element, t('At least one incoming state must be selected'));
  }
}

function mcapi_form_validate_worth(&$element, &$form_state) {
  //debug($element);
  //debug($form_state['values']);
}

function mcapi_path_validate(&$element, $form_state) {
}

function mcapi_forms_template_validate(&$element, &$form_state) {
  $form_state['values']['templates']['template-1'] = filter_xss($element['#value'], array('a', 'p', 'br', 'font', 'style', ));
}
function mcapi_edit_mcapi_form_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  $values = &$form_state['values'];
  unset($values['xfid']);
  //we need to start with an existing ctools object which contains essential default properties

  $mcapi_form = empty($form_state['item']) ? ctools_export_crud_new('mcapi_forms') : $form_state['item'];
  $mcapi_form->name = $values['info']['name'];//this isn't editable at the moment
  $mcapi_form->path = $values['path'];
  unset($values['name'], $values['path']);
  $mcapi_form->data = $values;
  $form_state['item'] = $mcapi_form;
}

//I think this is completely wrong, but I just couldn't get ctools to work without proper documentation
function mcapi_edit_mcapi_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/accounting/forms'; //where the menu_rebuild is run
}



