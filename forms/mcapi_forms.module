<?php // ;id:

/*
 * Permitted users can design their own transaction forms, hopefully all valid!
 */

function mcapi_forms_menu() {
  //all the admin menu items are generated via the ctools export-ui plugin
  $items = array();
  $items['transaction/%transaction/formedit'] = array(
    'title' => 'Modify transaction',
    'page callback' => 'mcapi_form_edit_wrapper',
    'page arguments' => array(1), //+ we need the right form object
    'access callback' => 'transaction_access',
    'access arguments' => array('update', 1), //+ the right form object
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mcapi_forms.inc',
  );
  //one menu callback for each form.
  $mcapi_forms = mcapi_forms_load();
  module_load_include('inc', 'mcapi_forms');
  foreach($mcapi_forms as $mcapi_form) {
    if (!empty($mcapi_form->disabled)) continue;
    $menu = $mcapi_form->data['architecture'];
    //in case the form needs to load a transaction, extract it from the path
    $parts = explode('/', $menu['path']);
    $args = array();
    if ($key = array_search('%transaction', $parts)) $args[] = $key;

    $items[$menu['path']] = array(
      'title' => mcapi_form_template($mcapi_form, 1)->title,
      'page callback' => 'mcapi_get_form',
      'page arguments' => array_merge(array($mcapi_form), $args),//2nd and subsequent are are the $form_state['build_info']
      'access callback' => strtok($menu['access'], ':'),
      'access arguments' => array(strtok(':')),
      'menu name' => is_numeric($menu['menu_link']) ? 'navigation' : $menu['menu_link'],
      'type' =>is_numeric($menu['menu_link']) ? $menu['menu_link'] : MENU_NORMAL_ITEM,
      'file' => 'mcapi_forms.inc',
    );
  }
  debug($items);
  return $items;
}


/*
 * implements hook_menu_alter
 * alters the menu item provided by ctools so it can be used for context
 */
function mcapi_forms_menu_alter(&$items) {
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['_tab'] = TRUE;
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['tab_parent'] = 'admin/accounting/forms/list/%';
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['context'] = MENU_CONTEXT_INLINE;
}


/**
 * Implements hook_admin_paths().
 */
function mcapi_forms_admin_paths() {
  return array('transaction/*/formedit' => TRUE);
}

/*
 * implements hook_forms
 * args[0] is a transaction
 * args[1] is the form name
 * args[2] is a loaded user (optional)
 * args added here are not put into $form_state[build_info][args]
 */
function mcapi_get_form($mcapi_form, $transaction = NULL) {
  module_load_include('inc', 'mcapi_forms');
  return drupal_get_form('mcapi_forms_form', $mcapi_form, $transaction ? $transaction : new_transaction());
}
/*
 * Implements hook_block_info
 */
function mcapi_forms_block_info() {
  $mcapi_forms = mcapi_forms_load();
  $blocks = array();
  foreach ($mcapi_forms as $mcapi_form) {
    if ($mcapi_form->data['architecture']['use_block'] && empty($mcapi_form->disabled)) {
      $blocks[$mcapi_form->name] = array(
        'info' => $mcapi_form->name,
        'cache' => DRUPAL_CACHE_PER_USER
      );
    }
  }
  return $blocks;
}

/*
 * Implements hook_block_view
 */
function mcapi_forms_block_view($delta) {
  //load the form and check access first
  $mcapi_form = mcapi_forms_load($delta);
  //it's generally a bad idea to show the form in block on its own page
  if (current_path() == $mcapi_form->path) return;
  $form = drupal_get_form($delta, $mcapi_form);
  if (!$form) return;
  return array(
    'subject' => mcapi_form_template($mcapi_form)->title,
    'content' => drupal_get_form($delta, $mcapi_form)//delta is the $mcapi_form->machine_name
  );
  module_load_include('inc', 'mcapi_forms');
}

/*
 * Implements hook_mcapi_info_types
 */
function mcapi_forms_mcapi_info_types() {
  $mcapi_forms = mcapi_forms_load();
  foreach($mcapi_forms as $mcapi_form) {
    $types[] = $mcapi_form->name;
  }
  return $types;
}

/*
 * Implements hook_mcapi_info_drupal_permissions
 */
function mcapi_forms_mcapi_info_drupal_permissions() {
  return array(
    'design transaction forms' => array(
      'title' => t('Design transaction forms'),
      'description' => t('Create and edit the forms used to record and edit transactions'),
    )
  );
}

/*
 * Implements hook_theme
 */
function mcapi_forms_theme($existing, $type, $theme, $path) {
  return array(
    'mcapi_form' => array(
      'render element' => 'form',
    ),
  );
}

/*
 * callback specified in the export_ui plugin
 */
function mcapi_edit_mcapi_form(&$form, &$form_state) {
  $form_state['build_info']['files']['menu'] = drupal_get_path('module', 'mcapi_forms') .'/mcapi_forms.admin.inc';
  $form_state['build_info']['files']['ctools'] = drupal_get_path('module', 'ctools') .'/includes/export.inc';
  $form['#tree'] = TRUE;

  //this big form builder function is kept in admin.inc
  form_load_include($form_state, 'admin.inc', 'mcapi_forms');
  return _edit_mcapi_form($form, $form_state);
}
/*
 * implements hook_form_FORMID_alter
 */
function mcapi_forms_form_mcapi_edit_mcapi_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'mcapi_forms_template_validate';
  $form['#submit'][] = 'menu_rebuild';
  $form_state['redirect'] = 'admin/accounting/forms';
}

/*
 * load an mcapi_form by name, using ctools
 */
function mcapi_forms_load($name = NULL) {
  ctools_include('export');
  //TODO it seems terribly inefficient, but loading one form here necessitates
  //loading all the defauls, altering them, overriding them with the database versions,
  //then choosing the named one, with no apparent recourse to ctools cache
  //Shurely there's a better way?
  //I believe views has its own cache so maybe not
  $results = ctools_export_crud_load_all('mcapi_forms');
  if ($name) {
    if (!empty($results[$name])) {
      return $results[$name];
    }
    return;
  }
  return $results;
}

/*
 * Implements ctools hook_ctools_plugin_directory
 */
function mcapi_forms_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/export_ui';//directory
  }
}
/*
 * Implements ctools hook_ctools_plugin_api
 */
function mcapi_forms_ctools_plugin_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_forms'),
  );
}

/**
 * Find out whether the logged in user has one of the given roles
 */
function mcapi_access_check_roles($rid) {
  global $user;
  $roles = array_keys($user->roles);
  $roles[] = DRUPAL_AUTHENTICATED_RID;
  return in_array($rid, $roles);
}

/*
 * menu callback
 * determines which form to use to edit the transaction,
 * on the basis of the transaction 'type', which is the form name
 */
function mcapi_form_edit_wrapper($transaction) {
  if ( $mcapi_form = mcapi_forms_load($transaction->type)) {
    return drupal_get_form('mcapi_forms_form', $transaction, $mcapi_form);
  }
  else {
    drupal_set_message(t('Appropriate transaction editing form not found: @formname; reverting to admin edit form', array('@formname' => $transaction->type)), 'warning');
    return drupal_get_form('transaction_admin_form', $transaction);
  }
}

/*
 * return an array of fields added to the transaction entity,  - critically, keyed by machine_name
 */
function mcapi_form_get_formAPI_fields() {
  //get the names of the additional entity fields
  $pseudo_form = array();
  $transaction = new_transaction();
  $fs = array();//just a placeholder for form_state
  //add the fields to our imaginary form, and then iterate through them
  field_attach_form('transaction', $transaction, $pseudo_form, $fs);
  $fields = array();
  foreach (element_children($pseudo_form) as $fieldname) {
    $fields[$fieldname] = $pseudo_form[$fieldname];
  }
  return $fields;
}

//there is a function very similar to this in form api.
//it doesn't explore or assume, but takes the parents as an argument.
function _get_deepest_child($element) {
  $children = element_children($element);
  if (count($children)) {
    $last_child = array_pop($children);
    return _get_deepest_child($element[$last_child]);
  }
  return $element;
}


function mcapi_form_validate_worth(&$element, &$form_state) {
  //debug($element);
  //debug($form_state['values']);
}

function mcapi_path_validate(&$element, $form_state) {

}

/*
 * validate callback for edit form, declared in the ctools plugin $this->plugin['form']['submit'] in mcapi_forms_ui.inc
 * the $form_state[item] is the object to be saved, derived from $form_state[values]
 */
function mcapi_edit_mcapi_form_validate($form, &$form_state) {
  form_state_values_clean($form_state);
  //we need to start with an existing ctools object which contains essential default properties
  if (empty($form_state['item'])) {
    $form_state['item'] = ctools_export_crud_new('mcapi_forms');
  }
  $form_state['item']->name = $form_state['values']['info']['name'];//this isn't editable at the moment
  unset($form_state['values']['name'], $form_state['values']['xfid']);
  $form_state['item']->data = $form_state['values'];
}

/*
 * submit callback for edit form, declared in the ctools plugin $this->plugin['form']['submit'] in mcapi_forms_ui.inc
 * NOT NEEDED
function mcapi_edit_mcapi_form_submit($form, &$form_state) {}
 */

/*
 * implements hook_form_FORMID_alter
 */
function mcapi_forms_form_system_theme_settings_alter(&$form, $form_state) {
  $form['tab_element'] = array(
    '#title' => t('Tab element'),
    '#description' => t("Write a css identifier for the div which 'List, Settings' on this page. Don't forget the leading . or #. Then it can be hidden on stage 2 of the transaction form"),
    '#type' => 'textfield',
    '#default_value' => $form_state['input']['tab_element'] ? $form_state['input']['tab_element'] : 'tabs',
  );
}

/*
 * The second stage of the transaction should NOT show the tabs such as view, edit etc
 */
function mcapi_hide_tabs() {
  $data = array(
    '#tag' => 'style',
    '#value' => theme_get_setting('tab_element') .'{display:none;}'
  );
  drupal_add_html_head($data, 'hide_tabs');
}