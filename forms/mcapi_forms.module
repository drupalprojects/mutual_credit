<?php // ;id:

/*
 * Permitted users can design their own transaction forms, hopefully all valid!
 */


/*
 * implements hook_menu
 */
function mcapi_forms_menu() {
  module_load_include('inc', 'mcapi_forms');
  //all the admin menu items are generated via the ctools export-ui plugin
  $items = array();
  $mcapi_forms = mcapi_forms_load(NULL, TRUE);

  $items['transaction/%transaction/formedit'] = array(
    'title' => 'Modify transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcapi_forms_form', 1, $mcapi_forms['correction']), //+ we need the right form object
    'access callback' => 'transaction_access',
    'access arguments' => array('update', 1), //+ the right form object
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mcapi_forms.inc',
  );
  unset($mcapi_forms['correction']); //see below
  
  //one menu callback for each form.
  foreach($mcapi_forms as $mcapi_form) {
    if (!empty($mcapi_form->disabled)) continue;
    $menu = $mcapi_form->data['architecture'];
    $page_arg1 = strpos($menu['path'], '%transaction') ? array_search('%transaction', explode('/', $menu['path'])) : new_transaction();
    $items[$menu['path']] = array(
      'title' => '',
      'title callback' => 'mcapi_menu_return_title',
      'title arguments' => array(mcapi_form_get_title($mcapi_form)),
      'page callback' => 'drupal_get_form',
      'page arguments' => array(//2nd and subsequent are are the $form_state['build_info']
        'mcapi_forms_form',
        //in case the form needs to load a transaction, extract it from the path
        $page_arg1,
        $mcapi_form//we put the whole form in the menu item because ctools performance is very poor
      ),
      'access callback' => strtok($menu['access'], ':'),
      'access arguments' => array(strtok(':')),
      'menu name' => is_numeric($menu['menu_link']) ? 'navigation' : $menu['menu_link'],
      'type' =>is_numeric($menu['menu_link']) ? $menu['menu_link'] : MENU_NORMAL_ITEM,
      'file' => 'mcapi_forms.inc',
    );
  }

  return $items;
}

/*
 * implements hook_menu_alter
 * alters the menu item provided by ctools so it can be used for context
 */
function mcapi_forms_menu_alter(&$items) {
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['_tab'] = TRUE;
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['tab_parent'] = 'admin/accounting/forms/list/%';
  $items['admin/accounting/forms/list/%ctools_export_ui/edit']['context'] = MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_admin_paths().
 */
function mcapi_forms_admin_paths() {
  return array('transaction/*/formedit' => TRUE);
}

/*
 * implements hook_forms
 * $args is an mcapi_form and an optional transaction
 */
function mcapi_forms_forms($form_id, $args) {
  $forms['mcapi_forms_form'] = array(
    'callback' => 'transaction_form',
    'callback arguments' => $args
  );
  return $forms;
}

/*
 * Implements hook_block_info
 */
function mcapi_forms_block_info() {
  $mcapi_forms = mcapi_forms_load();
  $blocks = array();
  foreach ($mcapi_forms as $mcapi_form) {
    if ($mcapi_form->data['architecture']['use_block'] && empty($mcapi_form->disabled)) {
      $blocks[$mcapi_form->name] = array(
        'info' => $mcapi_form->name,
        'cache' => DRUPAL_CACHE_PER_USER
      );
    }
  }
  return $blocks;
}

/*
 * Implements hook_block_view
 */
function mcapi_forms_block_view($delta) {
  //load the form and check access first
  $mcapi_form = mcapi_forms_load($delta);
  //it's generally a bad idea to show the form in block on its own page
  if (current_path() == $mcapi_form->path) return;
  $form = drupal_get_form($delta, $mcapi_form);
  if (!$form) return;
  return array(//if these seem inverted its because drupal_get_form loads the inc file
    'content' => drupal_get_form($delta, $mcapi_form),//delta is the $mcapi_form->machine_name
    'subject' => mcapi_form_template($mcapi_form)->title,
  );
  module_load_include('inc', 'mcapi_forms');
}

/*
 * Implements hook_mcapi_info_types
 */
function mcapi_forms_mcapi_info_types() {
  $mcapi_forms = mcapi_forms_load();
  foreach($mcapi_forms as $mcapi_form) {
    $types[] = $mcapi_form->name;
  }
  return $types;
}

/*
 * Implements hook_mcapi_info_drupal_permissions
 */
function mcapi_forms_mcapi_info_drupal_permissions() {
  return array(
    'design transaction forms' => array(
      'title' => t('Design transaction forms'),
      'description' => t('Create and edit the forms used to record and edit transactions'),
    )
  );
}

/*
 * Implements hook_theme
 */
function mcapi_forms_theme($existing, $type, $theme, $path) {
  return array(
    'mcapi_form' => array(
      'render element' => 'form',
    ),
  );
}

/*
 * callback specified in the export_ui plugin
 * the formID is actually ctools_export_ui_edit_item_form
 */
function mcapi_edit_mcapi_form(&$form, &$form_state) {
  //this big form builder function is kept in admin.inc
  form_load_include($form_state, 'admin.inc', 'mcapi_forms');
  form_load_include($form_state, 'inc', 'mcapi');//contains the validation functions for the default form elements
  $form_state['build_info']['files']['menu'] = drupal_get_path('module', 'mcapi_forms') .'/mcapi_forms.admin.inc';
  $form_state['build_info']['files']['ctools'] = drupal_get_path('module', 'ctools') .'/includes/export.inc';
  $form['#tree'] = TRUE;
  return _edit_mcapi_form($form, $form_state);
}

/*
 * implements hook_form_FORMID_alter
 */
function mcapi_forms_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  if ($form_state['plugin']['schema'] != 'mcapi_forms') return;
  $form['#validate'][] = 'mcapi_forms_template_validate';
  $form['#submit'][] = 'cache_clear_mcapi_forms';
  $form_state['redirect'] = 'admin/accounting/forms';
}

/*
 * load an mcapi_form by name, using ctools
 * it seems that ctools isn't doing any caching
 */
function mcapi_forms_load($name = NULL) {
  $cached = cache_get('mcapi_forms');
  if (empty($cached)) {
    ctools_include('export');
    $items = ctools_export_crud_load_all('mcapi_forms');
    drupal_alter('mcapi_forms', $items);
    cache_set('mcapi_forms', $items);
    menu_rebuild();
  }
  else {
    $items = &$cached->data;
  }
  if ($name) {
    if (isset($items[$name])) {
      return $items[$name];
    }
    throw new Exception("no such mcapi form: ".$name);
  }
  return $items;
}

/*
 * Implements ctools hook_ctools_plugin_directory
 */
function mcapi_forms_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/export_ui';//directory
  }
}
/*
 * Implements ctools hook_ctools_plugin_api
 */
function mcapi_forms_ctools_plugin_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_forms'),
  );
}

/**
 * Find out whether the logged in user has one of the given roles
 */
function mcapi_access_check_roles($rid) {
  global $user;
  $roles = array_keys($user->roles);
  $roles[] = DRUPAL_AUTHENTICATED_RID;
  return in_array($rid, $roles);
}


/*
 * implements hook_form_FORMID_alter
 */
function mcapi_forms_form_system_theme_settings_alter(&$form, $form_state) {
  $form['tab_element'] = array(
    '#title' => t('Css menu tab identifier'),
    '#description' => t("The second stage of the the transaction form works best when the menu tabs are hidden.") .' '. 
      t("Write the css identifier for the div on this page containing the menu items which 'List', 'Update' & 'Settings'.") .' '.
      t("Don't forget the leading . or #"),
    '#type' => 'textfield',
    '#default_value' => theme_get_setting('tab_element')
  );
}

/*
 * The second stage of the transaction should NOT show the tabs such as view, edit etc
 */
function mcapi_hide_tabs() {
  $data = array(
    '#tag' => 'style',
    '#value' => theme_get_setting('tab_element') .'{display:none;}'
  );
  drupal_add_html_head($data, 'hide_tabs');
}

/*
 * this needs a bit of thought...
 */
function mcapi_path_validate(&$element, &$form_state) {}

function cache_clear_mcapi_forms() {
  cache_clear_all('mcapi_forms', 'cache');
}

/*
 * implements hook_form_field_ui_field_edit_form_alter
 * ensures that no field on the transaction entity is required
 * because this should be handled through this module
 */
function mcapi_forms_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#instance']['entity_type'] == 'transaction') {
    $form['instance']['required']['#type'] = 'hidden';
    $form['instance']['required']['#value'] = FALSE;
  }

}

function mcapi_menu_return_title($title) {
  return $title;
}
function mcapi_form_get_title($mcapi_form) {
  $template = mcapi_form_template($mcapi_form, 1);
  return $template->title;
}

/*
 * the first step is always rendered as a form, and the second step as text
 * Some forms will have one step or the other, some will have both
 */
function mcapi_form_template($mcapi_form, $step = 0) {
  foreach (array(MCAPIFORM_STEP_ENTER, MCAPIFORM_STEP_CONFIRM) as $key) {
    if (!empty($mcapi_form->data['step-'.$key]['title'])) {
      $steps[$key] = (object)$mcapi_form->data['step-'.$key];
    }
  }
  if (isset($steps[$step])) return $steps[$step];
  return array_shift($steps);
}