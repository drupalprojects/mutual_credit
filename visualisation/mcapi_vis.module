<?php
//$Id
define ('GOOGLE_CHARTS_URI', 'http://chart.apis.google.com/chart?');
define('TRANSACTIONS_PAGER_ELEMENT', 1);

/*
function mcapi_vis_help($path) {
  if ($path == 'user/%/bureau') {
    return '';
  }
}*/


function mcapi_vis_menu() {
  $items = array(
    'user/%user/bureau' => array(
      'title' => 'Bureau',
      'description' => 'Example page showing user data',
      'page callback' => 'show_bureau',
      'page arguments' => array(1),
      'access callback' => 'user_view_access',
      'access arguments' => array(1),
      'weight' => 5,
      'type' => MENU_LOCAL_TASK
    )
  );
  //return $items;
}

function show_bureau($account) {
  $currencies = currencies_load();
  $output = '<h3>'.t('Balance history') .'</h3>';
  $output .= show_balance_history($account, array_keys($currencies));

  $output .= '<h3>'.t('Transactions') .'</h3>';
  foreach (array_keys($currencies) as $cid) {
    //use views
  }

  $output .= '<h3>'.t('Balances') .'</h3>';
  //use views

  //this depends on the user_limits module
  if (module_exists('mcapi_limits')) {
    $output .= '<h3>'.t('Balance-ometer') .'</h3>';
    $output .= show_balance_limits($account, array_pop(array_keys($currencies)));
  }
  return $output;
}

//$extent can be 'limits' or 'balance'
function show_balance_history($account, $cids, $extent = 'limits', $since = 0) {
  $histories = array();
  foreach($cids as $cid) {
    $hist = get_balance_history($account, $cid, $since);
    if (count($hist)) {
      $histories[$cid] = $hist;
    }
  }
  return theme('balance_history', array('histories' => $histories));
}


/**
 * http://api.drupal.org/api/function/hook_theme/6
 * This hook is required for modules to define one or more node types.
 */
function mcapi_vis_theme($existing, $type, $theme, $path) {
  $path .='/theme';
  return array(
    'balance_history' => array(
      'template' => 'balance_history',
      'path' => $path,
      'variables' => array(
        'histories' => array(),
        'extent' => NULL,
        'legend' => ''
      )
    ),
    'promiscuity' => array(
      'template' => 'promiscuity',
      'path' => $path,
      'variables' => array(
        'partners' => 0
      )
    ),
  );
}

function mcapi_vis_block_info() {
  //other blocks are provided by views
  $blocks = array(
    'mc_balance_history' => array(
      'info' => 'MC '. t("User balance(s) since creation")
    ),
  );
  return $blocks;
}

function mcapi_vis_block_view($delta) {
  $uid = $GLOBALS['user']->uid;
  if (!$uid) return;
  $edit = variable_get('block_'.$delta, array());
  switch ($delta) {
    case 'mc_balance_history':
      if (arg(0) !='user') return;
      $account = user_uid_optional_load(arg(1));
      if (!user_access('view all balances') && !$account->uid == $uid) return;
      if (!isset($edit['cids'])) {
        $edit['cids'] = array_keys(currencies_load());
      }
      $since = isset($edit['start_time']) ? strtotime($edit['start_time']) : 0;
      return array(
        'subject' => t('Balance history'),
        'content' => show_balance_history($account, $edit['cids'], $since),
      );
      break;

  }
}

function mcapi_vis_block_configure($delta){
  $edit = variable_get('block_'.$delta, array());
  $currencies = currencies_load();
  switch($delta) {
    case 'mc_balance_history':
      $form['start_time'] = array(
        '#title' => t('Starting from'),
        '#description' => t("!strtotime string. Using a relative date like '@example1' will mean this can't be cached. Better use '@example2'",
          array('!strtotime' => l('strtotime()', 'http://php.net/strtotime'), '@example1'=> '-1 year', '@example2' => 'first day last year')) . ' '.
          t("Leave blank to use each user's creation date."),
        '#type' => 'textfield',
        '#weight' => 0,
        '#element_validate' => array('mc_validate_strtotime'),
        '#default_value' => $edit['start_time'],
        '#size' => '10',
      );
      if (count($currencies) > 1) {
        $form['cids'] = mc_currency_picker($currencies, $edit, TRUE);
      }
      $form['extent'] = array(
        '#title' => t('Vertical extent of chart'),
        '#description' => t("The chart can show either the maximum extents of the user's credit limits, or of their balance to date."),
        '#type' => 'radios',
        '#default_value' => $edit['extent'],
        '#required' => TRUE,
        '#options' => array(
          'limits' => t('Currency'),
          'balance' => t('Balance')
        ),
      );
    break;
  }
  return $form;
}

function mcapi_vis_block_save($delta, $values) {
  //save each of the fields, if they exist
  $fields = array('cids', 'start_time', 'extent', 'per_page');
  foreach ($fields as $field) {
    if ($values[$field]) {
      $edit[$field] = $values[$field];
    }
  }
  variable_set('block_'.$delta, $edit);
}

function mc_validate_strtotime(&$element, $form_state) {
  if (isset($element['#value']) && strlen($element['#value']) && !strtotime($element['#value'])) {
    form_error($element, t('Not a valid strtotime() string'));
  }
}

function mc_currency_picker($currencies, $defaults, $multiple = FALSE) {
  //there's a function for this somewhere in this package
  foreach ($currencies as $nid => $currency) {
    $options[$nid] = $currency->title;
  }
  $widget = array(
    '#title' => $multiple ? t('Pick currencies') : t('Pick currency'),
    '#description' => t('Choose one or more currencies by holding down CTRL'),
    '#type' => 'select',
    '#options' => $options,
    '#multiple' => $multiple,
    '#default_value' => $defaults[cids],
  );
  return $widget;
}

/*
 * PREPROCESSING FUNCTIONS
*/

/*
 * this is an alternative to views and the running balance handler
 */
function get_balance_history($account, $cid, $since = NULL) {
  //gets all the transactions from the beginning
  $transactions = mcapi_controller('transaction', 'get_period', array($account->uid,  array('cid' => $cid)));
  //calculate the total after every transaction, starting from zero
  transactions_totalise($transactions, $account->uid, array($cid => 0));

  $points = array();
  //make the first point for each currency
  if (!$since) {
    $points = array($account->created => 0);
  }
  foreach($transactions as $transaction) {
    //one point per transaction produces diagaonal lines
    $points[$transaction->created] = $transaction->balance;
  }
  //add a final point at now, showing the current and final balance
  $points[time()] = $transaction->balance;
  return $points;
}

/*
 * implements hook_form_alter
 * renames the exposed filters on views forms
 */
function mcapi_vis_form_alter($form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $description = t('Comma separated usernames');
    $form['payee']['#description'] = $description;
    $form['payer']['#description'] = $description;
  }
}


/*
 * Implements views hook_views_api
 */
function mcapi_vis_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_vis') .'/views',
  );
}


function mcapi_vis_entity_insert($type, $entity) {
  if ($type == 'transaction') mcapi_update_indices($entity);
}
function mcapi_vis_entity_update($type, $entity) {
  if ($type == 'transaction') mcapi_update_indices($entity);
}

function mcapi_vis_entity_delete($type, $entity) {
  if ($type == 'transaction') mcapi_update_indices($entity);
}

/*
 * To reduce the number of permutations of data which could be cached,
 * Cacheing is done at the display level
 * This function merely clears those caches
 */
function mcapi_update_indices($transaction) {
  
}