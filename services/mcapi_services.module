<?php

/*
 * mcapi_service.module
 *
 * API Wrapper for Xchange Stewards
 * It uses only the mcapi.module for logging transactions and balances.
 * users and currencies are defined outside the system
 * drupal IDs are hidden, using Universal uids ($uuid) and Universal Currency Ids ($ucid)
 * times are converted to ISO 8601
 * This API is for an outside entity,
 *
 * On installation we need to ensure that currency node body is optional!!!
 */


/**
 * Implementation of hook_services_resources().
 */
function mcapi_services_services_resources() {
  return array(
    'currency' => array(
      'create' => array(
        'help' => t('Create a currency using ucid & symbol'),
        'callback' => 'mcapi_service_currency_create',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'data',
            'optional' => FALSE,
            'source' => 'data',
            'type' => 'struct',//in case incoming is array
            'description' => t('Universal currency parameters'),
          ),
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'retrieve' => array(
        'help' => t('Get a currency object from the universal currency id'),
        'callback' => 'mcapi_service_currency_retrieve',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'nid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => t('Universal currency ID'),
          )
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'update' => array(
        'help' => t('Change a currency properties'),
        'callback' => 'mcapi_service_currency_update',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'ucid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'varchar',//in case incoming is array
            'description' => t('Universal currency parameters'),
          ),
          1 => array(
            'name' => 'data',
            'optional' => FALSE,
            'source' => 'data', //data means all the arguments in one struct
            '#type' => 'struct',//in case incoming is array
            '#description' => t('Universal currency parameters'),
          ),
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'delete' => array(
        'help' => t('Delete a currency'),
        'callback' => 'mcapi_service_currency_delete',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'ucid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'varchar',
            'description' => t('Universal currency ID'),
          )
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'index' => array(
        'help' => t('List all currencies'),
        'callback' => 'mcapi_service_currencies_list',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      )
    ),
    //the mcapi_access function isn't invoked here - access should be decided on the client side
    'exchange' => array(
      'create' => array(
        'help' => t('create an exchange with payer, payee, ucid, quantity and optional properties'),
        'callback' => 'mcapi_service_exchange_create',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'data',
            'optional' => FALSE,
            'source' => 'data',
            'type' => 'struct',
            'description' => t('Universal currency ID'),
          ),
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'retrieve' => array(
        'help' => t('Retrieve an exchange using its node id'),
        'callback' => 'mcapi_service_exchange_retrieve',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'exchnage_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => t('drupal nid of exchange'),
          )
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'update' => array(
        'help' => t('Modify a recorded exchange'),
        'callback' => 'mcapi_service_exchange_update',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'data',
            'optional' => FALSE,
            'source' => 'data',
            'type' => 'struct',
            'description' => t('Universal currency ID'),
          ),
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      ),
      'delete' => array(
        'help' => t('Erase a recorded exchange.'),
        'callback' => 'mcapi_service_exchange_delete',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'exchange_id',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => t('drupal nid of exchange'),
          )
        )
      ),
      //call this with POST services/rest/exchanges/get_statement + the three args, ucid=550, ucid=11, rows=4
      'actions' => array(
        'get_statement' => array(
          'help' => t("View a user's recent activity, passing the uuid and the ucid"),
          'callback' => 'mcapi_service_exchange_statement',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'args' => array(
            0 => array(
              'name' => 'uuid',
              'optional' => FALSE,
              'source' => 'data',
              'type' => 'int',
              'description' => t('Universal user ID'),
            ),
            1 => array(
              'name' => 'ucid',
              'optional' => TRUE,
              'source' => 'data',
              'type' => 'varchar',
              'description' => t('Universal currency ID'),
            ),
            2 => array(
              'name' => 'rows',
              'optional' => TRUE,
              'source' => 'data',
              'type' => 'int',
              'description' => t('Number of results'),
            )
          ),
          'file' => array('file' => 'inc', 'module' => 'mcapi_services')
        )
      )
    ),
    'balances' => array(
      'retrieve' => array(
        'help' => t("Get a user's balances, in a given currency"),
        'callback' => 'mcapi_service_user_balances',
        'access callback' => 'user_access',
        'access arguments' => array('access content'),
        'args' => array(
          0 => array(
            'name' => 'uuid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => t('Universal user ID'),
          ),
          1 => array(
            'name' => 'ucid',
            'optional' => TRUE,
            'source' => 'data',
            'type' => 'varchar',
            'description' => t('Universal currency ID'),
          ),
        ),
        'file' => array('file' => 'inc', 'module' => 'mcapi_services')
      )
    )
  );
}

function mcapi_services_form_currency_node_form_alter(&$form, $form_state) {
  $currency = currency_load($form['cid']['#value']);
  $form['ucid'] = array(
    '#title' => t('Universal currency ID'),
    '#description' => t('What is the unique code of this currency when referenced from outside?'),
    '#type' => 'textfield',
    '#default_value' => isset($currency->ucid) ? $currency->ucid : '',
    '#weight' => -3
  );
}
function mcapi_services_currency_load(&$currency) {
  $node->ucid = db_result(db_query(
    "SELECT universal_id FROM {mcapi_universal_ids} WHERE type = 'currency' AND did = :did",
    array(':did' => $currency->cid)
    )
  );
}

function mcapi_services_currency_insert($currency, $type) {
  mcapi_services_currency_update($currency, $type);
}
function mcapi_services_currency_update($currency, $type) {
  if ($type == 'currency') {
    $unid = isset($currency->ucid) ? $currency->ucid : $currency->cid;
    db_query("REPLACE INTO {mcapi_universal_ids} (did, universal_id, type) VALUES (:did, :u_id, 'currency')",
      array(
        ':did' => $currency->cid,
        ':u_id' => $currency->ucid
      )
    );
  }
}
function mcapi_services_entity_delete(&$currency, $type) {
  if ($type == 'currency') {
    db_query("DELETE FROM {mcapi_universal_ids} WHERE did = :did AND type = 'currency'",
      array(':did' => $currency->cid)
    );
  }
}
/*
 * helper functions
 * get the currency object from the universal currency ID
 */
function mcapi_service_currency_lookup($ucid){
  $currencies = &drupal_static('currencies');
  foreach ($currencies as $currency) {
    if ($currency->ucid == $ucid) return $curr;
  }
}

/*
 * implements of hook_user_load
 */
function mcapi_services_user_load(&$users) {
  $currencies = &drupal_static('currencies');
  foreach ($currencies as $cid => $currency) {
    foreach ($users as $account) {
      //
      $account->balances[$cid] = mc_balances($account, $cid) + user_limits($account, $cid);
    }
  }
}

/*
 * implements hook_form_FORM_ID_alter
 * adds a field to the user form so that each user has a unique ID
 */
function mcapi_services_form_user_profile_form_alter(&$form, $form_state) {
  $form['uuid'] = array(
    '#title' => t('Name in external schema'),
    '#description' => t('What is the unique code for this user when referenced from outside?'),
    '#type' => 'textfield',
    '#default_value' => isset($account->uuid) ? $account->uuid : '',
    '#weight' => 3
  );
}

function mcapi_services_user_insert(&$edit, $account, $category) {//and update
  db_query("REPLACE INTO {mcapi_universal_ids} (did, universal_id, type) VALUES (:did, :u_id, 'user')",
    array(
      ':did' => $account->uid,
      ':u_id' => $account->uuid ? $account->uuid : $account->uid
    )
  );
}

function mcapi_services_user_delete(&$edit, $account, $category) {
  db_query("DELETE FROM {mcapi_universal_ids} WHERE did = %d AND type = 'user'",
     array(':utid' => $account->uid)
  );
}

function mcapi_services_user_view($account, $view_mode, $langcode) {
  $account->content['uuid'] = array(
    '#title' => t('Universal user ID'),
    '#type' => 'user_profile_item',
    '#value' => $account->uuid
  );
}

//returns the node or user object
function mcapi_service_universal_lookup($universal_id, $type){
  $did = db_result(db_query(
    "SELECT did FROM {mcapi_universal_ids} WHERE universal_id = :u_id AND type = :type",
    array(':u_id' => $universal_id, ':type' => $type)
  ));
  if ($type == 'currency') {
    return currency_load($did);
  }
  elseif ($type == 'user') {
    return user_load($did);
  }
}