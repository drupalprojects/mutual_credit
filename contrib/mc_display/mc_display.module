<?php
// $Id$
define('EXCHANGES_PAGER_ELEMENT', 1);
define('EXCHANGES_PER_PAGE', 25);
define ('GOOGLE_CHARTS_URI', 'http://chart.apis.google.com/chart?');

/*
 * mc_display - get you started with displaying exchanges to users
 * provides five themed dislays and some views to
 * each display is encapsulated in a block for convenience, but can be called seperately
 * the five are:
 *  - balance_history
 *  - balance_limits
 *  - balances
 *  - period_volumes
 *  - statement (not a view, but may be in Drupal 7!)
 * and 2 views providing 4 displays
 *  - pending_exchanges (provided by views)
 *  - waiting_exchanges (provided by views)
 *  - all exchanges except with account 1
 *  - all_exchanges (with exposed filters for accountants)
 */

//TODO module options global display order for exchanges i.e. asc or desc
//Also an option to display a block for each display for each currency

/*
 * First five functions are the ones you would use in panels or in hook_user($op == view)
 */

function show_balance_history($account, $cids, $since = 0) {
  foreach($cids as $cid) {
    $histories[$cid] = get_balance_history($account, $cid, $since);
  }
  return theme('balance_history', $histories);
}

function show_balances($account, $cids) {
  $balances = mc_balances($account);
  foreach($cids as $cid) {
    $filtered_balances[$cid] = $balances[$cid];
  }
  return theme('balances', array_filter($filtered_balances));
}

function show_user_exchanges($account, $cids) {
  //see the api for the full list of options
  $options = array(
    'states' => array(EXCHANGE_STATE_FINISHED),
    'cids' => $cids,
    'order' => 'DESC',//this could be an option
  );
  if (variable_get('mc_count_pending', TRUE)) {
    $options['states'][] = EXCHANGE_STATE_PENDING;
  }
  
  $exchanges = mc_api_user_exchanges($account->uid, $options);
  return theme('statement', $exchanges, $account);
}

function show_balance_limits($account, $cids) {
  $balances = mc_balances($account);
  //unset any unneeded cids
  foreach ($balances as $cid => $balance) {
    if (!isset($cids[$cid])) unset($balances[$cid]);
  }
  return theme('balance_limits', $account, $balances);
}

function show_balance_ometer($account, $cid) {
  $balances = mc_balances($account);
  $bal = $balances[$cid]['cleared_balance'];
  if (variable_get('mc_count_pending', TRUE)) {
    $bal += $balances[$cid]['pending_dif'];
  }
  return theme('balance_ometer', node_load($cid), $bal, $balances[$cid]['max'], $balances[$cid]['min']);
}

/**
 * http://api.drupal.org/api/function/hook_theme/6
 * This hook is required for modules to define one or more node types.
 */
function mc_display_theme($existing, $type, $theme, $path) {
  $templates_dir = drupal_get_path('module', 'mc_display') .'/theme';
  //we load the inc so it's aware of the preprocess functions
  return array(
    'balance_history' => array(
      'template' => 'balance_history',
      'path' => $templates_dir,
      'arguments' => array(
        'histories' => array(),
        'legend' => ''
      )
    ),
    'balances' => array(
      'template' => 'balances',
      'path' => $templates_dir,
      'arguments' => array(
        'balances' => array()
      )
    ),
    'balance_limits' => array(
      'template' => 'balance_limits',
      'path' => $templates_dir,
      'arguments' => array(
        'balances' => array(),
        'currencies' => array(),
      )
    ),
    'balance_ometer' => array(
      'template' => 'balance_ometer',
      'path' => $templates_dir,
      'arguments' => array(
        'currency' => 0,
        'balance' => 0,
        'max' => 0,
        'min' => 0,
      )
    ),
    'statement' => array(
      'template' => 'statement',
      'path' => $templates_dir,
      'arguments' => array(
        'exchanges' => array(),
        'account' => NULL
      )
    ),
/*  later on we can make a chart showing all the users ratings for a currency
   'mc_ratings' => array(
      'arguments' => array(
        'rating' => NULL,
        'cid' => NULL
      )
    )*/
  );
}
function mc_display_perm(){
  return array(
    'view all balances',
  );
}


function mc_display_block($op = 'list', $delta = 0, $edit = array()) {
  $function = 'mc_display_block_'.$op;
  return $function($delta, $edit);
}
function mc_display_block_list($delta) {
  //other blocks are provided by views
  return array(
    'mc_balance_history' => array(
      'info' => 'MC '. t("User balance(s) since creation ('user/*' only)")
    ),
    'mc_balances' => array(
      'info' => 'MC '. t("User balance(s) now ('user/*' only)")
    ),
    'mc_statement' => array(
      'info' => 'MC '. t("List of user's exchanges ('user/*' only)")
    ),
    'balance_limits' => array(
      'info' => 'MC '. t("Balances & limits")
    ),
    'balance_ometer' => array(
      'info' => 'MC '. t("Balance & limits")
    )
  );
}

function mc_display_block_view($delta, $edit) {
  $edit = variable_get('block_'.$delta, array());
  switch ($delta) {
    case 'mc_balance_history':
      if (arg(0) !='user') return;
      $account = user_uid_optional_load(arg(1));
      if (!user_access('view all balances') && !$account->uid == $GLOBALS['user']->uid) return;
      if (!isset($edit['cid'])) {
        $edit['cids'] = array_keys(currencies_load());
      }
      return array(
        'subject' => t('Balance history'),
        'content' => show_balance_history($account, $edit['cids'], strtotime($edit['start_time'])),
      );
      break;

    case 'mc_balances':
      if (arg(0) != 'user') return;
      $account = user_uid_optional_load(arg(1));
      if (!user_access('view all balances') && !$account->uid == $GLOBALS['user']->uid) return;
      if (!isset($edit['cid'])) {
        $edit['cids'] = array_keys(currencies_load());
      }
      return array(
        'subject' => t("@user's balances", array('@user' => strip_tags(theme('username', $account)))),
        'content' => show_balances($account, $edit['cids'])
      );
      break;

    case 'balance_limits':
      if (arg(0) != 'user') return;
      $account = user_uid_optional_load(arg(1));
      if (!user_access('view all balances') && !$account->uid == $GLOBALS['user']->uid) return;
      if (!isset($edit['cid'])) {
        $edit['cids'] = array_keys(currencies_load());
      }
      return array(
        'subject' => t("@user's balances", array('@user' => strip_tags(theme('username', $account)))),
        'content' => show_balances($account, $edit['cids'])
      );
      break;

    case 'balance_ometer':
      if (arg(0) != 'user') return;
      $account = user_uid_optional_load(arg(1));
      if (!user_access('view all balances') && !$account->uid == $GLOBALS['user']->uid) return;
      if (!isset($edit['cid'])) {
        $edit['cid'] = array_pop(array_keys(currencies_load()));
      }
      return array(
        'subject' => t("@user's balances", array('@user' => strip_tags(theme('username', $account)))),
        'content' => show_balance_ometer($account, $edit['cid'])
      );
      break;

    case 'mc_statement':
      if (arg(0) != 'user') return;
      $account = user_uid_optional_load(arg(1));
      //because each exchange knows its own visibility, we don't check access here
      if (!isset($edit['cid'])) {
        $edit['cids'] = array_keys(currencies_load());
      }
      return array(
        'subject' => t("@user's exchanges", array('@user' => strip_tags(theme('username', $account)))),
        'content' => show_user_exchanges($account, $edit['cids']),
      );
  }
}

function mc_display_block_configure($delta){
  $edit = variable_get('block_'.$delta, array());
  $currencies = currencies_load();
  switch($delta) {
    case 'mc_balance_history':
      $form['start_time'] = array(
        '#title' => t('Starting from'),
        '#description' => t("!strtotime string. Using a relative date like '@example1' will mean this can't be cached. Better use '@example2'",
          array('!strtotime' => l('strtotime()', 'http://php.net/strtotime'), '@example1'=> '-1 year', '@example2' => 'first day last year')) . ' '.
          t("Leave blank to use each user's creation date."),
        '#type' => 'textfield',
        '#weight' => 0,
        '#element_validate' => array('mc_validate_strtotime'),
        '#default_value' => $edit['start_time'],
        '#size' => '10',
      );
    //continuing...
    case 'balance_history':
    case 'mc_statement':
      if (count($currencies) > 1) {
        foreach ($currencies as $cid=>$currency) {
          $options[$cid] = $currency->title;
        }
        $form['cids'] = array(
          '#title' => t('Show only currencies'),
          '#type' => 'select',
          '#multiple' => TRUE,
          '#weight' => 1,
          '#options' => $options,
          '#default_value' => $edit['cids'],
          '#size' => count($currencies),
        );
      }
      break;
    //these do not have a start time
    case 'mc_balances':
      if (count($currencies) > 1) {
        foreach ($currencies as $cid=>$currency) {
          $options[$cid] = $currency->title;
        }
        $form['cids'] = array(
          '#title' => t('Show only currencies'),
          '#type' => 'select',
          '#multiple' => TRUE,
          '#weight' => 1,
          '#options' => $options,
          '#default_value' => $edit['cids'],
          '#size' => count($currencies),
        );
      }
      break;
    case 'balance_ometer': //chose one currency only
      if (count($currencies) > 1) {
        foreach ($currencies as $cid=>$currency) {
          $options[$cid] = $currency->title;
        }
        $form['cids'] = array(
          '#title' => t('Show only currencies'),
          '#type' => 'select',
          '#weight' => 1,
          '#options' => $options,
          '#default_value' => $edit['cids'],
          '#size' => count($currencies),
        );
      }
  }
  return $form;
}
function mc_display_block_save($delta, $values) {
  $edit = array('cids' => $values['cids']);
  if ($values['start_time']) $edit['start_time'] = $values['start_time'];
  variable_set('block_'.$delta, $edit);
}

function mc_validate_strtotime(&$element, $form_state) {
  if (isset($element['#value']) && !strtotime($element['#value'])) {
    form_error($element, t('Not a valid strtotime() string'));
  }
}


/*
 * PREPROCESSING FUNCTIONS
*/

function template_preprocess_balances(&$vars) {
  foreach ($vars['balances'] as $cid => $data) {
    $vars['currencies'][$cid] = node_load($cid);
  }
}

//this function would be a view except views can't yet do "WHERE payer_uid = $x OR payee_uid = $x"
function template_preprocess_statement(&$vars) {
  //add a load of fields from the
  module_load_include('inc', 'mcapi');
  while (list($key, $exchange) = each($vars['exchanges'])) {
    //changing the exchange held in $vars into an array and add the preprocess fields
    $exchange = mc_preprocess_exchange($exchange) + (array)$exchange;
    
    $exchange['balance'] = theme('money', $exchange['balance'], $exchange['cid']);
    if ($exchange['payee_uid'] == $vars['account']->uid) {
      //change the sign on the money to negative
      $exchange['income'] = theme('money', $exchange['quantity'], $exchange['cid']);
      $exchange['expenditure'] = '';
      $exchange['classes'][] = 'credit';
      $exchange['other'] =  $exchange['payer'];
    }
    elseif ($exchange['payer_uid'] == $vars['account']->uid) {
      $exchange['income'] = '';
      $exchange['expenditure'] = theme('money', $exchange['quantity'], $exchange['cid']);
      $exchange['classes'][] = 'debit';
      //negate the quantity  (and derived amount)
      $exchange['quantity'] = -$exchange['quantity'];
      $exchange['other'] =  $exchange['payee'];
    }
    if (isset($exchange['rating'])) {
      $vars['ratings'] = TRUE;
    }
    //finally we have to get the links by hand, which won't show up without node_view
    $vars['exchanges'][$key] = $exchange;
  }
  //print_r($vars['exchanges']);
}

function get_balance_history($account, $cid, $since = NULL) {
  if (!isset($since)) $since = $account->created;
  $points = array();
  //make the first point for each currency
  if (!$since) {
    $since=$account->created;
    $points = array($account->created => 0);
  }
  $result = db_query("SELECT exchanges FROM {mc_cache} WHERE uid = %d AND cid  = %d",
    array(':uid' => $account->uid, ':cid' => $cid)
  );
  while ($data = db_result($result)) {
    $exchanges = unserialize($data);
    foreach($exchanges as $exchange) {
      if ($exchange->created < $since) continue;
      //one point per exchange produces diagaonal lines
      $points[$exchange->created] = $exchange->balance;
    }
    //add a final point at now, showing the last balance
    $points[time()] = $exchange->balance;
  }
  return $points;
}


/*
 * Needed for the views 2 module
 */
function mc_display_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'mc_display') .'/views',
  );
}

