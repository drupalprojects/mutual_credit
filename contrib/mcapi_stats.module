<?php
// $Id$
/* 
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

function mcapi_stats_menu() {
  //we're providing tabs for each stat period, but we should also provide another level of tabs for each currency
  //this setup only works for the default, or first currency
  $periods = variable_get('mc_stats_periods', array("1 month", "1 year"));

  $period = array_shift($periods);
  $firstcurrency = currency_load();
  $items['economy'] = array(
    'title' => 'Economic analysis',
    'description' => 'All available metrics',
    'page callback' => 'show_stats',
    'page arguments' => array($period, 'page'), //this will take a final $cid argument
    'access arguments' => array('view all balances'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'transactions.inc',
    'weight' => 20,
  );
  $items["economy/" . str_replace(' ', '_', $period)] = array(
    'title' => '@period',
    'title arguments' => array('@period' => $period),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  foreach ($periods as $period) {
    $items["economy/" . str_replace(' ', '_', $period)] = array(
      'title' => '@period',
      'title arguments' => array('@period' => $period),
      'page arguments' => array($period, 'page'),
      'access arguments' => array('view all balances'),
      'type' => MENU_LOCAL_TASK,
    );
  }
}

function mcapi_stats_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list': return mcapi_stats_block_list($delta = 0, $edit = array());
    case 'view': return mcapi_stats_block_view($delta = 0, $edit = array());
  }
}

function mcapi_stats_block_list($delta) {
  foreach (variable_get('mc_stats_periods', array("1 month", "1 year")) as $period) {
    $prd=str_replace(' ', '_', $period);
    $blocks["economy-$prd"] = array(
      'info' => 'Cc '. t("@period economy", array('@period' => $period)),
      'cache' => BLOCK_CACHE_GLOBAL,
    );
  }
  return $blocks;
}
function mcapi_stats_block_view($delta) {
  $period = str_replace('_', ' ', substr($delta, 8));
  return array(
    'subject' => t("@period economy", array('@period' => $period)),
    'content' => show_stats($period, 'block'),
  );
}

//uninstall
  variable_del('mc_stats_periods');


function mcapi_nodeapi(&$node, $op) {
  if ($node->type != 'exchange') return;
  switch ($op) {
    case 'update':
    case 'insert':
    case 'delete':
      stats_refresh($node->cid);
  }
}


function show_stats($timestring, $theme = 'page', $cid = 0) {
  $cached = str_replace(' ', '_', $timestring) .'-'. $cid;
  return theme('stats_'. $theme, $cached->data);
}


/*
 * Stats from the cache
 *
Array(
    [misc] => array(
      'exchange_count',
      'total_volume',
      'active_members',
      'mean_volume_active', //number of exchanges on system
    )
    [active_member_count] => 16 //number of unique traders
    [trades_per_user] => Array  ( uid => exchange count ) sorted by num of exchanges descending
    [highest_incomes] => array(uid => income)  sorted by income descending
    [highest_expenditures] => array(uid => expenditure) sorted by expenditure descending
)
 */
function theme_stats_block($stats) {
  if (!$stats['misc']['exchange_count'])   return t('No statistics will be available until some exchanges have happened');
  $html = '<div class="stat">'. t("Number of exchanges: @num", array('@num' => $stats['misc']['exchange_count'])) .'</div>';
  $html .= '<div class="stat">'. t("Total volume traded: @num", array('@num' => $stats['misc']['total_volume'])) .'</div>';
  $html .= '<div class="stat">'. t("Number of trading members: @num", array('@num' => $stats['misc']['active_members'])) .'</div>';
  $html .= '<div class="stat">'. t("Average trading volume: @num", array('@num' => $stats['misc']['mean_volume_active'])) .'</div>';
  return '<div class="stats">'. $html .'</div>';
}

function theme_stats_page($stats) {
  if (!$stats['misc']['exchange_count'])   return t('No statistics will be available until some exchanges have happened');
  $html = '<div class="stat">'. t("Number of exchanges: @num", array('@num' => $stats['misc']['exchange_count'])) .'</div>';
  $html .= '<div class="stat">'. t("Total volume traded: @num", array('@num' => array_sum($stats['highest_incomes']))) .'</div>';
  $html .= '<div class="stat">'. t("Number of trading members: @num", array('@num' => $stats['misc']['active_members'])) .'</div>';
  //shorten the arrays to a useful amount
  foreach ($stats['trades_per_user'] as $uid => $count) {
    $best_traders[] = theme('username', user_load($uid)) .' ('. $count .')';
    if (count($best_traders) == $top_how_many) break;
  }
  $html .= '<div class="stat">'. t("Most trades:") .'<ol><li>'. implode("</li>\n<li>", $best_traders) .'</li></ol></div>';
  foreach ($stats['highest_incomes'] as $uid => $count) {
    $incomes[] =  theme('username', user_load($uid)) .' ('. $count .')';
    if (count($incomes) == $top_how_many) break;
  }
  $html .= '<div class="stat">'. t("Largest incomes:") .'<ol><li>'. implode("</li>\n<li>", $incomes) .'</li></ol></div>';
  foreach ($stats['highest_expenditures'] as $uid => $count) {
    $expenditure[] =  theme('username', user_load($uid)) .' ('. $count .')';
    if (count($expenditure) == $top_how_many) break;
  }
  $html .= '<div class="stat">'. t("Largest expenditure:") .'<ol><li>'. implode("</li>\n<li>", $expenditure) .'</li></ol></div>';

  foreach ($stats['highest_volumes'] as $uid => $count) {
    $volumes[] =  theme('username', user_load($uid)) .' ('. $count .')';
    if (count($volumes) == $top_how_many) break;
  }
  $html .= '<div class="stat">'. t("Highest trading volumes:") .'<ol><li>'. implode("</li>\n<li>", $volumes) .'</li></ol></div>';
  return '<div class="stats">'. $html .'</div>';
}


function mc_stats_options() {
  //could be injected into mc_options
  $form['mc_stats_periods'] = array(
    '#type' => 'textarea',
    '#title' => 'Periods for which stats are available',
    '#default_value' => implode("\n", variable_get('mc_stats_periods', array("1 month", "1 year"))),
    '#description' => t('On each line write a period using php !strtotime syntax, for which stats will be cached. ', array('!strtotime' => l('strtotime', 'http://php.net/strtotime'))) .
      t('For each period there is a tab on the !stats page, and a block.', array('!stats' => l('stats', 'stats'))),
  );

  $form['#submit'] = array('menu_rebuild', 'stats_refresh_all');
    return system_settings_form($form);
}

function mc_stats_options_validate($form, $form_state) {

  //we want to work on all the keyes which have __
  foreach ($form_state['values'] as $key => $value) {
    //the module names was preserved as a prefix in the field name
    if (strpos($key, '__')) {
      $parts = explode('__', $key);
      if (strlen($value)) {
        $nestedvalues[$parts[0]][$parts[1]] = $value;
      }
      unset($form_state['values'][$key]);
    }
  $form_state['values']['mc_exchange_types'] = $nestedvalues;
  }
}


 /*
  * Stats generator
  * caches an array of common stats for one currency
  * $timestring is a positive number of days or months e.g. '3 months'
  *
  */
function stats_refresh($cid = 0) {
  $periods = variable_get('mc_stats_periods', array("1 month", "1 year"));
  foreach ($periods as $period) {
    $period = trim($period);
    //this excludes exchanges with the balancing account
    //Anything involving a member count includes only the active members
    $stats = array();
    $earned = array();
    $spent = array();
    $trades = array();
    $volume = array();
    $states = array(exchange_STATE_COMPLETED);
    if (variable_get('mc_count_pending', FALSE)) {
      $states[] = exchange_STATE_PENDING;
    }
    $result = db_query("SELECT * FROM {mc_exchanges} AS t
      LEFT JOIN {node} AS n ON t.nid = n.nid
      WHERE n.created > %d
      AND t.cid = %d
      AND state in (%d)
      AND t.payer_uid <> %d AND t.payee_uid <> %d",
      array(
        ':since' => strtotime('-'. $period),
        ':cid' => $cid,
        ':states' => implode(',', $states),
        ':payer_uid' => variable_get('mc_balancing_account_num', 1),
        ':payee_uid' => variable_get('mc_balancing_account_num', 1)
      )
    );

    //iterate through the exchanges, adding stuff up
    $count=0;
    while ($t = db_fetch_object($result)) {
      $earned[$t->payee_uid] = $earned[$t->payee_uid] + $t->quantity;
      $spent[$t->payer_uid] = $spent[$t->payer_uid] + $t->quantity;
      $trades[$t->payee_uid] ++;
      $trades[$t->payer_uid] ++;
      $count ++;
    }
    if (!$count) continue;
    $active_members = count($trades);
    foreach ($trades as $uid => $val) {
      $volume[$uid] = $earned[$uid] + $spent[$uid];
    }
    asort($earned);
    asort($spent);
    asort($volume);
    asort($trades);
    $stats['highest_incomes'] = array_reverse($earned, TRUE);
    $stats['highest_expenditures'] = array_reverse($spent, TRUE);
    $stats['highest_volumes'] = array_reverse($volume, TRUE);
    $stats['trades_per_user'] = array_reverse($trades, TRUE);
    $stats['misc']['active_members'] = $active_members;
    $stats['misc']['total_volume'] = array_sum($stats['highest_volumes'])/2;
    $stats['misc']['mean_volume_active'] = 2*intval(array_sum($stats['highest_volumes'])/$active_members);
    $stats['misc']['exchange_count'] = $count;
    //we might not need this one, since it is obtained by simple sub of the above
    $stats['misc']['mean_exchange_count_active'] = $count/floatval($active_members);
    cache_set(str_replace(' ', '_', $period) . '-'. $cid, $stats);
  }
}
