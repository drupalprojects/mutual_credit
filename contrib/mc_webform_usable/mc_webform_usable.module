<?php
// $Id$
//these are bitmasks, so saved as one number in currency sub-types
define('INCOMING_DIRECT', 1);
define('OUTGOING_DIRECT', 2);
define('INCOMING_SIGNED', 4);
define('OUTGOING_SIGNED', 8);

function mc_webform_usable_help($path) {
  switch($path) {
    case 'admin/mc/currencies':
      $help = t("The user friendly webforms module introduces four 2 exchange types, which are named here.") .' '. 
        t("Each one should be a singular noun. Only currencies using at least one of these types are visible to the usable forms.") . '<br />'.
        t("'!incoming' means the currency flows towards the initiator of the exchange, '!outgoing', away.", array('!incoming' => '<strong>'.t('Incoming').'</strong>', '!outgoing' => '<strong>'.t('Outgoing').'</strong>')) .'<br />';
      if (module_exists('mc_currencies')) {
        $help .= t("These two supplemented by two more 'confirm' types from the signatory module") .' '.
          t("'!confirm', means the exchange will be not be counted until both parties have agreed.", array('!confirm' => '<strong>'.t('Confirm').'</strong>')) .'<br />'.
          t("'!direct' exchanges happen immediately.", array('!direct' => '<strong>'.t('Direct').'</strong>'));
        }
  }
  return $help;
}

/*
 * This form introduces the notion of 'starter', 'completer', and exchange directions
 * Four exchange types are introduced, which control the pending state and which transactee should 'sign'.
 */
function mc_webform_usable_menu() {
  if (!count(get_currencies_for_usable())) return;
  $items['exchange/initiate'] = array(
    'title' => 'Initiate',
    'title callback' => 'mc_usable_menu_title',
    'title arguments' => array(2),
    'page arguments' => array('mc_usable_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  return $items;
}

function mc_webform_usable_menu_alter(&$items) {
  if (!count(get_currencies_for_usable())) return;
  //this is just a wrapper around the currencies page that adds a transaction type naming form
  $items['admin/mc/currencies']['page callback'] = 'webform_usable_currency_list';
  //have to replace the 3rdparty callback which used be default local task
  $thirdparty_title = $items['exchange/3rdparty']['title'];
  $items['exchange/3rdparty'] = $items['exchange'];
  $items['exchange/3rdparty']['type'] = MENU_LOCAL_TASK;
  $items['exchange/3rdparty']['title'] = $thirdparty_title;
  $items['exchange/3rdparty']['weight'] = 3;
  $items['exchange'] = array(
    'title' => 'Register exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_usable_form'),
    'access arguments' => array('exchange'),
    'weight' => 1,
    'file' => 'mc_webform_usable.inc',
    //have to state path explicitly in menu_alter
    'file path' => drupal_get_path('module', 'mc_webform_usable'),
  );
}

/*
 * Implementation of webforms hook, hook_mc_exchange_forms
 */
function mc_webform_usable_exchange_type_info() {
  $titles = variable_get('mc_subtypes', array());
  $types = array(
    'incoming direct' => array(
      'title' => $titles[INCOMING_DIRECT],
      'edit' => 'mc_edit_form',
      'bitmask' => INCOMING_DIRECT
    ),
    'outgoing direct' => array(
      'title' => $titles[OUTGOING_DIRECT],
      'edit' => 'mc_edit_form',
      'bitmask' => OUTGOING_DIRECT
    )
  );
  if (module_exists('mc_signatures')) {
    $types += array(
      'incoming signed' => array(
        'title' => $titles[INCOMING_SIGNED],
        'edit' => 'mc_edit_form',
        'bitmask' => INCOMING_SIGNED
      ),
      'outgoing signed' => array(
        'title' => $titles[OUTGOING_SIGNED],
        'edit' => 'mc_edit_form',
        'bitmask' => OUTGOING_SIGNED
      )
    );
  }
  return $types;
}

//prepend the transaction names form onto the currencies summary page;
function webform_usable_currency_list() {
  module_load_include('inc', 'mcapi');
  module_load_include('inc', 'mc_webform_usable');
  $exchange_types = drupal_get_form('exchange_subtype_names_form');
  $original_page = currency_list();
  return $exchange_types . $original_page;
}


/**
 * http://api.drupal.org/api/function/hook_theme/6
 * This hook is required for modules to define one or more node types.
 */
function mc_webform_usable_theme() {
  module_load_include('inc', 'mc_webform_usable');
  return array(
    'mc_usable_formspecial' => array(
      'template' => 'mc_usable_formspecial',
      'arguments' => array('form' => NULL),
      'preprocess functions' => array('template_preprocess', 'template_preprocess_mc_3rdparty_formspecial'),
      'override preprocess functions' => TRUE,
    ),
    'mc_usable_formspecial_block' => array(
      'template' => 'mc_usable_formspecial_block',
      'arguments' => array('form' => NULL),
      'preprocess functions' => array('template_preprocess', 'template_preprocess_mc_3rdparty_formspecial'),
      'override preprocess functions' => TRUE,
    ),
    'mc_webform_title' => array(
      'arguments' => array('currencies' => array()),
      'file' => drupal_get_path('module', 'mc_webform_usable') . '/mc_webform_usable.inc'
    ),
    'subtype_names' => array(
      'arguments' => array(),
      'file' => drupal_get_path('module', 'mc_webform_usable') . '/mc_webform_usable.inc'
    )
  );
}

//hook_nodeapi broken up, ready for drupal 7
function mc_webform_usable_nodeapi(&$node, $op) {
  switch($op) {
    case 'presave':
      mc_webform_usable_node_presave($node);break;
  }
}

function mc_webform_usable_node_presave(&$node) {
  switch ($node->type) {
    case 'currency':
      if (is_array($node->exchange_subtypes)) {//this might not be the case when reinstalling mcapi using devel
        //compile the bitmask
        $bitmask = array_sum($node->exchange_subtypes);
        $node->data['exchange_subtypes'] = $bitmask;
      }
  }
}


/**
 * http://api.drupal.org/api/function/hook_block/6
 */
function mc_webform_usable_block($op = 'list', $delta = 0, $edit = array()) {
  module_load_include('inc', 'mc_webform_usable');
  switch ($op) {
    case 'list':
      return mc_webform_usable_block_list($delta);
    case 'view':
      return mc_webform_usable_block_view($delta, $edit);
  }
}

//form_alter to add the exchange type names to the top of the currency list form
function mc_webform_usable_form_currency_node_form_alter(&$form, $form_state) {
  //exchange subtypes. exchanges can be incoming (from the initiator) or outgoing, confirm or direct
  //that means there are 4 subtypes of exchange, incoming_direct, incoming_SIGNED, outgoing_direct & outgoing_SIGNED
  //The currency specifies which of these 4 types are possible, using a bitmask
  //need to retrieve the defaults from the currency node
  $node  = node_load($form['nid']['#value']);
  $defaults = array(
    INCOMING_DIRECT => $node->data['exchange_subtypes'] & INCOMING_DIRECT,
    OUTGOING_DIRECT => $node->data['exchange_subtypes'] & OUTGOING_DIRECT,
  );
  if (module_exists('mc_signatures')) {echo 'here';
    $defaults += array(
      INCOMING_SIGNED => $node->data['exchange_subtypes'] & INCOMING_SIGNED,
      OUTGOING_SIGNED => $node->data['exchange_subtypes'] & OUTGOING_SIGNED,
    );
  }
  //get the names of the available types
  $type_names = variable_get('mc_subtypes', array());
  foreach ($defaults as $key => $default){
    $options[$key] = $type_names[$key];
  }
  $form['exchange_subtypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exchange sub-types'),
    '#default_value' => $defaults,
    '#options' => $options,
    '#description' => t("For the currency to appear in the user friendly webform, at least one of these must be checked"),
  );
}


function mc_usable_menu_title($cid) {
  $props = array();
  if ($cid)$props['cid'] = $cid;
  return theme('mc_webform_title', $props);
}

/*
 * this is the main form callback, followed by alter, validate and submit functions
 * note that there is no edit form, instead we use the edit from module mc_webforms
 * this has to be on this page, otherwise the ajax callback can't find it
 */
function mc_usable_form($form_state, $prefill = NULL) {
  module_load_include('inc', 'mc_webform_usable');
  if (!$form_state['storage']['step']) {
    $form_state['storage']['step'] = 1;
  }
   $values = $form_state['storage']['values'] //this is for stage 1 errors and stage 2
    or $values = $form_state['post'] //for the AHAH in stage 1
    or $values = $prefill //passed from mc_webform_block or menu callback
    or $values = array();
  if (is_numeric($values)) {
    $values = array('cid' => $values); //this is cid passed via menu callback
  }
  if ($form_state['storage']['step'] == 1){
    //get the default exchange form, with defaults
    $form = mcapi_form_exchange((object)$values, get_currencies_for_usable());
    mc_build_usable_form($form, $values);

    //there are some circumstances the ajax is not needed, but I'm not going to make all the rules now
    //chooing the currency shows the ratings field, and the divisions, if the currency has them
    //choosing the exchange type shows the ratings field, if appropriate.
    mc_ajaxify($form['cid'], 'mc_usable_form');
    mc_ajaxify($form['exchange_type'], 'mc_usable_form');

    //in case the form is in a block, we need to specify the path of step 2
    $form['#action'] = url('exchange/initiate');
  }
  elseif ($form_state['storage']['step'] == 2){
    //this is borrowed from mc_webforms
    $form = exchange_step2_form($values);
    $form['#redirect'] = 'user';
  }
  return $form;
}

//remove the logged in user from the list of options on the completer widget
//this is after_build because the #options are inserted during the element processing, i.e. building
function mc_unlist_user($element, $form_state) {
  unset($element['#options'][$GLOBALS['user']->uid]);
  return $element;
}

function get_currencies_for_usable() {
  $currencies = currencies_load();
  foreach ($currencies as $cid => $currency){
    if (!$currency->data['exchange_subtypes']) {
      unset($currencies[$cid]);
    }
  }
  return $currencies;
}
