<?php

/**
 * @file
 * mcapi.module
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Utility\Token;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\user\EntityOwnerInterface;
use Drupal\mcapi\Mcapi;
use Drupal\mcapi\Plugin\TransitionInterface;
use Drupal\mcapi\TransactionInterface;
use Drupal\mcapi\Entity\Currency;
use Drupal\mcapi\Entity\State;
use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Entity\Transaction;
use Drupal\mcapi\Entity\Type;

//states are mutually exclusive //is it appropriate to use constants for plugin names?
const TRANSACTION_STATE_FINISHED = 'done';
const TRANSACTION_STATE_ERASED = 'erased';

//we could maybe do without these
const CURRENCY_TYPE_ACKNOWLEDGEMENT = 'acknowledgement';
const CURRENCY_TYPE_EXCHANGE = 'exchange';
const CURRENCY_TYPE_COMMODITY = 'commodity';

//
const WALLET_ACCESS_OWNER =  'o';//this is replaced with a named user
const WALLET_ACCESS_EXCHANGE = 'e';//this could be moved the exchange module
const WALLET_ACCESS_AUTH = '2';//this is the role id
const WALLET_ACCESS_ANY = '1';//this is the role id
const WALLET_ACCESS_USERS = 'u';//user id is in the wallet access table

/**
 * implements hook_requirements().
 */
function mcapi_requirements($phase) {
  if ($phase == 'runtime') {
    $result = array(
      'title' => t('Transaction index table'),
    );
    //check that the index table is integral
    if (\Drupal::entityManager()->getStorage('mcapi_transaction')->indexCheck()) {
      $result['severity'] = REQUIREMENT_OK;
      $result['description'] = t('Index table adds up');
    }
    else {
      $result['severity'] = REQUIREMENT_ERROR;
      $result['description'] = t(
        'Index table does not add up. Try rebuilding it at !link',
        array('!link' => \Drupal::l('admin/accounting/misc', Url::fromRoute('mcapi.admin_misc')))
      );
    }
    return array($result);
  }
}

/**
 * implements hook_help()
 * TODO shouldn't there be some in each page controller to inject help?
 */
function mcapi_help($route_name, $route_match) {
  switch ($route_name) {
    case 'mcapi.admin':
      if (enough_wallets()->isForbidden()) {
        $m[] = t("There aren't enough wallets for you to create a transaction.");
        $m[] = Drupal::l(t("Give yourself a(nother) wallet"), Url::fromRoute('mcapi.wallet.add.user', ['user' => \Drupal::currentUser()->id()]));
        //todo make this work with the link
        debug($m);
        drupal_set_message(implode(' ', $m), 'warning');
      }
    case 'mcapi.admin_currency_list':
      return implode(' ', array(
        t('Multiple currencies allow many, potentially overlapping communities to work in this Drupal instance, and for currencies to embody different values.'),
        t('Retired currencies can no longer be used, but transactions are still visible.'),
        t('Only unused currencies can be deleted.'),
      ));
    case 'mcapi.admin.transactions':
      return implode(' ', array(
        t('Workflow transitions move transactions of various types between states.'),
        t('Modules can add more states and types'),
        t('Each transition presents the user with confirmation form, which is configured on this page.')
      ));
    case 'field_ui.overview_mcapi_transaction':
      $settings_url = Url::fromRoute('mcapi.admin_misc');
      $transitions_url = Url::fromRoute('mcapi.admin.transactions');
      return implode(' ', array(
        t('These transaction display settings should always be overridden.'), 
        t('To configure the certificate, override certificate.html.twig in your theme'),
        t(
          'To configure the sentence, see the Accounting settings: !link.',
          array('!link' => \Drupal::l($settings_url->toString(), $settings_url))
        ),
        t(
          'Custom Twig can be used for display on the transition settings pages: !link.',
          array('!link' => \Drupal::l($transitions_url->toString(), $transitions_url))
        ),
      ));
  }
}


/**
 * implements hook_theme().
 */
function mcapi_theme($existing, $type, $theme, $path) {
  module_load_include('inc', 'mcapi');
  return _mcapi_theme();
}

/**
 * implements hook_entity_view().
 * add a wallet summary view to wallet-enabled entities
 */
function mcapi_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {

  if ($display->getComponent('wallets_summaries')) {
    //check the entity is of a type which can own a wallet.
    $key = 'entity_types.' . $entity->getEntityTypeId() .':'. $entity->bundle();
    if (\Drupal::config('mcapi.wallets')->get($key)) {
      //get the wallets belonging to this entity
      $wids = \Drupal::EntityManager()
        ->getStorage('mcapi_wallet')
        ->getOwnedIds($entity);
print_r($wids);
      $viewbuilder =\Drupal::entityManager()->getViewBuilder('mcapi_wallet');
      foreach (Wallet::loadMultiple($wids) as $wid => $wallet) {
        if ($wallet->access('view')) {
          //this line might run multiple times, but most likely once or not at all
          $build['wallets_summaries']['#theme'] = 'mcapi_wallets';
          $build['wallets_summaries']['#wallets'][$wid] = $viewbuilder->view($wallet, 'summary');
        }
      }
    }
    //show the add new wallet link
    if (\Drupal::config('mcapi.wallets')->get('add_link_location') != 'local_action') {
      $route_name = 'mcapi.wallet.add.'.$entity->getEntityTypeId();
      $route_params = array('user' => $entity->id());
      $access_manager = \Drupal::getContainer()->get('access_manager');
      if ($access_manager->checkNamedRoute($route_name, $route_params, \Drupal::currentUser())) {
        $build['wallets_summaries']['add_wallet_link'] = array(
          '#type' => 'link',
          '#title' => t('Add wallet'),
          '#route_name' => $route_name,
          '#route_parameters' => $route_params,
          '#weight' => 2,
          '#options' => array(
            'attributes' => new Attribute(array(
              'class' => array('add-wallet-link')
            )),
            '#attributes' => array('class' => array('add-wallet-link'))
          ),
          //this gets around the default css inline-block with which css 'clear' doesn't seem to work
          '#prefix' => '<br />'
        );
      }
    }
  }
  return $build;
} 

/**
 * implements hook_mail().
 * @todo remove this when we have rules
 */
function mcapi_mail($key, &$message, $params) {
  if ($key == 'transition') {
    $params += array(
      'user' => \Drupal::currentUser(),
      //'mcapi_transaction' => $transaction
    );
    $options = array('language' => $message['langcode'], 'sanitize' => FALSE);
    $message['subject'] =  \Drupal::Token()->replace($params['subject'], $params, $options);
    $message['body'][] =  \Drupal::Token()->replace($params['body'], $params, $options);
    $message['headers']['cc'] = $params['cc'];
  }
}


/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_entity_extra_field_info() {
  module_load_include('inc', 'mcapi');
  return _mcapi_entity_extra_field_info();
}

/**
 * Machine name callback
 * Load a currency, from its id
 *
 * @param string $id
 *
 * @returns CurrencyInterface
 *
 */
function mcapi_currency_load($id) {
  return Currency::load($id);
}

/**
 * Utility function to populate a form widget's options with entity names
 *
 * @param string $entity_type_id
 *
 * @param array $data
 *   either entities of the given type, entity ids, or $conditions for entity_load_multiple_by_properties
 *
 * @return array
 *   The entity names, keyed by entity id
 */
function mcapi_entity_label_list($entity_type_id, array $data = []) {
  if (empty($data)) {
    $entities = \Drupal::entityManager()->getStorage($entity_type_id)->loadMultiple();
  }
  elseif(is_string(key($data))) {
    $entities = entity_load_multiple_by_properties($entity_type_id, $data);
  }
  elseif(is_numeric(reset($data))) {
    $entities = \Drupal::entityManager()->getStorage($entity_type_id)->loadMultiple($data);
  }
  else $entities = $data;
  $list = [];
  foreach ($entities as $entity) {
    $list[$entity->id()] = $entity->label();
  }
  //TODO sort these entities by weight but how?
  return $list;
}

/**
 * example implementation of hook_mcapi_transition().
 * This invokes rules, if installed, but can be used by any module
 *
 * @param TransactionInterface $transaction
 * @param TransitionInterface $transition
 * @param array $context
 *   consists of op_plugin_id; config, the transition plugin configuration; old_state: the state of the transaction before the transition
 * TODO wipe this once rules is available.
 */
function mcapi_mcapi_transition(TransactionInterface $transaction, TransitionInterface $transition, array $context) {
  //TODO invoke rules hook
  if (\Drupal::currentUser()->id() == 1) debug($context, 'Ran hook_mcapi_transition');
  //example code
  if (@$context['config']['send']) {
    $recipients = [];
    //mail is sent to the user owners of wallets, and to cc'd people
    foreach (array('payer', 'payee') as $participant) {
      $recipients[] = User::load($transaction->{$participant}->entity->user_id())->mail->value;
    }
    //with multiple recipients we have to choose one language
    //just English for now bcoz rules will sort this out
    if ($recipients) {
      \Drupal::service('plugin.manager.mail')->mail(
        'mcapi',
        'transition',
        implode(',', $recipients),
        'en',//TODO get the langcode for the first recipient
        array(
          'mcapi' => $transaction,
          'cc' => $context['config']['cc'],
          'subject' => $context['config']['subject'],
          'body' => $context['config']['body']
        )
      );
    }
  }
}

/**
 * implements hook_element_info_alter().
 * adds the 'balances' icon via css
 */
function mcapi_element_info_alter(&$items) {
  $items['toolbar']['#attached']['library'][] = 'mcapi/mcapi.toolbar';
}


/**
 * implements hook_entity_insert()
 * give a new wallet to new entities, if the settings require
 * 
 * @todo check the exchange reference field for changes, then run hook_hello or hook_goodbye - delayed because og must provide hooks
 */
function mcapi_entity_insert($entity) {
  //note that intertrading wallets are created not here but in Exchange::postSave
  if (\Drupal::config('mcapi.wallets')->get('autoadd')) {
    $type = $entity->getEntityTypeId();
    //NB autoadd applies to ALL entity types or to none
    $maxes = \Drupal::config('mcapi.wallets')->get('entity_types');
    if ($max = @$maxes[$type .':'. $entity->bundle()]) {
      //no need to check what the max is, since this is the first wallet created for this entity
      $wallet = Wallet::create(array(
        'entity_type' => $type,
        'pid' => $entity->id(),
        //default access controls are set automatically
      ));
      $wallet->save();
      debug('created wallet for '.$type.' '.$entity->id());
    }
  }
}

/**
 * implements hook_entity_update().
 * if the changed entity is a wallet owner, then refresh the wallet indices
 * especially in case the owner has moved to a different exchange
 */
function mcapi_entity_update($entity) {
  if (Mcapi::walletable($entity)) {
    $storage = \Drupal::EntityManager()->getStorage('mcapi_wallet');
    if ($wids = $storage->getOwnedIds($entity)) {
      $storage->reIndex(Wallet::loadMultiple($wids));
    }
  }
}

/**
 * implements hook_entity_delete()
 * ensure any wallets belonging to the entity are moved to their parent's exchange
 * @todo this should be pre-deletion
 */
function mcapi_entity_delete($entity) {
  if (Mcapi::walletable($entity)) {
    Wallet::orphan($entity);
  }
}

/**
 * implements hook_local_tasks_alter().
 * prevent the three fixed transaction display modes from being edited
 * this function will fail if mcapi is not heavier than field_ui module
 * 
 * @todo rather than changing the weight of the field_ui in mcapi_install, 
 * tidier to use module_implements_alter for this hook only
 */
function mcapi_local_tasks_alter(&$tasks) {
  $names = array('certificate_mcapi_transaction', 'twig_mcapi_transaction', 'sentence_mcapi_transaction');
  foreach ($names as $name) {
    unset($tasks['field_ui.fields:field_display_'.$name]);
  }
}

/**
 * implements hook_entity_operation_alter();
 * prevent the transaction view modes from being tampered with
 */
function mcapi_entity_operation_alter(&$operations, $entity) {
  $ids = array(
    'mcapi_transaction.certificate',
    'mcapi_transaction.twig',
    'mcapi_transaction.sentence'
  );
  if (in_array($entity->id(), $ids)) {
    $operations = [];
  }
}

/**
 * Implements hook_hook_info().
 * @todo is it worth creating hook group and filename extension?
 */
function mcapi_hook_info() {
  $hooks = array(
    //TODO document these properly in mcapi.api.php
    'mcapi_transaction_children',//add children without affecting parent
    'mcapi_transaction_validate',//throw violations without affecting transaction
    'mcapi_transaction_alter',//alter the main transaction
    'mcapi_transition',
    //and all the entity hooks e.g
    'mcapi_wallet_update',
    'mcapi_wallet_delete'
    //...there are many
  );
  return array('group' => 'mcapi') + array_combine($hooks, $hooks);
}

/*
 * implements hook_form_alter
 * automate and hide the 'required' checkbox for the worth field on Transactions
 */
function mcapi_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#entity']->getEntityTypeId() != 'mcapi_transaction') return;
  $required = TRUE;
  $currs = $form['field']['default_value']['widget']['#allowed_curr_ids'];
  foreach (Currency::loadMultiple($currs) as $currency) {
    if ($currency->zero) {
      $required = FALSE;
      break;
    }
  }
  $form['field']['required']['#type'] = 'value';
  $form['field']['required']['#value'] = $required;
}


  /**
   * router access callback
   * Find out if the user has access to enough wallets to be able to transact
   * i.e. 2
   * @todo find out how many wallets any given user can pay from and to
   */
  function enough_wallets() {
    $count = db_select('mcapi_wallet', 'w')->fields('w', array('wid'))->countQuery()->execute()->fetchfield();
    return $count > 1 ? 
      Drupal\Core\Access\AccessResult::allowed()->cachePerUser() :
      Drupal\Core\Access\AccessResult::forbidden()->cachePerUser();
  }
  