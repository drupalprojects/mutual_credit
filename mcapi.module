<?php

/**
 * @file
 * mcapi.module
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Utility\Token;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\mcapi\Plugin\TransitionInterface;
use Drupal\mcapi\TransactionInterface;
use Drupal\mcapi\ExchangeInterface;
use Drupal\mcapi\Entity\Currency;
use Drupal\mcapi\Entity\State;
use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Entity\Transaction;
use Drupal\mcapi\Entity\Type;
use Drupal\mcapi\Entity\Exchange;
use Drupal\Component\Utility\NestedArray;
use Drupal\user\EntityOwnerInterface;
use Drupal\Core\Url;

//states are mutually exclusive //is it appropriate to use constants for plugin names?
const TRANSACTION_STATE_FINISHED = 'done';
const TRANSACTION_STATE_ERASED = 'erased';

//we could maybe do without these
const CURRENCY_TYPE_ACKNOWLEDGEMENT = 'acknowledgement';
const CURRENCY_TYPE_EXCHANGE = 'exchange';
const CURRENCY_TYPE_COMMODITY = 'commodity';

//negative numbers are used here, and positive numbers represetn uids in the db
const WALLET_ACCESS_OWNER =  'o';//this is replaced with a named user
const WALLET_ACCESS_EXCHANGE = 'e';
const WALLET_ACCESS_AUTH = '2';
const WALLET_ACCESS_ANY = '1';
const WALLET_ACCESS_USERS = 'u';

/**
 * implements hook_requirements().
 */
function mcapi_requirements($phase) {
  if ($phase == 'runtime') {
    $result = array(
      'title' => t('Transaction index table'),
    );
    //check that the index table is integral
    if (\Drupal::entityManager()->getStorage('mcapi_transaction')->indexCheck()) {
      $result['severity'] = REQUIREMENT_OK;
      $result['description'] = t('Index table adds up');
    }
    else {
      $result['severity'] = REQUIREMENT_ERROR;
      $result['description'] = t(
        'Index table does not add up. Try rebuilding it at !link',
        array('!link' => \Drupal::l('admin/accounting/misc', Url::fromRoute('mcapi.admin_misc')))
      );
    }
    return array($result);
  }
}

/**
 * implements hook_help()
 * TODO shouldn't there be some in each page controller to inject help?
 */
function mcapi_help($route_name, $route_match) {
  switch ($route_name) {
    case 'mcapi.admin':
      return t('The intention of this package is to put the money creation power in the hands of the producers and users of money and to reduce dependence of ordinary people on rapacious global financial capital.');
    case 'mcapi.admin_currency_list':
      return implode(' ', array(
        t('Multiple currencies allow many, potentially overlapping communities to work in this Drupal instance, and for currencies to embody different values.'),
        t('Retired currencies can no longer be used, but transactions are still visible.'),
        t('Only unused currencies can be deleted.'),
      ));
    case 'mcapi.admin.workflow':
      return implode(' ', array(
        t('Workflow transitions move transactions between states.'),
        t('Each transition presents the user with confirmation form, which is configured on this page.')
      ));
    case 'field_ui.overview_mcapi_transaction':
      $settings_url = Url::fromRoute('mcapi.admin_misc');
      $transitions_url = Url::fromRoute('mcapi.admin.workflow');
      return implode(' ', array(
        t('These transaction display settings should always be overridden.'), 
        t('To configure the certificate, override certificate.html.twig in your theme'),
        t(
          'To configure the sentence, see the Accounting settings: !link.',
          array('!link' => \Drupal::l($settings_url->toString(), $settings_url))
        ),
        t(
          'Custom Twig can be used for display on the transition settings pages: !link.',
          array('!link' => \Drupal::l($transitions_url->toString(), $transitions_url))
        ),
      ));
  }
}


/**
 * implements hook_theme().
 */
function mcapi_theme($existing, $type, $theme, $path) {
  module_load_include('inc', 'mcapi');
  return _mcapi_theme();
}

/**
 * implements hook_entity_view().
 * add a wallet summary view to wallet-enabled entities
 */
function mcapi_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  if ($display->getComponent('wallets_summaries')) {
    //check the entity is of a type which can own a wallet.
    if ($quants = \Drupal::config('mcapi.wallets')->get('entity_types')) {
      $key = $entity->getEntityTypeId() .':'. $entity->bundle();
      if (array_key_exists($key, $quants) && $quants[$key]) {
        module_load_include('inc', 'mcapi');
        $build['wallets_summaries'] = mcapi_view_wallets_summaries($entity);
      }
    }
    else drupal_set_message('config mcapi.wallets is empty');
  }
}

/**
 * Implements hook_form_alter();
 * Add a submit callback to ContentEntityForms for contentTypes which reference exchanges
 * to check for entities joining and leaving exchanges
 * Form_alter is rather a blunt instrument but it is the best available.
 * Would be better to use hook_entity_presave or postsave but the old values aren't available there
 */
function mcapi_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (array_key_exists('controller', $form_state) && $form_state->get('controller') instanceof \Drupal\Core\Entity\ContentEntityForm) {
    $entity = $form_state->get('controller')->getEntity();
    $form_state->loadInclude('mcapi', 'inc');
    $lookup = bundles_in_exchanges();
    $entity_type = $entity->getEntityTypeId();
    if (array_key_exists($entity_type, $lookup)) {
      if (array_key_exists($entity->bundle(), $lookup[$entity_type])) {
        array_unshift($form['actions']['submit']['#submit'], 'mcapi_exchanges_changed_submit');
      }
    }
  }
}

/**
 * implements hook_mail().
 * @todo remove this when we have rules
 */
function mcapi_mail($key, &$message, $params) {
  if ($key == 'transition') {
    $params += array(
      'user' => \Drupal::currentUser(),
      //'mcapi_transaction' => $transaction
    );
    $options = array('language' => $message['langcode'], 'sanitize' => FALSE);
    $message['subject'] =  \Drupal::Token()->replace($params['subject'], $params, $options);
    $message['body'][] =  \Drupal::Token()->replace($params['body'], $params, $options);
    $message['headers']['cc'] = $params['cc'];
  }
}



/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_entity_extra_field_info() {
  module_load_include('inc', 'mcapi');
  return _mcapi_entity_extra_field_info();
}



/**
 * Machine name callback
 * Load a currency, from its id
 *
 * @param string $id
 *
 * @returns CurrencyInterface
 *
 * @todo is this still needed?
 */
function mcapi_currency_load($id) {
  return Currency::load($id);
}

/**
 * Helper function to populate a form widget's options with entity names
 *
 * @param string $entity_type_id
 *
 * @param array $data
 *   either entities of the given type, entity ids, or $conditions for entity_load_multiple_by_properties
 *
 * @return array
 *   The entity names, keyed by entity id
 */
function mcapi_entity_label_list($entity_type_id, array $data = array()) {
  if (empty($data)) {
    $entities = \Drupal::entityManager()->getStorage($entity_type_id)->loadMultiple();
  }
  elseif(is_string(key($data))) {
    $entities = entity_load_multiple_by_properties($entity_type_id, $data);
  }
  elseif(is_numeric(reset($data))) {
    $entities = \Drupal::entityManager()->getStorage($entity_type_id)->loadMultiple($data);
  }
  else $entities = $data;
  $list = array();
  foreach ($entities as $entity) {
    $list[$entity->id()] = $entity->label();
  }
  //TODO sort these entities by weight but how?
  return $list;
}

/**
 * example implementation of hook_mcapi_transition().
 * This invokes rules, if installed, but can be used by any module
 *
 * @param TransactionInterface $transaction
 * @param TransitionInterface $transition
 * @param array $context
 *   consists of op_plugin_id; config, the transition plugin configuration; old_state: the state of the transaction before the transition
 * TODO wipe this once rules is available.
 */
function mcapi_mcapi_transition(TransactionInterface $transaction, TransitionInterface $transition, array $context) {
  //TODO invoke rules hook
  if (\Drupal::currentUser()->id() == 1) debug($context, 'Ran hook_mcapi_transition');
  //example code
  if (@$context['config']['send']) {
    $recipients = array();
    //mail is sent to the user owners of wallets, and to cc'd people
    foreach (array('payer', 'payee') as $participant) {
      $recipients[] = User::load($transaction->{$participant}->entity->user_id())->mail->value;
    }
    //with multiple recipients we have to choose one language
    //just English for now bcoz rules will sort this out
    if ($recipients) {
      \Drupal::service('plugin.manager.mail')->mail(
        'mcapi',
        'transition',
        implode(',', $recipients),
        'en',//TODO get the langcode for the first recipient
        array(
          'mcapi' => $transaction,
          'cc' => $context['config']['cc'],
          'subject' => $context['config']['subject'],
          'body' => $context['config']['body']
        )
      );
    }
  }
}


/**
 * element_validate callback for select_wallet
 * ensure the passed value is a wallet id, not of an intertrading wallet
 */
function local_wallet_validate_id(&$element, FormStateInterface $form_state) {
  $message = '';
  if (is_numeric($element['#value'])) {
    $wallet = Wallet::load($element['#value']);
    if (!$wallet) {
      $message = t('Invalid wallet id: @value', array('@value' => $element['#value']));
    }
  }
  if ($message) {
    $form_state->setError($element, $message);
  }
}

/**
 * implements hook_element_info_alter().
 * adds the 'balances' icon via css
 */
function mcapi_element_info_alter(&$items) {
  $items['toolbar']['#attached']['css'][] = drupal_get_path('module', 'mcapi') . '/css/mcapi.icons.css';
}

/**
 * field api default value callback
 * when creating a new user, populate the exchanges field
 * with the currentuser's values.
 * N.B. in FieldItemList::setValue
 * @param ContentEntityInterface $entity,
 * @param array $field_definition,
 *
 * @return array
 *   The uuids of the exchanges of which the passed Entity is a member
 *
 * //TODO an array of uuids whose keys I haven't understood yet
 */
function mcapi_default_exchange_id(ContentEntityInterface $entity, $field_definition) {
  if ($entity->getEntityTypeId == 'user' && $entity->id() == 0)drupal_set_message('putting user 0 in default exchange. Prevent this!');
  $output = array();
  foreach (Exchange::referenced_exchanges(NULL, TRUE) as $exchange) {
    $output[]['target_uuid'] = $exchange->get('uuid')->value;
  }
  return $output;
}

/**
 * field api default value callback
 * TEMP...
 * when creating a new exchange, populate the currencies field
 * with the currentuser's values.
 * N.B. in FieldItemList::setValue
 *
 * @param ExchangeInterface $entity,
 * @param array $field_definition,
 * @param string $langcode
 *
 * @return array
 *   uuids whose keys I haven't understood yet
 */
function mcapi_default_currency_id(ExchangeInterface $exchange, $field_definition) {
  $output = array();
  //default currencies are the currencies of the exchanges of which the current user is a member
  foreach (exchange_currencies(Exchange::referenced_exchanges(NULL, TRUE)) as $currency) {
    $output[]['target_uuid'] = $currency->uuid;
  }
  return $output;
}

/**
 * Determine whether the system architecture allows an entity to hold wallets.
 * which is to say, whether it is a contentEntity with an entityReference field for mcapi_exchanges
 * @param unknown $entity_type
 *   an entity OR entityType object
 *
 * @param string $bundle
 *   bundlename, if the first arg is an entityType
 *
 * @return NULL  | string
 *   TRUE means the entity is an exchange, string is the fieldname
 */
function mcapi_wallet_owning_entitytype($entity_type, $bundle = '') {
  $type_id = $entity_type->id();
  if ($type_id == 'user') return 'exchanges';//made explicit to improve performance
  elseif ($type_id == 'mcapi_exchange') return TRUE;
  $fieldnames = Exchange::getEntityFieldnames();
  return @$fieldnames[$type_id];
}

/**
 * implements hook_entity_insert()
 * give a new wallet to new entities, if the settings require
 * 
 * @todo check the exchange reference field for changes, then run hook_hello or hook_goodbye - delayed because og must provide hooks
 */
function mcapi_entity_insert($entity) {
  //note that intertrading wallets are created not here but in Exchange::postSave
  if (\Drupal::config('mcapi.wallets')->get('autoadd')) {
    if (mcapi_wallet_owning_entitytype($entity->getEntityType(), $entity->bundle())) {
      $type = $entity->getEntityTypeId();
      //NB autoadd applies to ALL entity types or to none
      $maxes = \Drupal::config('mcapi.wallets')->get('entity_types');
      if ($max = @$maxes[$type .':'. $entity->bundle()]) {
        //no need to check what the max is, since this is the first wallet created for this entity
        $wallet = Wallet::create(array(
          'entity_type' => $type,
          'pid' => $entity->id(),
          //default access controls are set automatically
        ));
        $wallet->save();
      }
    }
  }
}

/**
 * implements hook_entity_update().
 * if an entity is a wallet owner, then refresh the wallet indices
 * especially in case the owner has moved to a different exchange
 */
function mcapi_entity_update($entity) {
  if (mcapi_wallet_owning_entitytype($entity->getEntityType(), $entity->bundle())) {
    $storage = \Drupal::EntityManager()->getStorage('mcapi_wallet');
    if ($wids = $storage->getOwnedIds($entity)) {
      $storage->reIndex(Wallet::loadMultiple($wids));
    }
  }
}

/**
 * implements hook_user_insert().
 * if there is only one exchange, put each user in it.
 */
function mcapi_user_presave(&$edit, $account, $category) {
  if (!$account->id() && !\Drupal::moduleHandler()->moduleExists('mcapi_exchanges')) {
    //there is only one exchange, but best not presume it has an id of 1
    $exchanges = Exchange::loadMultiple();
    $account->set('exchanges', reset($exchanges)->id());
  }
}

/**
 * implements hook_entity_delete()
 * ensure any wallets belonging to the entity are moved to their parent's exchange
 * @todo this should be pre-deletion
 */
function mcapi_entity_delete($entity) {
  //see Exchange::preDelete();
  if (mcapi_wallet_owning_entitytype($entity->getEntityType(), $entity->bundle())) {
    Wallet::orphan($entity);
  }
}

/**
 * implements hook_ENTITY_TYPE_delete().
 * updates the wallet exchanges index table when a wallet is deleted
 * @todo refactor this so the table name is in the wallet storage controller
 */
function mcapi_mcapi_wallet_delete($entity) {
  db_delete('mcapi_wallet_exchanges_index')->condition('wid', $entity->id())->execute();
}


/**
 * get all the currencies from (common to) the given exchanges, sorted
 * @param array $exchanges
 *
 * @param boolean $ticks
 *   filter out currencies with no exchange rate
 *
 * @param boolean $status
 *   filter out disabled currencies
 *
 * @return array
 *   the filtered currencies
 */
function exchange_currencies(array $exchanges, $ticks = FALSE) {
  $currencies = array();
  foreach ($exchanges as $exchange) {
    foreach ($exchange->get('currencies')->referencedEntities() as $currency) {
      if (!$ticks || $currency->ticks) {
        $currencies[$currency->id()] = $currency;
      }
    }
  }
  uasort($currencies, array('\Drupal\Component\Utility\SortArray', 'sortByWeightProperty'));
  return $currencies;
}

/**
 * implements hook_block_view_BLOCK_BASE_ID_alter
 * Add a links to the menu block, one for each exchange the current user is in.
 * The alternative, to create many links and give them all access control would be
 * rather expensive, I think
 *
 * @todo second opinion?
 */
function _mcapi_block_view_system_menu_block_alter(&$build, $block) {
  if($block->getPluginId() == 'system_menu_block:tools') {
    if (!array_key_exists('content', $build)) {
      $build['content'] = array();
    }
    foreach (Exchange::referenced_exchanges() as $exchange) {
      //does a menu link really require all of these properties
      $renderable = array(
      	'#theme' => 'menu_link',
        '#title' => $exchange->label(),
        '#href' => $exchange->url(),
        '#weight' => -100,
        '#localized_options' => array(),
        '#below' => array(),
        '#attributes' => new Attribute(),
        '#original_link' => array('menu_name' => 'tools'),//required by menu_block_view_system_menu_block_alter
      );
      array_unshift($build['content'], $renderable);
    }
    //TODO exchange admins links to their currency(s) OR a link to admin/accounting/currencies
  }
}

/**
 * implements hook_local_tasks_alter().
 * prevent the three fixed transaction display modes from being edited
 * this function will fail if mcapi is not heavier than field_ui module
 */
function mcapi_local_tasks_alter(&$tasks) {
  $names = array('certificate_mcapi_transaction', 'twig_mcapi_transaction', 'sentence_mcapi_transaction');
  foreach ($names as $name) {
    unset($tasks['field_ui.fields:field_display_'.$name]);
  }
}

/**
 * implements hook_entity_operation_alter();
 * prevent the transaction view modes from being tampered with
 */
function mcapi_entity_operation_alter(&$operations, $entity) {
  $ids = array(
    'mcapi_transaction.certificate',
    'mcapi_transaction.twig',
    'mcapi_transaction.sentence'
  );
  if (in_array($entity->id(), $ids)) $operations = array();
}

/**
 * Delete all transaction entities
 * For development only!
 * @todo move this to be a drush command
 */
function mcapi_wipeslate() {
  $conf = \Drupal::config('mcapi.misc');
  $storage = \Drupal::entityManager()->getStorage('mcapi_transaction');
  $entities = $storage->loadMultiple();
  $storage->delete($entities);
  echo 'all transactions deleted';
}

/**
 * Implements hook_hook_info().
 * @todo is it worth creating hook group and filename extension?
 */
function mcapi_hook_info() {
  $hooks = array(
    //TODO document these properly in mcapi.api.php
    'mcapi_transaction_children',//add children without affecting parent
    'mcapi_transaction_validate',//throw violations without affecting transaction
    'mcapi_transaction_alter',//alter the main transaction
    'mcapi_transition',
    //and all the entity hooks e.g
    'mcapi_wallet_update',
    'mcapi_wallet_delete'
    //...there are many
  );
  return array('group' => 'mcapi') + array_combine($hooks, $hooks);
}
