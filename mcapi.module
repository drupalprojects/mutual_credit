<?php

/**
 * @file
 * mcapi.module
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\User;
use Drupal\mcapi\Entity\Currency;
use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Exchange;


//states are mutually exclusive //is it appropriate to use constants for plugin names?
const TRANSACTION_STATE_FINISHED = 'done';
const TRANSACTION_STATE_ERASED = 'erased';

//these are hardly used - probably only for visualisation
const CURRENCY_TYPE_ACKNOWLEDGEMENT = 'acknowledgement';
const CURRENCY_TYPE_EXCHANGE = 'exchange';
const CURRENCY_TYPE_COMMODITY = 'commodity';

//
const WALLET_ACCESS_ANY = '1';//this is the role id
const WALLET_ACCESS_AUTH = '2';//this is the role id
const WALLET_ACCESS_USERS = 'u';//user id is in the wallet access table
const WALLET_ACCESS_OWNER =  'o';//this is replaced with a named user MAYBE NOT NEEDED

const MCAPI_CONFIRM_NORMAL = 0;
const MCAPI_CONFIRM_AJAX = 1;
const MCAPI_CONFIRM_MODAL = 2;

/**
 * implements hook_requirements().
 */
function mcapi_requirements($phase) {
  if ($phase == 'runtime') {
    $result = [
      'title' => t('Transaction index table'),
    ];
    //check that the index table is integral
    if (\Drupal::entityManager()->getStorage('mcapi_transaction')->indexCheck()) {
      $result['severity'] = REQUIREMENT_OK;
      $result['description'] = t('Index table adds up');
    }
    else {
      $result['severity'] = REQUIREMENT_ERROR;
      $result['description'] = t(
        'Index table does not add up. Try rebuilding it at !link',
        ['!link' => \Drupal::l('admin/accounting/misc', Url::fromRoute('mcapi.admin_misc'))]
      );
    }
    return array($result);
  }
}

/**
 * implements hook_help().
 */
function mcapi_help($route_name, $route_match) {
  switch ($route_name) {
    case 'entity.mcapi_currency.collection':
      return implode(' ', [
        t('Multiple currencies allow many, potentially overlapping communities to work in this Drupal instance, and for currencies to embody different values.'),
        t('Retired currencies can no longer be used, but transactions are still visible.'),
        t('Only unused currencies can be deleted.'),
      ]);
    case 'mcapi.admin.transactions':
      return implode(' ', [
        t('Workflow transitions move transactions of various types between states.'),
        t('Modules can add more states and types'),
        t('Each transition presents the user with confirmation form, which is configured on this page.')
      ]);
    case 'entity.mcapi_transaction.field_ui_fields':
      $settings_url = Url::fromRoute('mcapi.admin_misc');
      $transitions_url = Url::fromRoute('mcapi.admin.transactions');
      $message = [
        t('These transaction display settings should always be overridden.'),
        t('To configure the certificate, override certificate.html.twig in your theme'),
        t(
          'To configure the sentence, see the Accounting settings: !link.',
          ['!link' => \Drupal::l($settings_url->toString(), $settings_url)]
        ),
        t(
          'Custom Twig can be used for display on the transition settings pages: !link.',
          ['!link' => \Drupal::l($transitions_url->toString(), $transitions_url)]
        ),
      ];
      return implode(' ', $message);
  }
}

/**
 * implements hook_entity_view().
 * add a wallet summary view to wallet-enabled entities
 *
 * @todo check the cache contexts because this contains a link to wallet creation.
 */
function mcapi_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {

  if ($display->getComponent('wallets_summaries')) {
    //check the entity is of a type which can own a wallet.
    $key = 'entity_types.' . $entity->getEntityTypeId() .':'. $entity->bundle();
    if (\Drupal::config('mcapi.wallets')->get($key)) {
      //get the wallets belonging to this entity
      $wids = \Drupal::EntityManager()
        ->getStorage('mcapi_wallet')
        ->filter(['holder' => $entity]);
      foreach (Wallet::loadMultiple($wids) as $wid => $wallet) {
        if ($wallet->access('summary')) {
          $wallets[] = $wallet;
        }
      }
    }
    if ($wallets) {
      $build += [
        'wallets_summaries' => [
          '#theme' => 'mcapi_wallets',
          '#wallets' => $wallets,
          '#holder' => $entity,
          '#view_mode' => 'summary',//@todo make wallet viewmode a variable
          '#cache' => [
            'contexts' => []
          ]
        ]
      ];
    }
  }
}

/**
 * Machine name callback
 * Load a currency, from its id
 *
 * @param string $id
 *
 * @returns CurrencyInterface
 *
 */
function mcapi_currency_load($id) {
  return Currency::load($id);
}

/**
 * Utility function to populate a form widget's options with entity names
 *
 * @param string $entity_type_id
 *
 * @param array $data
 *   either entities of the given type, entity ids, or $conditions for entity_load_multiple_by_properties
 *
 * @return string[]
 *   The entity names, keyed by entity id
 *
 */
function mcapi_entity_label_list($entity_type_id, array $data = []) {
  if (empty($data)) {
    $entities = \Drupal::entityManager()->getStorage($entity_type_id)->loadMultiple();
  }
  elseif(is_string(key($data))) {
    $entities = entity_load_multiple_by_properties($entity_type_id, $data);
  }
  elseif(is_numeric(reset($data))) {
    $entities = \Drupal::entityManager()->getStorage($entity_type_id)->loadMultiple($data);
  }
  else $entities = $data;
  if (property_exists(current($entities), 'weight') && count($entities) > 1) {
    uasort($list, 'mcapi_uasort_weight');
  }
  $list = [];
  foreach ($entities as $entity) {
    $list[$entity->id()] = $entity->label();
  }
  return $list;
}

/**
 * uasort callback for configuration entities.
 * could be included in Drupal Core?
 */
function mcapi_uasort_weight($a, $b) {
  $a_weight = (is_object($a) && property_exists($a, 'weight')) ? $a->weight : 0;
  $b_weight = (is_object($b) && property_exists($b, 'weight')) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * implements hook_element_info_alter().
 * adds the 'balances' icon via css
 */
function mcapi_element_info_alter(&$items) {
  $items['toolbar']['#attached']['library'][] = 'mcapi/mcapi.toolbar';
}


/**
 * implements hook_entity_insert()
 * give a new wallet to new entities, if the settings require
 */
function mcapi_entity_insert($entity) {
  $config = \Drupal::config('mcapi.wallets');
  //note that intertrading wallets are created not here but in Exchange::postSave
  if ($config->get('autoadd')) {
    $type = $entity->getEntityTypeId();
    //NB autoadd applies to ALL entity types or to none
    $maxes = $config->get('entity_types');
    if ($max = @$maxes[$type .':'. $entity->bundle()]) {
      //no need to check what the max is, since this is the first wallet created for this entity
      $wallet = Wallet::create(array(
        'entity_type' => $type,
        'pid' => $entity->id(),
        //will inherit default access controls
      ));
      $wallet->save();
      \Drupal::logger('mcapi')->notice(
        'Wallet @wid autocreated for @entitytype @id',
        ['@wid' => $wallet->id(), '@entitytype' => $type, '@id' => $entity->id()]
      );
    }
  }
}

/**
 * implements hook_entity_update().
 * if the changed entity is a wallet holder, then refresh the wallet indices
 * especially in case the holder has moved to a different exchange
 */
function mcapi_entity_update($entity) {
  if (walletable($entity)) {
    $storage = \Drupal::EntityManager()->getStorage('mcapi_wallet');
    if ($wids = $storage->filter(['holder' => $entity])) {
      $storage->reIndex(Wallet::loadMultiple($wids));
    }
  }
}

/**
 * implements hook_entity_predelete().
 *
 * orphan any wallets owned by the deleted entity.
 */
function mcapi_entity_predelete($entity) {
  if (walletable($entity)) {
    Wallet::orphan($entity);
  }
}

/**
 * implements hook_module_implements_alter().
 *
 * Ensures that mcapi_local_tasks_alter runs after field_ui_local_tasks_alter
 */
function mcapi_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'local_tasks_alter') {
    $group = $implementations ['mcapi'];
    unset($implementations ['mcapi']);
    $implementations ['mcapi'] = $group;
  }
}

/**
 * implements hook_local_tasks_alter().
 *
 * prevent the three fixed transaction display modes from being edited
 */
function mcapi_local_tasks_alter(&$tasks) {
  foreach (['default', 'certificate', 'twig', 'sentence'] as $mode) {
    unset($tasks["field_ui.fields:field_display_{$mode}_mcapi_transaction"]);
  }
  //remove the parent tab as well.
  unset($tasks['field_ui.fields:display_overview_mcapi_transaction']);
}


/**
 * implements hook_entity_operation_alter().
 * prevent the transaction view modes from being tampered with
 */
function mcapi_entity_operation_alter(&$operations, $entity) {
  if (in_array('mcapi_transaction.'.$entity->id(), ['certificate', 'twig', 'sentence'])) {
    $operations = [];
  }
}

/*
 * implements hook_form_alter().
 * automate and hide the 'required' checkbox for the worth field on Transactions
 */
function mcapi_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#entity']->getEntityTypeId() == 'mcapi_transaction') {
    $element = &$form['field']['required'];
    $element['#value'] = TRUE;
    $element['#type'] = 'value';
    $currs = $form['field']['default_value']['widget']['#allowed_curr_ids'];
    foreach (Currency::loadMultiple($currs) as $currency) {
      if ($currency->zero) {
        $element['#value'] = FALSE;
        return;
      }
    }
  }
}

/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_entity_extra_field_info() {
  //go through all the bundles which are configured to hold wallets
  $types = \Drupal::config('mcapi.wallets')->get('entity_types');
  foreach((array)$types as $entity_bundle => $max) {
    //if (!$max) continue; //don't show wallets on bundles with maximum of 0 wallets
    list($entity_type, $bundle) = explode(':', $entity_bundle);
    $extra[$entity_type] = [
      $bundle => [
        'display' => [
          'wallets_summaries' => [
            'label' => t('Wallets summaries'),
            'description' => t("Statistics from the user's wallets"),
            'weight' => 5,
          ],
        ]
      ]
    ];
  }
  $w = 0;
  foreach (\Drupal::entityManager()->getViewBuilder('mcapi_wallet')->extraFields() as $id => $props) {
    $w++;
    $extra['mcapi_wallet']['mcapi_wallet']['display'][$id] = $props + ['weight' => $w];
  }

  $props = \Drupal::entityManager()->getFieldDefinitions('mcapi_transaction', 'mcapi_transaction');
  $fields = ['payer', 'payee', 'description', 'state', 'type'];
  foreach ($fields as $weight => $fieldname) {
    $extra['mcapi_transaction']['mcapi_transaction']['display'][$fieldname] = [
      'label' => $props[$fieldname]['label'],
      'description' => $props[$fieldname]['description'],
      'weight' => $weight,
    ];
  }
  return $extra;
}

/**
 * implements hook_theme().
 */
function mcapi_theme() {
  $file = ['file' => 'src/ViewBuilder/theme.inc'];
  $items['mcapi_transaction'] = [
    'render element' => 'transaction',
    'template' => 'transaction'
  ] + $file;
  //the above is the theme wrapper for the below
  //so they both take the same render_element
  $items['certificate'] = [
    'render element' => 'transaction',
    'template' => 'certificate',
    'pattern' => 'certificate__'
  ] + $file;
  $items['sentence'] = [
    'render element' => 'transaction'
  ] + $file;
  $items['mcapi_currency'] = [
    'render element' => 'currency',
    'template' => 'currency'
  ] + $file;
  $items['mcapi_wallets'] = [
    'variables' => [
      'wallets' => [],
      'holder' => NULL,
      'view_mode' => ''
    ]
  ] + $file;
  //$items['wallet_wrapper'] = [
  //'render element' => 'element'
  //];
  $items['wallet_balances'] = [
    'variables' => [
      'wallet' => NULL,
      'currency' => NULL,
    ]
  ] + $file;
  $items['wallet_balances_currency'] = [
    'variables' => [
      'wallet' => NULL,
      'currency' => NULL,
    ]
  ] + $file;
  $items['wallet_balance_bars'] = [
    'variables' => [
      'wallet' => '',
      'currency' => NULL,
      'data' => []
    ]
  ] + $file;
  $items['wallet_history'] = [
    'variables' => [
      'wallet' => NULL,
      'currency' => NULL,
      'width' => 250,
    ]
  ] + $file;
  $items['wallet_stats'] = [
    'variables' => [
      'wallet' => NULL,
      'currency' => NULL
    ]
  ] + $file;
  return $items;
}


/**
 * Determine whether the system architecture allows an entity to hold wallets.
 * which is to say, whether it is a contentEntity with an audience field
 *
 * @param ContentEntity $entity
 *
 * @return NULL | string
 *   TRUE means the entitytype can hold wallets
 */
function walletable($entity) {
  $type_id = $entity->getEntityTypeId();
  //the quick answer
  if ($type_id == 'user' || $type_id == 'mcapi_exchange') {
    return TRUE; //because of intertrading wallets
  }
  $bundles = Exchange::walletableBundles();
  return in_array($type_id,  $bundles)
    && in_array($entity->bundle(), $bundles[$type_id]);
}


 /**
  * Delete all transaction entities
  * For development only!
  *
  * @todo move this to be a drush command when drush is working!
  */
function mcapi_wipeslate() {
  $storage = \Drupal::entityManager()
    ->getStorage('mcapi_transaction')
    ->delete($storage->loadMultiple());
}

/**
 * implements hook_ENTITY_TYPE_view().
 * put the stamp for erased transactions
 */
function mcapi_mcapi_transaction_view(array &$build, $transaction, $display, $view_mode, $langcode) {
  if ($view_mode == 'certificate' && $transaction->state->target_id == 'erased') {
    $build['stamp'] = $transaction->state->entity->label;//this is translated
  }
}

/**
 * return the visible field definitions for any transaction field API fields
 * according to the default transaction entity_form_display
 * including worth, or course
 *
 * @return array
 *   field definitions and widgets keyed by field name
 */
function mcapi_default_display_fields() {
  //we need this to get the widgets for entering the defaults
  $entity_display = EntityFormDisplay::load('mcapi_transaction.mcapi_transaction.default');
  $fieldAPI = [];
  //get the field API fields showing according to the the default display
  //and filter out the entity properties
  //the entity_form_display does this more elegantly but function is protected
  $definitions = \Drupal::entityManager()
    ->getFieldDefinitions('mcapi_transaction', 'mcapi_transaction');
  foreach($definitions as $field_name => $definition) {
    if ($widget = $entity_display->getRenderer($field_name)) {
      $fieldAPI[$field_name] = [
        'definition' => $definition,
        'widget' => $widget
      ];
    }
  }
  return $fieldAPI;
}

/**
 * convert a formatted currency value into a plain decimal number
 * suitable for use with google charts
 * @param string $formatted_value
 * return string
 *   hopefully a decimal value
 */
function mcapi_decimalised($formatted_value) {
  //convert 1hr 23mins to 1.23
  //replace likely separators with dots
  $str = preg_replace('/([.: ]+)/', '.', $formatted_value);
  //remove everything except numbers and dots
  return preg_replace('/([^0-9.]+)/', '', $str);
}