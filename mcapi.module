<?php  // $Id: mcapi.module,v 1.1.2.6 2010/12/22 19:30:29 matslats Exp $: transactions.module,v 1.1.2.4 2009/10/14 10:03:54 matslats Exp $

module_load_include('field.inc', 'mcapi');

/**
 * @file
 * transactions  are fieldable entities, balances & other stats are in a cache table exposed to views.
 *
 * This .module file contains only the hooks and functions which might be called when the module isn't actively required
 *
 */

//states are mutually exclusive
define ('TRANSACTION_STATE_FINISHED', 0);
define ('TRANSACTION_STATE_ERASED', -1);
define ('TRANSACTION_STATE_VALIDATING', -2);


/**
 * implements hook_help()
 */
function mcapi_help($section) {
  switch ($section) {
    case 'admin/help#transaction':
      return t('Defines a contentType called transactions, manages them and does the accounting.');
    case 'admin/accounting':
      return '<p>'. t("This module, its development and implementations at !cforge,", array('!cforge' => l('Community Forge', 'http://communityforge.net')))  .' '.
        t("have been the full time commitment of one person since Spring 2008, and a second person since spring 2009.") . ' '.
        t("The results of this work are offered freely to all.") .'</p><p>'.
        t("We give all possible resources to this work, and live by reciprocal gifting as much as possible.") .' '.
        t("We look forward to the day when support is robust enough to pay staff and provide a reliable nonprofit public service.") .' '.
        t("Please consider supporting this work by:") . ' '.
        theme('item_list', array('items' => array(
          t("sending some scarce hard currency to the developer"),
          t("allying with us to build a global complementary currency ecosystem"),
          t("offering board and lodging for a month or two")
        )));
      case 'admin/accounting/record':
        return t('This is a base form provided for administration purposes only. For end-users, there are forms provided by other modules');
  }
}


/**
 * implements hook_menu()
 */
function mcapi_menu() {
  module_load_include('inc', 'mcapi');
  return mcapi_menu_inc();
}
function mcapi_menu_alter(&$items) {
  foreach (array_keys($items) as $key) {
    //we don't need to see the page for arranging the bundle fields,
    if (substr($key, 0, 41) == 'admin/accounting/transaction/edit/display' || substr($key, 0, 38) == 'admin/accounting/currency/edit/display') {
      unset($items[$key]);
    }
  }
  unset($items['admin/accounting/transaction/edit/display']);
  unset($items['admin/accounting/currency/edit/display']);
  unset($items['admin/accounting/transaction/fields/worth/delete']);
  //but we do want to manage the fields for two entity types on one page.
  $items['admin/accounting/currency/edit/fields']['title'] = 'Currency fields';
  $items['admin/accounting/transaction/edit/fields']['title'] = 'Transaction fields';
}

/*
 * implements hook_forms
 */
function mcapi_forms($form_id, $args) {
  if (empty($args[0]->xid)) {
    $args[0] = new transaction;
  }
 
  $forms['transaction_admin_form'] = array(
    'callback' => 'transaction_form',
    'callback arguments' => $args
  );
  return $forms;
}

/*
 * hook for modules to declare new transactions types and states
 */
function mcapi_hook_info() {
  module_load_include('inc', 'mcapi');
  return array(
    'mcapi_info' => array(),
    'mcapi_access' => array(),
    'mcapi_permissions' => array(),
  );
}

function mcapi_mcapi_info($prop) {
  $info = array(
    'states' => array(
      'unset' => t('Unset'),//this should never reach the database
      TRANSACTION_STATE_FINISHED => t('Finished'),
      TRANSACTION_STATE_ERASED => t('Erased'), //internal use only
      TRANSACTION_STATE_VALIDATING => t('Validating') //internal use only
    ),
    'types' => array(
      'unspecified'
    ),
    //this is experimental
    'controllers' => array(
      'default'
    )
  );
  return $info[$prop];
}


/*
 * implements hook mcapi_permissions
 * Declare the access callbacks for (transactions in) currencies
 * each one must take a $transaction
 */
function mcapi_mcapi_permissions() {
  return array(
    'mcapi_access_participants_admin' => t('Only the two participants and admin'),
    'mcapi_access_unrestricted' => t('Anyone, including anonymous users'),
    'mcapi_access_authenticated' => t('Only authenticated users'),
    'mcapi_access_participants' => t('Only the two participants'),
    'mcapi_access_admin' => t("Only admin"),
    //'mcapi_access_currency' => t('Only users with permission to use this currency'),
    'mcapi_access_none' => t('Nobody')
  );
}

/**
 * implements hook_permission
 * This hook can supply permissions that the module defines,
 */
function mcapi_permission() {
  return array(
    'transact' => array(
      'title' => t('Transact'),
      'description' => t("Register exchanges with other members, subject each currency's permissions"),
    ),
    'manage all transactions' => array(
      'title' => t('Manage all transactions'),
      'description' => t('Retrospectively manage transactions'),
    ),
  );
}

/**
 * special access function for transactions - NOT hook implementation
 * $ops can be array('view', 'update', 'erase')
 * Note some settings may even restric access to user 1
 * this function assumes all transactions are public
 */
function transaction_access($op, $transaction, $account = NULL) {
  module_load_include('admin.inc', 'mcapi', 'currencies');
  module_load_include('inc', 'mcapi');
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  //check we can use each of the currencies in the transaction
  foreach ($transaction->worth['und'] as $flow) {
    $currency = currency_load($flow['currcode']);
    //access denied for transaction if ANY of the currencies denies it.
    if (empty($currency->$op)) {
      return FALSE;
    }
    $states = $currency->$op;
    if (!isset($states[$transaction->state])) drupal_set_message('Have you set transaction state permissions on this currency?');
    $function = $states[$transaction->state];
    if (function_exists($function)) {
      if ($function($transaction, $account, $currency)) return TRUE;
    }
  }
  return FALSE;
}


/**
 * implements hook_theme
 */
function mcapi_theme($existing, $type, $theme, $path) {
  $items = array(
    'transaction' => array(
      'template' => 'transaction',
      'pattern' => 'transaction__',
      'variables' => array(
        'transaction' => NULL,
        'view_mode' => 'certificate',
      )
    ),
    'worth_field' => array(
      'variables' => array(
        'currcode' => '',
        'quantity' => 0
      )
    ),
    'worth_fields' => array(
      'render element' => 'element'
    ),
    'worth_widget_currcode' => array(
      'render element' => 'element'
    ),
    'worth_widgets' => array(
      'render element' => 'element'
    )
  );
  return $items;
}


/**
 * Implements hook_entity_info()
 */
function mcapi_entity_info(){
  module_load_include('inc', 'mcapi');
  return mcapi_entity_info_inc();
}

function transaction_uri($transaction) {
  return array(
    'path' => 'transaction/' . $transaction->xid,
  );
}
function transaction_label($transaction){
  return t('Transaction #@xid', array('@xid' => $transaction->xid));
}
function currency_label($currency) {
  return $currency->name;
}


/**
 * build a render array for ONE transaction
 */
function transaction_view($transaction, $view_mode = 'certificate') {
  //this is almost certainly a full page view, so I dare to set the title here
  $page_title = t('Transaction Certificate #@xid', array('@xid' => $transaction->xid));
  drupal_set_title($page_title);
  $entities =  array($transaction->xid => $transaction);
  // This is only needed if there are fields on the transaction entity
  field_attach_prepare_view('transaction', $entities, 'default');
  entity_prepare_view('transaction', $entities);

  debug($entities);
  $build = array(
    '#theme' => 'transaction',
    '#transaction' => array_pop($entities),
    '#view_mode' => $view_mode,
  );
  return $build;
}

/*
 * make the transaction variables into something which can be nicely themed
 */
function template_preprocess_transaction(&$variables) {
  $transaction = $variables['transaction'];
  $variables += array(
    'payer' => format_username(user_load($transaction->payer)),
    'payee' => format_username(user_load($transaction->payee)),
    'state' => $transaction->state,
    'recorded' => format_date($transaction->created, 'medium'),
    'type' => $transaction->type
  );
  //choose the transaction theme template based on the first currency of the transaction
  if (variable_get('mcapi_mixed_transactions', 0)) {
    $variables['theme_hook_suggestion'] = 'transaction__' . $transaction->worth['und'][0]['currcode'];
  }
  //theme the worth field(s) and make them a variable
  $transaction->worth['und']['#theme'] = 'worth_fields';
  $variables['worths'] = drupal_render($transaction->worth['und']);

  //make the description available in the right language
  $variables['description'] = $transaction->body;
  field_attach_preprocess('transaction', $transaction, $transaction->body, $variables);
}

// this shouldn't be necessary, but how else to get a dynamic list of tokens?
function mcapi_get_tokens() {
  module_load_include('tokens.inc', 'mcapi');
  $info = mcapi_token_info();
  $markers = array_keys($info['tokens']['transaction']);
  $tokens = array();
  foreach ($markers as $token) {
    $tokens[] = "[transaction:$token]";
  }
  return implode(', ', $tokens);
}

/*
 * Callback to help build transaction entity from $form_state
 */
function transaction_entity_builder($entity_type, $entity, $form, &$form_state) {
  $entity->state = isset($form_state['values']['state']) ?  $form_state['values']['state'] : TRANSACTION_STATE_FINISHED; //shouldn't really be omitted
  $entity->creator = isset($form_state['values']['creator']) ?  $form_state['values']['creator'] : $GLOBALS['user']->uid;
  $entity->created = REQUEST_TIME;
}


/*
 * form submit callback from the base transaction form, hence used by all forms
 * hence must be in .module file
 * this is what actually saves the data
 * $form_state['#transaction'] was created in the validation stage
 */
function transaction_all_submit($form, &$form_state) {
  $transaction = transaction_save($form_state['#transaction'], TRUE);
  if ($transaction) {
    field_attach_submit('transaction', $transaction, $form, $form_state);
  }
  if (!isset($form_state['redirect'])) {
    $form_state['redirect'] = 'transaction/'.$transaction->xid;
  }
}

class transaction {
  //these fields correspond to the datbase fields, but what to do with the fields which live serialized in $data?
  //and why use this to create objects when the entitycontroller fetches existing objects from the database result?
  //should this be in the entity controller?
  //could do with some advice
  public $xid;
  public $payer;
  public $payee;
  public $worth;
  public $type;
  public $state;
  public $extra = array();
  public $creator;
  public $created;
  public $modifier;
  public $modified;

  //this runs every time a 'new transaction' is created
  public function __construct(){
    $this->creator = $GLOBALS['user']->uid;
    $this->state = 'unset';//this isn't one of the declared states and should cause an error if saved
    $this->type = 'unspecified';
    $this->extra = array();
    $this->worth = array(
      'und' => array(
        0 => array(
          'currcode' => '',
          'quantity' => 0
        )
      )
    );
  }
}


/*
 * INTERNAL API FOR MODULE DEVELOPERS
 * entity controllers must work comply
 *
 * This is where we interface with the entity controller
 * object transaction_load(array(94))
 * array transactions_load($conditions) e.g array('state' => 0)
 * object transaction_validate($transaction)
 * object transaction_save($transaction)
 * NULL transaction_erase($transaction)
 */


/**
 * load a single transaction, from the $xid
 * this is used to as a menu loader, so can't be in an inc file
 */
function transaction_load($xid) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  $transactions = entity_get_controller('transaction')->load(array($xid));
  return array_pop($transactions);
}
function transaction_load_multiple($xids = array(), $conditions, $reset = FALSE) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  return entity_load('transaction', $xids, $conditions, $reset);
}
function transaction_validate($transaction) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  return entity_get_controller('transaction')->validate($transaction);
}
function transaction_save($transaction) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  return entity_get_controller('transaction')->save($transaction);
}
function transaction_erase($transaction) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  return entity_get_controller('transaction')->erase($transaction);
}


//module_invoke_all uses array_merge and loses the keys.
//so this function retrives the states using module_implements instead
// takes either 'names' or 'access'
function mcapi_transaction_states(){
  $states = array();
  foreach (module_implements('mcapi_info') as $module) {
    $function = $module .'_mcapi_info';
    $states += $function('states');
  }
  return $states;
}


/*
 * Implements views hook_views_api
 */
function mcapi_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi') .'/views',
  );
}

/*
 * Implements hook_action_info
 */
function mcapi_action_info() {
  return array(
    'record_exchange_action' => array(
      'type' => 'node',
      'label' => t('Record Exchange'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    )
  );
}
/*
 * Callback for action config
 */
function record_exchange_action_form($context) {
  $transaction = new transaction;
  if (isset($context['worth'])) {
    $transaction->payer = $context['payer'];
    $transaction->payee = $context['payee'];
    $transaction->worth = array(
      'und' => array(
        0 => array(
          'currcode' => $context['currcode'],
          'quantity' => $context['quantity']
        )
      )
    );
  }
  //make a new transaction, and fill in from the defaults
  //this form should really have a validation function to ensure that at least one participant is provided
  module_load_include('inc', 'mcapi');
  $form['template'] = array(
    '#type' => 'fieldset',
    '#title' => t('transaction template'),
    '#description' => t('Leave one of the users blank to be replaced by the logged in user.').' '. t('Please ignore the additional fields...'),
    'transaction' => transaction_form(array(), array('values' => $context), $transaction)
  );

  //I just can't figure out how to handle attached fields here
  //it seems to rely on the form_state, which might mean invoking transaction_form in a different way
  unset($form['template']['transaction']['buttons']);
  //these need to be set
  unset($form['template']['transaction']['state']);
  unset($form['template']['transaction']['creator']);
  unset($form['template']['transaction']['type']);
  //tweak the form
  $form['template']['transaction']['worth']['#required'] = TRUE;
  $form['template']['transaction']['#description'] = TRUE;
  return $form;
}
/*
 * submit callback for action config
 */
function record_exchange_action_submit($form, $form_state) {
  return $form_state['values'];
}
/*
 * callback to execute the action
 */
function record_exchange_action($node, $context) {
  $transaction = new transaction;
  $transaction->currcode = $context['currcode'];
  $transaction->worth = $context['worth'];
  $transaction->payer = $context['payer'];
  $transaction->payee = $context['payee'];
  $transaction->state = TRANSACTION_STATE_FINISHED; //NEED TO GET RID OF UNSET STATE

    if (empty($transaction->payer)) {
      $transaction->payer = $node->uid;
    }
    elseif (empty($transaction->payee)) {
      $transaction->payee = $node->uid;
    }
debug($transaction);
  transaction_save((object)$transaction);
}
/*
 * implements hook_trigger_info
 */
function mcapi_trigger_info() {
  return array(
    'mcapi' => array(
      'transaction_record' => array(
        'label' => t('Record a new transaction in the database.'),
      ),
      'transaction_modify' => array(
        'label' => t('Editing a transaction which already exists.'),
      ),
      'transaction_erase' => array(
        'label' => t('Erase or delete a transaction.'),
      ),
    ),
  );
}

/*
 * validate callback for user id fields
 * borrowed from node_validate, where it really should have been a reusable function like this.
 * this is in the main module file where it can be found by both currency form and transaction form.
 */
function mcapi_validate_username(&$element, &$form_state) {
  $values = is_array($element['#value']) ? $element['#value'] : array($element['#value']);
  if (!array_filter($values)) return;
  foreach ($values as $value) {
    $account = user_load_by_name($value);
    if ($account->uid) {
      form_set_value($element, $account->uid, $form_state);
      continue;
    }
    form_error($element, t('The username %name does not exist.', array('%name' => $value)));
  }
}

/*
 * return one currency object
 */
function currency_load($currcode = 0) {
  $currencies = currencies_load();
  if (!empty($currencies[$currcode])) {
    return $currencies[$currcode];
  }
  return (object)array('name' => t('Please choose...'));
}
/*
 * Load all the currencies from cache filter
 * then optionally return them filtered for which ones an account can use.
 */
function currencies_load($account = NULL) {
  $currencies = &drupal_static('currencies');
  if (!$currencies) {//first time this page request.
    $cache = cache_get('currencies');
    if ($cache) $currencies = $cache->data;
    else {
      module_load_include('admin.inc', 'mcapi', 'currencies');
      $currencies = currencies_recache();
    }
  }
  if (empty($account)) return $currencies;
  module_load_include('admin.inc', 'mcapi', 'currencies');
  $filtered = array();
  foreach ($currencies as $currcode => $currency) {
    if (currency_access('use', $currency, $account)) {
      $filtered[$currcode] = $currency;
    }
  }
  return $filtered;
}

