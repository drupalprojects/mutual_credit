<?php
// $Id: mcapi.module,v 1.1.2.6 2010/12/22 19:30:29 matslats Exp $: transactions.module,v 1.1.2.4 2009/10/14 10:03:54 matslats Exp $

/**
 * @file
 * transactions and currencies are fieldable entities, balances & other stats are in a cache table exposed to views.
 *
 * This .module file contains only the hooks and functions which might be called when the module is passive
 * If the module is doing anything requiring mutual_credit functionality as generating a block or a page, the inc is included
 *
 * NOTES ON THE EXCHANGE QUANTITY
 * Quantity is stored as a decimal in the DB for easy calculation
 * The transaction object stores the amount as a decimal fraction
 * In preprocessing  an hour currency the decimal is multiplied by 0.6 to become hours:minutes,
 * The theme_money function then attaches the icon or currency name
 *
 *
 * if the multiple currencies module is not installed, the default currency id ('cid') is 0
 *
 */


//states are mutually exclusive
define ('EXCHANGE_STATE_FINISHED', 0);
define ('EXCHANGE_STATE_PENDING', 1);
define ('EXCHANGE_STATE_ERASED', -1);
define ('MCAPI_NOTIFICATION_DEFAULT_LEVEL', 2);

/**
 * implements hook_help()
 */
function mcapi_help($section) {
  switch ($section) {
    case 'admin/help#transaction':
      return t('Defines a contentType called transactions, manages them and does the accounting.');
    case 'admin/accounting/acknowledgements':
      return '<p>'. t("This module, its development and implementations at !cforge,", array('!cforge' => l('Community Forge', 'http://communityforge.net')))  .' '.
        t("have been the full time commitment of one person since Spring 2008, and a second person since spring 2009.") . ' '.
        t("The results of this work are offered freely to all.") .'</p><p>'.
        t("We give all possible resources to this work, and live by reciprocal gifting as much as possible.") .' '.
        t("We look forward to the day when support is robust enough to pay staff and provide a reliable nonprofit public service.") .' '.
        t("Please consider supporting this work by:") . ' '.
        theme('item_list', array('items' => array(
          t("sending some scarce hard currency to the developer"),
          t("allying with us to build a global complementary currency ecosystem"),
          t("offering board and lodging for a month or two")
        )));
      case 'admin/accounting/record':
        return t('This is a base form provided for administration purposes only. For end-users, there are forms provided by other modules');
      case 'admin/accounting/notification':
        return t('When composing your mails below, use some of the following tokens: ') .
        '!username, !site, !uri, !uri_brief, !mailto, !date, !login_uri, !edit_uri, !login_url, !creator, !transaction_uri, !summary';
  }
}

/**
 * Implements hook_cron()
 */
function mcapi_cron() {
  //this is for the voluntary reporting function
  if (variable_get('cforge_report', 1)) {
    module_load_include('install', 'mcapi');
    cforge_report();
  }
}

/**
 * implements hook_menu()
 */
function mcapi_menu() {
  module_load_include('inc', 'mcapi');
  return mcapi_menu_inc();
}
function mcapi_menu_alter(&$items) {
  foreach (array_keys($items) as $key) {
    if (substr($key, 0, 44) == 'admin/accounting/transaction/payment/display' || substr($key, 0, 47) == 'admin/accounting/currency/mutual_credit/display') {
      unset($items[$key]);
    }
  }
  unset($items['admin/accounting/transaction/payment/display']);
  unset($items['admin/accounting/currency/mutual_credit/display']);
  $items['admin/accounting/currency/mutual_credit/fields']['title'] = 'Currency fields';
  $items['admin/accounting/transaction/payment/fields']['title'] = 'Payment fields';
}

/**
 * implements hook_access()
 * this function is called by node_access
 * $ops can be array('view', 'update', 'erase', 'create')
 */
function transaction_access($op, $transaction = NULL, $account = NULL) {
  if (user_access('edit all transactions')) {
    return TRUE;
  }
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $participant = $account->uid == $transaction->payee_uid || $account->uid == $transaction->payer_uid;
  switch ($op) {
    case 'view'://users can always view their own pages
      return user_access('view all transactions') || $participant;
    case 'update': //this is the permission used by node_access
      return $participant && (
        user_access('edit own finished transactions') || $transaction->state == EXCHANGE_STATE_PENDING);
    case 'erase':
      //pending transactions can be erased only by the owner
      return $transaction->uid == $account->uid && $transaction->state == EXCHANGE_STATE_PENDING;
    //NOT USED // for determining whether to display trading data for a user.
    case 'history':
      //returns true if the user has permission to trade or has ever traded
      user_access('transact', $account) || count($account->balances);
  }
}


/**
 * implements hook_permission
 * This hook can supply permissions that the module defines,
 */
function mcapi_permission() {
  return array(
    'transact' => array(
      'title' => t('transact'),
      'description' => t('Participate in transactions denominated in a complementary currency'),
    ),
    'view all transactions' => array(
      'title' => t('view all transactions'),
      'description' => t('View all the transactions in all currencies on the system'),
    ),
    'edit own finished transactions' => array(
      'title' => t('edit own finished transactions'),
      'description' => t('Retrospectively edit transactions in which the user was involed'),
    ),
    'edit all transactions' => array(
      'title' => t('edit all transactions'),
      'description' => t('Retrospectively edit all transactions'),
    ),
    'configure currencies' => array(
      'title' => t('configure currencies'),
      'description' => t('Edit the properties of any currency'),
    ),
    'declare currency' => array(
      'title' => t('declare currency'),
      'description' => t('Create a new currency'),
    ),
  );
}


/**
 * Implements hook_user_cancel().
 */
function mcapi_user_cancel($edit, $account, $method) {
  if ($method == 'user_cancel_delete')
  db_query("DELETE from {mcapi_cache} WHERE uid = :uid", array(':uid' => $account->uid));
  NULL;
}

/*
 * Implements hook_user_view
 */
function mcapi_user_view($account) {
  $balances = entity_get_controller('transaction')->get_balances($account->uid);
  $account->content['mcapi'] = array(
    '#title' => t('Monetary activity'),
    '#type' => 'user_profile_category',
    'balances' => array(
      '#theme' => 'balances',
      '#title' => t('Balances'),
      '#balances' => $balances,
    )
  );
}


/**
 * load a single transaction, from the $xid
 * this is used to as a menu loader, so can't be in an inc file
 */
function transaction_load($xid) {
  $transaction = array_pop(entity_load('transaction', array($xid)));
  return $transaction;
}


/**
 * implements hook_theme
 */
function mcapi_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'mcapi') . '/theme';
  $items = array(
    'money' => array(
      'variables' => array(
        'quantity' => 0,
        'cid' => 0,
        'richtext' => TRUE //better for mails not to include currency icons
      )
    ),
    'balances' => array(
      'template' => 'balances',
      'path' => $path,
      'variables' => array(
        'balances' => array() //array with cid for keys
      )
    ),
    //this only needs to be in this module if we are theming the currencies.
    'currency_range' => array(
      'file' => '/mcapi.inc',
      'variables' => array(
        'currency' => NULL,
      )
    ),
    'transaction' => array(
      'file' => '/entities.inc',
      'variables' => array(
          'transaction' => NULL
      ),
    )
  );
  return $items;
}

function mcapi_page_alter($page){}


function theme_money($variables) {
  extract($variables);
  $currency = currencies_load($cid);
  $integer = abs(intval($quantity));
  if ($currency->divisions) {
    $fraction = 100 * round(abs($quantity) - abs($integer), 2);
    if (is_array($currency->divisions)) {
      $subdivision = $currency->divisions[$fraction];
    }
    else $subdivision = $fraction;
  }
  $sign = $quantity < 0 ? '-' :'';
  $icon = isset($currency->icon) ? theme('image', $currency->icon) : '';

  return strtr(
    $currency->format,
    array(
      '@minus' => $sign,
      '@integer' => $integer,
      '@icon' => $icon,
      '@subdivision' => $subdivision ? $subdivision : '00'
    )
  );
}

function template_preprocess_balances(&$vars) {
  foreach ($vars['balances'] as $cid => $amounts) {
    $vars['currencies'][$cid] = currencies_load($cid);
    foreach ($amounts as $key => $quantity) {
      $vars['balances'][$cid][$key] = theme('money', compact('quantity', 'cid', 'currencies'));
    }
  }
}


function mcapi_validate_title($element, $form_state) {
  if (!check_plain($element['#value'])) {
    form_error($element, t('Plain text only in transaction descriptions.'));
  }
}

function mcapi_validate_cid(&$element, $form_state) {
  //might be worth loading up the currency into $form_state?
  if (isset($element['#value']) && $element['#value']) {
    $currency = currencies_load($element['#value']);
    if (!is_object($currency) || $currency->type != 'currency') {
      form_error($element, t('Invalid currency specified: @num', array('@num' => $element['#value'])));
    }
  }
}

//the api module will validate any number or username or email as a user with permission to trade
//this function permits blank values
function mcapi_validate_trader(&$element, &$form_state) {
  if ($val = $element['#value']) {
    _mcapi_check_trader($val, $element);
  }
}

function _mcapi_check_trader($value, &$element = NULL) {
  if (is_numeric($value)) {
    $field = 'uid';
  }
  elseif (valid_email_address($value)) {
    $field = 'mail';
  }
  elseif (is_string($value) && strlen($value)) {
    $field = 'name';
  }
  $criterion = array($field => $value);
  /*
   * Check this
   */
  $account = array_shift(user_load_multiple(array(), $criterion));
  if (isset($account->uid)) {
    if (user_access('transact', $account)   && $account->status) {
      return $account->uid;
    }
    else {
      if ($element) {
        form_error($element, t("@user is not permitted to trade", array("@user" => $account->name)));
      }
    }
  }
  else {
    if ($element) {
      form_error($element, t("@data is not a known user", array("@data" => $value)));
    }
  }
}



//Some currency properties need to be identical if they are to rendered into the transaction form
//this returns the field only if it is the same in all the passed currencies
//takes top-level fieldnames or data fieldnames
//this is a bit complicated by the design of the currency object, but it works fine
function get_common_currency_properties($currencies, $fieldname) {
  $first = array_pop($currencies);

  foreach ($currencies as $currency) {
    if (isset($first->$fieldname)) {
      if ($first->$fieldname != $currency->$fieldname) {
        return;
      }
      $val = $first->$fieldname;
    }
    elseif (isset($first->data[$fieldname])) {
      if ($first->data[$fieldname] != $currency->data[$fieldname]) {
        return;
      }
      $val = $first->data['$fieldname'];
    }
  }
  if (isset($val)) {
    return $val;
  }
  elseif (isset($first->$fieldname)) {
    return $first->$fieldname;
  }
  elseif (isset($first->data[$fieldname])) {
    return $first->data[$fieldname];
  }
}


function currency_form($currency, $form_state) {
  $form = array(
    'title' => array(
      '#title' => t('Name of currency'),
      '#description' => t('Use the plural'),
      '#type' => 'textfield',
      '#default_value' => $currency->name,
    ),
    'body' => array(
      '#title' => t('Rationale'),
      '#description' => t('What are the credentials of this currency? Richard Douthwaite poses these questions:') . theme('item_list', array('items' => array(
        t('Who issues the money?'),
        t('Why do they issue it?'),
        t('Where is the money created?'),
        t('What gives the money its value?'),
        t('How is the money created?'),
        t('When is the money created?'),
      ), 'title' => NULL, 'type' => 'ol')),
      '#type' => 'textarea',
      '#default' => $form_state['values']['body'],
      '#required' => TRUE
    ),
    'format' => array(
      '#title' => t('Display'),
      '#description' => t('Write an expression to control the display of the currency using the following tokens:') .' @icon, @quant, @subdivision ' .
         t('For example to display -$45:23 AUS, enter @minus@icon@integer:@subdivision AUS'),
      '#type' => 'textfield',
      '#default' => $form_state['values']['format'],
      '#required' => TRUE
    ),
    'fractions' => array(
      '#title' => t('Fractions to show in form'),
      '#description' => t('Leave blank to use integers. "00" to use hundredths.') . t('To use a dropdown, such as for quarters of an hour, write a "hundredths value| visible text" on each line. E.g. ') . '<br />' .
        '<pre>0| exactly<br />50| half an hour</pre>',
      '#type' => 'textarea',
      '#default' => $form_state['values']['body'],
    )
  );
  return $form;
}

function currencies_load($cid = NULL) {
  static $currencies;
  if (!isset($currencies)) {
    module_load_include('inc', 'mcapi', 'entities');
    //load all the currencies
    $currencies = entity_get_controller('currency')->loadAll();
  }
  if ($cid) {
    return $currencies[$cid];
  }
  else {
    return $currencies;
  }
}


//move the notification theshhold inside the contacts fieldset,
//only works if this module weight is heavier than contact
function mcapi_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    if($form['#user_category'] == 'account' && isset($form['contact']) && variable_get('mcapi_notification_option', TRUE)) {
      $form['contact']['notify_threshhold'] = $form['notify_threshhold'];
      unset($form['notify_threshhold']);
    }
  }
}


/* MOVE TO user_limits MODULE
 * add the balance limit fields
 */
function hook_form_user_profile_form_alter(&$form,&$form_state, $account) {
  if ($form['#user_category'] == 'account') {

    $form['#submit'][] = 'mcapi_user_profile_submit';
  }
}function mcapi_user_profile_submit() {

}
/**
 * default theme function for callback 'currency_range'
 * which simply shows the min and max extents of an account
 * (assuming both exist)
 */
function theme_currency_range($variables) {
  $currency = $variables['currency'];
  $header = array(t('Min'), t('Max'));
  $rows = array(
    array(
      theme('money', array('quantity' => $currency->min, 'cid' => $currency->nid)),
      theme('money', array('quantity' => $currency->max, 'cid' => $currency->nid))
    )
  );
  return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * Implements hook_entity_info()
 */
function mcapi_entity_info(){
  module_load_include('inc', 'mcapi');
  return mcapi_entity_info_inc();
}

function transaction_uri($transaction) {
  return array(
    'path' => 'transaction/' . $transaction->xid,
  );
}
function transaction_label($transaction){
  return $transaction->description;
}
function currency_label($currency) {
  return $currency->name;
}
/*
 * determine which form to edit according to the transaction_type info
 */
function transaction_edit($transaction){
  $types = module_invoke_all('transaction_type_info');
  $type = $types[$transaction->type];
  return drupal_get_form($type['edit'], $transaction);
}

/*
 * Implementation of hook_transaction_type_info
 * Transaction types are NOT entity bundles
 */
function mcapi_transaction_type_info() {
  return array(
    'admin' => array(
      'title' => 'admin',
    )
  );
}

/*
 * Needed for the views 2 module
 */
function mcapi_views_api() {
  return array(
    'api' => '3.0-alpha1', //TODO update this to v3
    'path' => drupal_get_path('module', 'mcapi') .'/views',
  );
}


/*
 * takes an array of objects, with the nid as array keys and returns an array with just the titles
 * for preparing form field select options
 * Seems a bit random, but there you go...
 */
function mcapi_title_selector($objects, $title_key, $zero_val = '') {
  $options = array();
  if ($zero_val && count($objects) > 1) {
    $options[] = $zero_val;
  }
  foreach ($objects as $id => $object) {
    if (is_array($object)) {
      $options[$id] = $object[$title_key];
    }
    else {
      $options[$id] = $object->$title_key;
    }
  }
  return $options;
}