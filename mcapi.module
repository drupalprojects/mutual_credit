<?php

/**
 * @file
 * mcapi.module
 */

use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\mcapi\Entity\Currency;
use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Exchange;


//@todo its not really appropriate to use constants for plugin names?
const TRANSACTION_STATE_FINISHED = 'done';
const TRANSACTION_STATE_ERASED = 'erased';

/**
 * implements hook_requirements().
 */
function mcapi_requirements($phase) {
  if ($phase == 'runtime') {
    $result = [
      'title' => t('Transaction index table'),
    ];
    //check that the index table is integral
    if (\Drupal::entityTypeManager()->getStorage('mcapi_transaction')->indexCheck()) {
      $result['severity'] = REQUIREMENT_OK;
      $result['description'] = t('Index table adds up');
    }
    else {
      $result['severity'] = REQUIREMENT_ERROR;
      $result['description'] = t(
        'Index table does not add up. Try rebuilding it at !link',
        ['!link' => \Drupal::l('admin/accounting/misc', Url::fromRoute('mcapi.admin_misc'))]
      );
    }
    return array($result);
  }
}

/**
 * implements hook_help().
 */
function mcapi_help($route_name) {
  switch ($route_name) {
    case 'entity.mcapi_currency.collection':
      return implode(' ', [
        t('Multiple currencies allow many, potentially overlapping communities to work in this Drupal instance, and for currencies to embody different values.'),
        t('Retired currencies can no longer be used, but transactions are still visible.'),
        t('Only unused currencies can be deleted.'),
      ]);
    case 'mcapi.admin.workflow':
      $help = [
        t("Special 'actions' move transactions of various types between states, except for 'view', which is special"),
        t('More states and types can be added as custom module configuration entities; no user interface exists for that.'),
      ];
      if (\Drupal::moduleHandler()->moduleExists('field_ui')) {
        $help[] = t("N.B. 'Manage display' tab is hidden because transaction displays are all handled through configurable templates.");
      }
      return implode(' ', $help);
    case 'entity.mcapi_transaction.field_ui_fields':
      $settings_url = Url::fromRoute('mcapi.admin_misc');
      $action_url = Url::fromRoute('mcapi.admin.workflow');
      $message = [
        t('These transaction display settings should always be overridden.'),
        t('To configure the certificate, override certificate.html.twig in your theme'),
        t(
          'To configure the sentence, see the Accounting settings: !link.',
          ['!link' => \Drupal::l($settings_url->toString(), $settings_url)]
        ),
        t(
          'Custom Twig can be used for display on the action settings pages: !link.',
          ['!link' => \Drupal::l($action_url->toString(), $action_url)]
        ),
      ];
      return implode(' ', $message);
  }
}

/**
 * implements hook_entity_view().
 * add a wallet summary view to wallet-enabled entities
 *
 * @todo check the cache contexts because this contains a link to wallet creation.
 */
function mcapi_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getComponent('wallets_summaries')) {
    $wallets = [];
    //get the wallets belonging to this entity
    $wids = \Drupal::entityTypeManager()
      ->getStorage('mcapi_wallet')
      ->filter(['holder' => $entity]);
    foreach (Wallet::loadMultiple($wids) as $wid => $wallet) {
      if ($wallet->access(Wallet::OP_SUMMARY)) {
        $wallets[] = $wallet;
      }
    }
    if ($wallets) {
      $build += [
        'wallets_summaries' => \Drupal::entityTypeManager()
          ->getViewBuilder('mcapi_wallet')
          //the wallet 'summary' view mode is provided in this module's default config
          ->viewMultiple($wallets, 'summary'),
      ];
    }
  }
}

/**
 * Machine name callback
 * Load a currency, from its id
 */
function mcapi_currency_load($id) {
  return Currency::load($id);
}

/**
 * Utility function to populate a form widget's options with entity names
 *
 * @param string $entity_type_id
 *
 * @param array $data
 *   either entities of the given type, entity ids, or $conditions for entity_load_multiple_by_properties
 *
 * @return string[]
 *   The entity names, keyed by entity id
 *
 */
function mcapi_entity_label_list($entity_type_id, array $data = []) {
  if (empty($data)) {
    $entities = \Drupal::entityTypeManager()->getStorage($entity_type_id)->loadMultiple();
  }
  elseif(is_string(key($data))) {
    $entities = entity_load_multiple_by_properties($entity_type_id, $data);
  }
  elseif(is_numeric(reset($data))) {
    $entities = \Drupal::entityTypeManager()->getStorage($entity_type_id)->loadMultiple($data);
  }
  else {
    $entities = $data;
  }
  if (property_exists(current($entities), 'weight') && count($entities) > 1) {
    uasort($entities, 'mcapi_uasort_weight');
  }
  $list = [];
  foreach ($entities as $entity) {
    $list[$entity->id()] = $entity->label();
  }
  return $list;
}

/**
 * uasort callback for configuration entities.
 * could be included in Drupal Core?
 */
function mcapi_uasort_weight($a, $b) {
  $a_weight = (is_object($a) && property_exists($a, 'weight')) ? $a->weight : 0;
  $b_weight = (is_object($b) && property_exists($b, 'weight')) ? $b->weight : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * implements hook_element_info_alter().
 * adds the 'balances' icon via css
 */
function mcapi_element_info_alter(&$items) {
  $items['toolbar']['#attached']['library'][] = 'mcapi/mcapi.toolbar';
}


/**
 * implements hook_entity_insert()
 * give a new wallet to new entities, if the settings require
 */
function mcapi_entity_insert($entity) {
  $config = \Drupal::config('mcapi.settings');
  //note that intertrading wallets are created not here but in Exchange::postSave
  if ($config->get('autoadd')) {
    $type = $entity->getEntityTypeId();
    //NB autoadd applies to ALL entity types or to none
    $maxes = $config->get('entity_types');
    if ($max = @$maxes[$type .':'. $entity->bundle()]) {
      //no need to check what the max is, since this is the first wallet created for this entity
      $wallet = Wallet::create([
        'entity_type' => $type,
        'pid' => $entity->id(),
        'name' => '',
        //will inherit default access controls
      ]);
      $wallet->save();
      \Drupal::logger('mcapi')->notice(
        'Wallet @wid autocreated for @entitytype @id',
        ['@wid' => $wallet->id(), '@entitytype' => $type, '@id' => $entity->id()]
      );
    }
  }
}

/**
 * implements hook_entity_update().
 * if the changed entity is a wallet holder, then refresh the wallet indices
 * especially in case the holder has moved to a different exchange
 */
function mcapi_entity_update($entity) {
  if (walletable($entity)) {
    $storage = \Drupal::entityTypeManager()->getStorage('mcapi_wallet');
    if ($wids = $storage->filter(['holder' => $entity])) {
      $storage->reIndex(Wallet::loadMultiple($wids));
    }
  }
}

/**
 * implements hook_entity_predelete().
 *
 * orphan any wallets owned by the deleted entity.
 */
function mcapi_entity_predelete($entity) {
  if (walletable($entity)) {
    Wallet::orphan($entity);
  }
}

/**
 * implements hook_module_implements_alter().
 *
 * Ensures that mcapi_local_tasks_alter runs after field_ui_local_tasks_alter
 */
function mcapi_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'local_tasks_alter') {
    $group = $implementations ['mcapi'];
    unset($implementations ['mcapi']);
    $implementations ['mcapi'] = $group;
  }
}

/**
 * implements hook_local_tasks_alter().
 *
 * prevent the three fixed transaction display modes from being edited
 * Remove any unneeded wallet tabs
 */
function mcapi_local_tasks_alter(&$tasks) {
  foreach (['default', 'certificate', 'twig', 'sentence'] as $mode) {
    unset($tasks["field_ui.fields:field_display_{$mode}_mcapi_transaction"]);
  }
  //remove the parent tab as well.
  unset($tasks['field_ui.fields:display_overview_mcapi_transaction']);
  
  $settings = \Drupal::config('mcapi_settings');
  if (!$settings->get('wallet_inex_tab')) {
    unset($tasks['views_view:view.income_expenditure.income_page']);
  }
  if (!$settings->get('wallet_log_tab')) {
    unset($tasks['views_view:view.wallet_log.page']);
  }
}


/**
 * implements hook_entity_type_alter().
 * Change the action list controller to a wrapper which hides this modules operation actions
 */
function mcapi_entity_type_alter(array &$entity_types) {
  $entity_types['action']
    ->setListBuilderClass('Drupal\mcapi\Controller\ActionListOverride');
}

/**
 * implements hook_entity_operation_alter().
 * prevent the transaction view modes from being tampered with
 */
function mcapi_entity_operation_alter(&$operations, $entity) {
  if (in_array('mcapi_transaction.'.$entity->id(), ['certificate', 'twig', 'sentence'])) {
    $operations = [];
  }
}

/*
 * implements hook_form_field_ui_field_edit_form_alter().
 * automate and hide the 'required' checkbox for the Gransaction worth field API settings
 */
function mcapi_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#entity']->getEntityTypeId() == 'mcapi_transaction') {
    $element = &$form['field']['required'];
    $element['#value'] = TRUE;
    $element['#type'] = 'value';
    $currs = $form['field']['default_value']['widget']['#allowed_curr_ids'];
    foreach (Currency::loadMultiple($currs) as $currency) {
      if ($currency->zero) {
        $element['#value'] = FALSE;
        return;
      }
    }
  }
}

/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_entity_extra_field_info() {
  //go through all the bundles which are configured to hold wallets
  $types = \Drupal::config('mcapi.settings')->get('entity_types');
  foreach((array)$types as $entity_bundle => $max) {
    //if (!$max) continue; //don't show wallets on bundles with maximum of 0 wallets
    list($entity_type, $bundle) = explode(':', $entity_bundle);
    $extra[$entity_type] = [
      $bundle => [
        'display' => [
          'wallets_summaries' => [
            'label' => \Drupal::translation()->formatPlural($max, 'Wallet summary', 'Wallets summaries'),
            'description' => t("The 'summary' view of all the entity's wallets."), //' '.l('admin/accounting/wallets/fields', Url::fromUri('admin/accounting/wallets/fields'),
            'weight' => 5,
          ],
        ]
      ]
    ];
  }
  
  $extra['mcapi_wallet']['mcapi_wallet']['display'] = [
    'stats' => [
      'label' => t('Trading stats'),
      'description' => t('Grid showing trading stats for all currencies'),
      'weight' => 5
    ],
    'balances' => [
      'label' => t('Balance'),
      'description' => t('Small thingy showing balances of all currencies'),
      'weight' => 6
    ],
    'histories' => [
      'label' => t('History chart'),
      'description' => t('One line chart per currency showing balance over time.'),
      'weight' => 7
    ],
    'balance_bars' => [
      'label' => t('Given & gotten'),
      'description' => t('One barchart per currency showing incoming and outgoing volumes'),
      'weight' => 8
    ],
    'wallet_log' => [
      'label' => t('Transaction_log'),
      'description' => t('List of transactions (view)'),
      'weight' => 9
    ],
    'income_expenditure' => [
      'label' => t('Income & expenditure (view)'),
      'description' => t('Two tables showing transactions in either direction'),
      'weight' => 10
    ],
    'canonical_link' => [
      'label' => t("Link to canonical view"),
      'description' => t("Link to canonical view"),
      'weight' => 11
    ]
  ];
  //most of the transaction fields appear on the display
  //@todo isn't this specified in the field definitioni itself?
  $props = \Drupal::service('entity_field.manager')
      ->getFieldDefinitions('mcapi_transaction', 'mcapi_transaction');
  $fields = ['payer', 'payee', 'description', 'state', 'type'];//these are all base fields on transaction entity
  foreach ($fields as $weight => $fieldname) {
    $extra['mcapi_transaction']['mcapi_transaction']['display'][$fieldname] = [
      'label' => $props[$fieldname]['label'],
      'description' => $props[$fieldname]['description'],
      'weight' => $weight,
    ];
  }
  return $extra;
}

/**
 * implements hook_theme().
 */
function mcapi_theme() {
  $file = ['file' => 'src/ViewBuilder/theme.inc'];
  $items['mcapi_transaction'] = [
    'render element' => 'transaction',
    'template' => 'transaction'
  ] + $file;
  //the above is the theme wrapper for the below
  //so they both take the same render_element
  $items['certificate'] = [
    'render element' => 'transaction',
    'template' => 'certificate',
    'pattern' => 'certificate__'
  ] + $file;
  $items['sentence'] = [
    'render element' => 'transaction'
  ] + $file;
  $items['mcapi_currency'] = [
    'render element' => 'currency',
    'template' => 'currency'
  ] + $file;
  
  $wallet_callbacks = [
    'mcapi_wallet', 
    'mcapi_wallet_component', 
    'wallet_balances', 
    'wallet_balance_bars', 
    'wallet_histories', 
    'wallet_stats',
  ];
  foreach ($wallet_callbacks as $callback) {
    $items[$callback] = [
      'render element' => 'element',
    ] + $file;
  }
  return $items;
}

/**
 * Determine whether the system architecture allows an entity to hold wallets.
 * which is to say, whether it is a contentEntity with an audience field
 *
 * @param ContentEntity $entity
 *
 * @return NULL | string
 *   TRUE means the entitytype can hold wallets
 */
function walletable($entity) {
  $type_id = $entity->getEntityTypeId();
  //the quick answer
  if ($type_id == 'user') {
    return TRUE; //because of intertrading wallets
  }
  $bundles = Exchange::walletableBundles();
  return in_array($type_id,  $bundles)
    && in_array($entity->bundle(), $bundles[$type_id]);
}


/**
 * take a worth value, typically from config and return true if all the
 *  currencies in it are zero
 * @param array $worth
 *   a worth value expressed as an array of arrays with curr_id & value
 * @return boolean
 *   TRUE if all the items have a worth of zero
 */
function empty_worth(array $worth) {
  foreach ($worth as $item) {
    if ($item['value']) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * implement mcapi hook_mcapi_form_list().
 * return a list of transaction forms declared in this module.
 * each item must e an array with the following keys
 * - 'title' => 'Blah'
 * - 'route' => 'mcapi.transaction_form'
 * - 'route_parameters' => []
 * - 'operations' => [Url::fromPath('blah')] an array of items, each with title and path
 */
function mcapi_mcapi_form_list() {
  $forms['default'] = [
    'title' => t('Default'),
    'route' => 'mcapi.transaction.add',
    'route_parameters' => [],
    'operations' => []
  ];
  $forms['12many'] = [
    'title' => t('One wallet pays many'),
    'route' => 'mcapi.masspay.12many',
    'route_parameters' => [],
    'operations' => []
  ];
  $forms['many21'] = [
    'title' => t('Many wallets pay one'),
    'route' => 'mcapi.masspay.many21',
    'route_parameters' => [],
    'operations' => []
  ];
  return $forms;
}

function mcapi_one_wallet_per_user_mode() {
  return \Drupal::config('mcapi.settings')->get('entity_types.user:user') == 1;
}

/**
 * utility function
 * loads any of the transaction operation actions
 */
function mcapi_transaction_action_load($operation) {
  //sometimes the $operation is from the url so it is shortened, and sometimes is the id of an action.
  //there is a convention that all transaction actions take the form transaction_ONEWORD
  if ($operation == 'operation') {//take the oneword from the given path
    $operation = \Drupal::routeMatch()->getParameter('operation');
  }
  if (substr($operation, 0, 12) != 'transaction_') {
    $action_name = 'transaction_'.$operation;
  }
  else $action_name = $operation;
  if ($action = \Drupal\system\Entity\Action::load($action_name)) {
    return $action;
  }
  throw new \Exception("No action with name '$operation'");
}

/**
 * utility function
 * load those special transaction operations which are also actions
 */
function mcapi_load_transaction_actions() {
  return \Drupal::entityTypeManager()
    ->getStorage('action')
    ->loadByProperties(['type' => 'mcapi_transaction']);
}
