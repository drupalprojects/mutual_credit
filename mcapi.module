<?php
// $Id$

/*
 * @file
 * exchanges are a simple nodetype, stored in the database and balances & other stats are cached.
 *
 * This .module file contains only the hooks and functions which might be called when the module is passive
 * If the module is doing anything such as generating a block or a page, the inc is included
 *
 * NOTES ON THE EXCHANGE QUANTITY
 * Quantity is stored as a decimal in the DB for easy calculation
 * The exchange object stores the amount as a decimal fraction
 * In preprocessing  an hour currency the decimal is multiplied by 0.6 to become hours:minutes,
 * The theme_money function then attaches the icon or currency name
 *
 * NOTES ON THE EXCHANGE RATINGS
 * This module doesn't fully support the $exchange->rating, but it's here for legacy reasons
 * also other modules can use it
 *
 * if the multiple currencies module is not installed, the default currency id ('cid') is 0
 *
 * API consists of the following functions (more documentation on the way)
 *
 * node_load($nid) //get an exchange object (drupal core)
 * node_delete($nid) //delete an exchange object (drupal core)
 * mc_api_add_node($node) //create an exchange and return success message
 * mc_api_update_node($node) //same as add, but with a $nid given
 * mc_api_check_user_limits()
 *
 */

//it might not be necessary to include this all the time. Depends how large it gets as well.
module_load_include('api', 'mcapi');

//states are mutually exclusive
define ('EXCHANGE_STATE_FINISHED', 0);
define ('EXCHANGE_STATE_PENDING', 1);
define ('EXCHANGE_STATE_ERASED', -1);

/**
 * http://api.drupal.org/api/function/hook_help/6
 */
function mcapi_help($section) {
  switch ($section) {
    case 'admin/help#exchange':
      return t('Defines a contentType called exchanges, manages them and does the accounting.');
    case 'admin/cc':
      return '<p>'. t("This module, its development and implementations at !cforge," .' ',
        array('!cforge' => l('Community Forge', 'http://communityforge.net'))) .
        t("have been the full time commitment of one person since Spring 2008, and another since spring 2009.") . ' '.
        t("The results of this work are offered freely to all.") .'</p><p>'.
        t("We give all possible resources to this work, and live by reciprocal gifting as much as possible.") .' '.
        t("We look forward to the day when support is robust enough to pay staff and provide a reliable nonprofit public service.") .' '.
        t("Please consider supporting this work by:") . ' '.
        theme('item_list', array(
          t("sending some scarce hard currency to the developer ") ."IBAN - ES62 2077 0148 7716 0133 1092, SWIFT - CVALESVVXXX",
          t("allying with us to build a global complementary currency ecosystem"),
          t("offering of board and lodging for a month or two, or other commodities we can exchange")
        )
      );
  }
}
/**
 * http://api.drupal.org/api/function/hook_init/6
 *
 */
function mcapi_cron() {
  //this is for the voluntary reporting function
  if (variable_get('cforge_report', 1)) {
    module_load_include('inc', 'mcapi');
    cforge_report();
  }
}

/*
 * Needed for the views 2 module
 */
function mcapi_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'exchanges') .'/views',
  );
}

/**
 * Implementation of hook_node_info.
 * http://api.drupal.org/api/function/hook_node_info/6
 */
function mcapi_node_info(){
  variable_set('comment_exchange', 0);
  variable_set('comment_currency', 0);
  return array(
    'currency' => array(
      'name' => t('currency'),
      'module' => 'mcapi',
      'description' => t('A unit of value'),
      'has_title' => TRUE,
      'title_label' => t('Currency Name'),
      'has_body' => TRUE,
      'body_label' => t('Rationale'),
      'status' => TRUE,
      'sticky' => FALSE,
    ),
    'exchange' => array(
      'name' => t('exchange'),
      'module' => 'mcapi',
      'description' => t('A record of an exchange between two users, denominated in a currency'),
      'has_title' => TRUE,
      'title_label' => t('Description of entity traded'),
      'has_body' => FALSE,
    )
  );
}

/**
 * http://api.drupal.org/api/function/hook_menu/6
 */
function mcapi_menu() {
  module_load_include('inc', 'mcapi');
  $items['admin/mc'] = array(
    'title' => 'Complementary Currencies',
    'description' => 'Complementary currency options',
    'page callback' => 'mc_admin_menu_block_page',
    'access arguments' => array('configure economy'),
    'file' => 'mcapi.inc',
  );
  $items['admin/mc/general'] = array(
    'title' => 'General',
    'description' => 'Complementary Currency API options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_options'),
    'access arguments' => array('configure economy'),
    'file' => 'mcapi.inc',
    'weight' => 1
  );
  $items['admin/mc/currencies'] = array(
    'title' => 'Currencies',
    'description' => t('List of currency nodes'),
    'page callback' => 'currency_list',
    'access callback' => TRUE,
    'access arguments' => array('configure economy'),
    'file' => 'mcapi.inc',
    'weight' => 2
  );
  return $items;
}


/**
 * http://api.drupal.org/api/function/hook_access/6
 * this function is called by node_access
 * $ops can be array('view', 'update', 'delete', 'create')
 */
function mcapi_access($op, $node, $account = NULL) {
  if (user_access('edit all exchanges')) {
    return TRUE;
  }
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  switch ($op) {
    case 'view'://users can always view their own pages
      return user_access('view all exchanges')
      || $account->uid == $node->payee_uid //exchanges the present user was involved in
      || $account->uid == $node->payer_uid;
    case 'create':
      return user_access('exchange');
    case 'update': //this is the permission used by node_access
    case 'delete':
      return $account->uid == $node->starter_uid && $node->state == EXCHANGE_STATE_PENDING;
  }
}

/**
 * http://api.drupal.org/api/function/hook_perm/6
 * This hook can supply permissions that the module defines,
 */
function mcapi_perm() {
  return array(
    'exchange',
    'view all exchanges',
    'edit all exchanges',
    'configure economy',
    'declare currency'
  );
}

/**
 * http://api.drupal.org/api/function/hook_load/6
 */
function mcapi_load($node) {
  //retrieve the extra fields from the node-specific tables, and return them to be added to the node
  if ($node->type == 'exchange') {
    $table = 'mc_exchanges';
  }
  else {
    $table = 'mc_currencies';
  }
  $fields = db_fetch_array(db_query('SELECT * FROM {%s} WHERE nid = %d',
    array(':table' => $table, ':nid' => $node->nid)
  ));
  //while drupal_write record and schema API will serialize an array into a serialized field
  //it can't unserialize them on the way out of the db since there is no function drupal_read_record
  $fields['data'] = unserialize($fields['data']);
  return $fields;
}


/**
 * http://api.drupal.org/api/function/hook_form/6
 * Because we have a special multistep form creating the exchanges, this hook_form is only used for node editing
 */
function mcapi_form(&$node) {
  module_load_include('inc', 'mcapi');
  if ($node->type == 'exchange') {
    //reload the whole exchange, which will include all the other fields
   //it's in a separate function so that other modules can access it.
    $form = mcapi_form_exchange($node);
    if (!$node->exchange_type) $node->exchange_type = 'api';
    $form['exchange_type'] = array(
      '#type' => 'hidden',
      '#default_value' => $node->exchange_type,
    );
    return $form;
  }
  else {
    return mcapi_form_currency(&$node);
  }
}


/**
 * http://api.drupal.org/api/function/hook_insert/6
 */
function mcapi_insert(&$node) {
  if ($node->type == 'exchange') {
    drupal_write_record('mc_exchanges', $node);
  }
  else {
    drupal_write_record('mc_currencies', $node);
    module_load_include('install', 'mcapi');
    refresh_quantity_field_types();
  }
  //this is needed to get before the node after_save trigger
  module_invoke_all('exchange_registered', $node);
}

/**
 * http://api.drupal.org/api/function/hook_update/6
 */
function mcapi_update($node) {
  if ($node->type == 'exchange') {
    drupal_write_record('mc_exchanges', $node, array('nid'));
  }
  else {
    drupal_write_record('mc_currencies', $node, array('nid'));
    module_load_include('install', 'mcapi');
    refresh_quantity_field_types();
  }
  //this is not used
  //module_invoke_all('exchange_update', $node);
}

/**
 * http://api.drupal.org/api/function/hook_delete/6
 */
function mcapi_delete($node) {
  if ($node->type == 'exchange') {
    //the node is deleted, but it leaves this trace in the mc_exchanges table
    db_query("UPDATE {mc_exchanges} set state = %d WHERE nid = %d", EXCHANGE_STATE_ERASED, $node->nid);
  }
  elseif ($node->type == 'currency') {
    //the currency can only be deleted if there are no exchanges in it (or if all users have zero!)
    //but validation will have checked this, I hope
    db_query("DELETE FROM {mc_currencies} WHERE nid = %d", $node->nid);
  }
  //this is not used
  //module_invoke_all('exchange_erase', $node);
}

function mcapi_view($node, $teaser = FALSE, $page = FALSE) {
  //exchanges are handled in the node-exchange.tpl.php which calls its own preprocessor function
  //and node-currency.tpl.php
  //this seems simpler and tidier than using hook_view to crudely set $node->content['body']['#value']
  if ($node->type == 'currency') {
    //have to do this or the $node->body is overwritten with empty $content. See node_view()
    $node->content['body']['#value'] = $node->body;
  }
  return $node;
}

function mcapi_nodeapi(&$node, $op) {
  if ($node->type == 'exchange' && ($op == 'insert' || $op == 'update' || $op == 'delete')) {
    module_load_include('inc', 'mcapi');
    _rebuild_exchange_history($node->payer_uid, $node->cid);
    _rebuild_exchange_history($node->payee_uid, $node->cid);
  }
  elseif($node->type == 'currency') {
    switch($op) {
      case 'presave':
        mcapi_node_presave_currency($node);
      break;
    }
  }
}

function mcapi_node_presave_currency(&$node) {
  module_load_include('inc', 'mcapi');
  $node->data['color'] = $node->color;
  $node->data['divisions'] = mc_convert_settings_array($node->divisions); //converted to an array for storage
  $node->data['ratings'] = mc_convert_settings_array($node->ratings); //converted to an array for storage
  if (isset($node->upload_icon)) {
    $file = $node->upload_icon;
    //it was parked in the temp directory in the validation phase
    $dest = file_directory_path() .'/currencies/'. $file->filename;
    if (file_move($file->filepath, $dest, FILE_EXISTS_REPLACE)) {
      $node->icon = $dest;
    }
    else {
      drupal_set_message('Failed to upload new currency icon');
    }
  }
  elseif ($node->icon == '') {
    unset($node->icon); //otherwise it will overwrite the icon with blank
  }
}

/**
 * http://api.drupal.org/api/function/hook_user/6
 * This hook is required for modules to define one or more node types.
 */
function mcapi_user($op, &$edit, &$account, $category = NULL) {
  $currencies = array();
  switch ($op) {
    case 'form':
      if ($category != 'account') return;

    case 'register':
      $currencies = currencies_load();
      //fields for individual balance limits
      if (user_access('edit all exchanges')) {
        $form['mc_limits'] = array(
          '#type' => 'fieldset',
          '#title' => t('Personal balance limits (accountant only)'),
          '#description' => t("Each of these values will override the currency's limits (shown in brackets)"),
          '#weight' => -5,
          '#attributes' => array('class' => 'balance-limits'),
          '#tree' => TRUE,
        );
        if (user_access('exchange', $account)) {
          foreach ($currencies as $cid => $currency) {
            $form['mc_limits'][$cid] = array(
              '#type' => 'fieldset',
              '#title' => $currency->title,
              '#weight' => $cid,
              '#element_validate' => array('mc_validate_limits'),
              '#cid' => $cid, //this helps with validation
            );
            //because the overridden balance limits were loaded into the user object,
            //we retrieve them afresh from the db
            $data = unserialize(db_result(db_query("SELECT data from {users} WHERE uid = %d", array(':uid' => $account->uid))));
            $form['mc_limits'][$cid]['min'] = array(
              '#type' => 'textfield',
              '#title' => t('Min limit'),
              '#maxlength' => 6,
              '#size' => 6,
              '#default_value' => $data['mc_limits'][$cid]['min'],
              '#field_suffix' =>' ('. $currency->min .')',
            );
            $form['mc_limits'][$cid]['max'] = array(
              '#type' => 'textfield',
              '#title' => t('Max limit'),
              '#maxlength' => 6,
              '#size' => 6,
              '#default_value' => $data['mc_limits'][$cid]['max'],
              '#field_suffix' =>' ('. $currency->max .')',
            );
          }
        }
      }
      return $form;

    case 'insert':
      //this is really a governance thing - start each user off with no credit limit
      $currencies = currencies_load();
      foreach ($currencies as $cid => $currency) {
        if ($edit['min-'. $cid] == '') {
          $edit['min-'. $cid] == 0;
          drupal_set_message(t('By default, new user credit limits are set to 0'), 'warning');
        }
      }

    case 'delete':
      db_query("DELETE from {mc_balance_cache} WHERE uid = %d", array(':uid' => $account->uid));
  }
}

function mcapi_theme() {
  $items = array(
    'money' => array(
      'template' => 'money',
      'path' => drupal_get_path('module', 'mcapi') .'/theme',
      'arguments' => array(
        'quantity' => 0,
        'cid' => 0,
        'richtext' => TRUE //better for mails not to include currency icons
      )
    ),
    //this should be discovered automatically but drupal 6 was badly designed
    //http://drupal.org/node/279573
    'currency_node_form' => array(
      'file' => drupal_get_path('module', 'mcapi') . '/mcapi.inc',
      'arguments' => array('form' => NULL),
    ),
    'mc_rating' => array(
      'file' => drupal_get_path('module', 'mcapi') . '/mcapi.inc',
      'arguments' => array(
        'rating' => NULL,
        'cid' => 0
        ),
    ),
    'exchange_summary' => array(
      'arguments' => array('exchange'),
      'file' => drupal_get_path('module', 'mcapi') . '/mcapi.inc',
    )
  );
  return $items;
}


/**
 * Implementation of hook_theme_registry_alter
 * this is to make the 'node' theme callback include this module's theme directory
 * and hence to find the provided node-exchange.php and node-currency in its list of paths
*/
function mcapi_theme_registry_alter(&$items) {
  $node_theme_paths = $items['node']['theme paths'];
  $node_path_suggestion = array_search('modules/node', $node_theme_paths);
  if ($node_path_suggestion !== FALSE) {
    $theme_path = drupal_get_path('module', 'mcapi') . '/theme';
    array_splice($items['node']['theme paths'], $node_path_suggestion+1, 0, $theme_path);
  }
}

function template_preprocess_money(&$vars)  {
  if (!$vars['cid'])print_r($vars);
  $currency = node_load($vars['cid']);
  $vars['sign'] = '';
  $vars['icon'] = '';
  //seperate the sign, positive or negative
  if ($vars['quantity'] < 0) {
    $vars['sign'] = '-';
    $vars['quantity'] = abs($vars['quantity']);
  }
  //convert the sub to something presentable
  if ($currency->sub) {
    $quant = intval($vars['quantity']);
    $fraction = $vars['quantity'] - $quant;
    if (count($currency->data['divisions'])) {
      $vars['quantity'] = $quant . ' '. $currency->data['divisions'][$fraction*100];
    }
    else {
      $vars['quantity'] = sprintf('%d:%02d', $quant, $fraction);
    }
  }

  if (strlen($currency->icon)) {
    $vars['icon'] = l(theme_image($currency->icon), 'node/'. $currency->nid,
      array('html' => TRUE, 'attributes' => array('title' => $currency->title .' - '. $currency->body, 'alt' => $currency->title)));
  }
  $vars['name'] = $currency->title;
}


/*
 * Validations - first the node hook, then all the form element validators
 * have to be in the .module file otherwise form.inc won't see them before they are included
 */

//this is a node hook, but remember  mc_webforms don't use node forms, and must call this explicitly
function mcapi_validate($node) {
  module_load_include('inc', 'mcapi');
  if ($node->type == 'currency') {
    //check that the title is unique amongst currencies
    $nid = db_result(db_query("SELECT nid FROM {node} where type = 'currency' AND title = '%s'", array(':title' => $node->title)));
    if ($nid && $node->nid != $nid) {
      form_set_error('title', t('A currency called @name already exists', array('@name' => l($node->title, 'node/'.$node->nid))));
    }

    //check that the objective value is either blank or numeric
    if ($node->value && !is_numeric($node->value)) {
      form_set_error('value', t("Currency value must be a number"));
    }

  }
  //if we don't have the $node->type it's because it wasn't set in the exchange forms which might be borrowing this validate function
  elseif ($node->type == 'exchange') {
    if (!isset($node->exchange_type)) {
      form_set_error('', t("Hidden field '@field' needs to be added to form. This value is intended to identify the module or form which created the exchange", array('@field' => 'exchange_type')));
    }
    if ($node->payer_uid == $node->payee_uid && $node->payer_uid != 0 ) {
      //no usecase is currently envisaged where someone might pay themselves
      form_set_error('', t('An exchange must involve two different users'));
      return;
    }
    if (!count(form_get_errors()) && $node->payer_uid && $node->payee_uid) {
      $errors = mc_api_check_user_limits(user_load($node->payer_uid), -$node->quantity, intval($node->cid));
      $errors .= mc_api_check_user_limits(user_load($node->payee_uid), +$node->quantity, intval($node->cid));
      if (strlen($errors)) {
        //permitted users can override the balance limits
        //this decision should be moved upwards for version 2.0
        if (user_access('edit all transactions')) {
          drupal_set_message($errors, 'warning');
        }
        else {
          form_set_error('quantity', $errors);
        }
      }
    //an exchange can only be complete if all the fields are filled in.
    if ($node->state == EXCHANGE_STATE_FINISHED) {
      if (!$node->payer_uid && !$node->payee_uid) {
        form_set_error('payer_uid', t('Payee or payer required for completed exchange'));
      }
      if (!$node->quantity) form_set_error('quantity', t('Quantity required for completed exchange'));
      if (!$node->title) form_set_error('title', t('Description required for completed exchange'));
      if (!$node->cid) form_set_error('cid', t('Currency ID required for completed exchange'));
    }
    }
  }
}


//validates the min and max values against each other and/or against the currency in case these are local balance limits.
//this could be done in javascript also, on the form
//values have already been validated as numeric
function mc_validate_limits(&$element, $form_state) {
  $min_subelement = &$element['min'];
  $max_subelement = &$element['max'];
  if (isset($min_subelement['#value'])){
    if ($min_subelement['#value'] > 0) {
      form_error($min_subelement, t('Minimum balance must not be larger than 0'));
    }
  }
  if (isset($max_subelement['#value'])){
    if ($max_subelement['#value'] < 1) {
      form_error($max_subelement, t('Maximum balance must be larger than 1'));
    }
  }
}

function mc_validate_title($element, $form_state) {
  if (!check_plain($element['#value'])) {
    form_error($element, t('Plain text only in exchange descriptions.'));
  }
}

function mc_validate_cid($element, $form_state) {
  if (isset($element['#value']) && $node = node_load($element['#value'])) {
    if ($node->type != 'currency') {
      form_error($element, t('Invalid currency specified: @num',array('@num' => $element['#value'])));
    }
  }
}

//the api module will validate any number or username or email as a user with permission to trade
//this function permits blank values
function mc_validate_trader(&$element, &$form_state) {
  if ($val = $element['#value']) {
    _mc_check_trader($val, $element);
  }
}
//we have to make at least 3x2 calls on this in on form submission
//so the static variable will help, a little
function _mc_check_trader($value, &$element = NULL) {
  if (is_numeric($value)) {
    $field = 'uid';
  }
  elseif (valid_email_address($value)) {
    $field = 'mail';
  }
  elseif (is_string($value) && strlen($value)) {
    $field = 'name';
  }
  $criterion = array($field => $value);
  $account = user_load($criterion);
  if ($account->uid) {
    if (user_access('exchange', $account)  && $account->status) {
      return $account->uid;
    }
    else {
      if ($element) form_error($element, t("@user is not permitted to trade", array("@user" => $account->name)));
    }
  }
  else {
    if ($element) form_error($element, t("@data is not a known user", array("@data" => $value)));
  }
}

function mc_validate_settings_array(&$element, $form_state) {
  if ($text = $element['#value']) { //blank is not validated, because it means use hundredths
    $lines = explode("\n", $text);
    if (count($lines) < 2) {
      form_error($element, t("There should be at least two lines in field '@fieldname'", array('@fieldname' => $element['#title'])));
    }
    foreach ($lines as $line) {
      if (strpos($line, '|') === FALSE) {
        form_error($element, t('line "@val" should contain a pipe character, |', array('@val' => $line)));
      }
      $vals = explode('|', $line);
      if (!is_numeric($vals[0]) || !strlen($lines[0]) || $vals[1] != check_plain($vals[1]) || !strlen($vals[1] || !is_integer($vals[1]))) {
        form_error($element, t("'@val' should be an integer from  0 to 99, followed directly by a pipe, |, followed directly by a word or phrase with no unusual characters", array('@val' => $line)));
      }
    }
  }
}
function mc_validate_quantity(&$element, &$form_state) {
  $value = $element['#value'] + 0;
  //null values allowed
  if (!$value) return;
  if ($element['#value'] < 0 ) {
    form_error($element, t("Negative values not allowed for '@fieldname'", array('@fieldname' => $element['#title'])));
  }
  if (isset($form_state['values']['cid']) && $currency = node_load($form_state['values']['cid'])) {
    if (!$currency->sub && !is_integer($value)) {
      form_error($element[$subfield], t("Integer values only for '@currency'", array('@currency' => $currency->title)));
    }
    if ($currency->sub) {
      $division = $value - intval($value);
      if (!isset($currency->data['divisions'][$division])) {
        form_error($element, t("Invalid fraction for '@fieldname'", array('@fieldname' => $element['#title'])));
      }
    }
  }
}


function mc_validate_icon_upload(&$element, &$form_state) {
  $validators = array(
    'file_validate_extensions' => array('png', 'jpg', 'gif')
  );

  $dest = file_directory_path() .'/currencies';
  $file = file_save_upload('icon', $validators);
  if (!$file) {
    return;
  }

  if ($err = array_pop (file_validate_is_image($file))) {
    form_error($element, $err);
    return;
  }
  $form_state['values']['upload_icon'] = $file;
}
function mc_validate_color($element, $form_state) {
  preg_match('/^[0-9a-f]{6}$/', $element['#value'], $matches);
  if (!count($matches)) {
    form_error($element, t('Color field must be 6 hex characters'));
  }
}

//validates that a transaction has a rating value consistent with the options defined in the currency
function mc_validate_rating(&$element, &$form_state) {
  module_load_include('inc', 'mcapi');
  //get the rating scale for that currency and check that value is on it.
  $currency = node_load($form_state['values']['cid']);
  $ratings = $currency->ratings;
  if (count($ratings)) {
    if (array_key_exists($element['#value'], $ratings)) {
      return;
    }
  form_error($element, t('Invalid rating entered'));
  }
}

//Some currency properties need to be identical if they are to rendered into the exchange form
//this returns the field only if it is the same in all the passed currencies
//takes top-level fieldnames or data fieldnames
//this is a bit complicated by the design of the currency object, but it works fine
function get_common_currency_properties($currencies, $fieldname) {
  $first = array_pop($currencies); 
  foreach ($currencies as $currency) {
    if (isset($first->$fieldname)) {
      if ($first->$fieldname != $currency->$fieldname) return;
      $val = $first->$fieldname;
    }
    elseif (isset($first->data[$fieldname])) {
      if ($first->data[$fieldname] != $currency->data[$fieldname]) return;
      $val = $first->data['$fieldname'];
    }
  }
  if (isset($val))return $val;
}

//standard exchange form builder function. $currencies can be NULL, a $nid, or an array of currencies
function mcapi_form_exchange($node, $currencies = array()) {
  //certain currencies may be visisble to the form, not necessarily all the currencies on the system
  //or one currency might be passed by the url
  $form['#currencies'] = $currencies;
  if (!is_array($form['#currencies']) || empty($form['#currencies'])) {
    $form['#currencies'] = currencies_load();
  }
  if (count($form['#currencies']) == 1) {
    $currency = current($form['#currencies']);
    $node->cid = $currency->nid;
  }
  //set the currency if there's only one to choose from, or it is given in the node
  if (isset($node->cid)) {
    if ($form['#currencies'][$node->cid]) {
      $form['cid'] = array(
        '#type' => 'hidden',
        '#value' => $node->cid,
      );
    }
    else {
      drupal_set_message(t('Given currency id is not valid: @id', array('@id' => $node->cid)), 'warning');
    }
  }
  else {
    $form['cid'] = array(
      '#type' => 'select',
      '#options' => mc_node_select_options($form['#currencies'], t('Choose currency...')),
      '#title' => t('Currency'),
      '#description' => t('The node ID of the currency'),
      '#weight' => 0,
      '#element_validate' => array('mc_validate_cid')
    );
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Reason for exchange'),
    '#default_value' => isset($node->title) ? $node->title : '',
    '#element_validate' => array('mc_validate_title'),
    '#required' => TRUE,
    '#weight' => 3,
    '#size' => 35
  );
  $form['payer_uid'] = array(
    '#type' => 'textfield',
    '#title' => t('Account to be debited'),
    '#default_value' => isset($node->payer_uid) ? $node->payer_uid : '',
    '#element_validate' => array('mc_validate_trader'),
    '#weight' => 6
  );
  $form['payee_uid'] = array(
    '#type' => 'textfield',
    '#title' => t('Account to be credited'),
    '#description' => t('A username, email, or user ID'),
    '#default_value' => isset($node->payee_uid) ? $node->payee_uid : '',
    '#element_validate' => array('mc_validate_trader'),
    '#weight' => 9
  );
  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#element_validate' => array('mc_validate_quantity'),
    '#default_value' => isset($node->quantity) ? $node->quantity : '',
    '#weight' => 12,
    '#size' => 7,
  );
  $ratings = array('null' => t('Please choose...'));
  if (isset($node->cid)){
    if ($common = get_common_currency_properties(array($form['#currencies'][$node->cid]), 'ratings')) {
      $ratings += $form['#currencies'][$node->cid]->data['ratings'];
    }
  }
  else {
    if ($common = get_common_currency_properties($form['#currencies'], 'ratings')) {
      $ratings += $common;
    }
  }
  $rating = array(
    '#title' => t('Rating'),
    '#description' => t('A numeric value, used cumulatively to rate the payee.'),
    '#weight' => 15
  );
  //if ratings knows the currency it shows as a select widget
  if (count($ratings) > 1) {
    $form['rating'] = $rating + array(
      '#type' => 'select',
      '#default_value' => isset($node->rating) ? $node->rating : NULL,
      '#options' => $ratings,
      '#required' => TRUE,
      '#element_validate' => array('mc_validate_rating'),
    );
  }
  else {
    $form['rating'] = $rating + array(
      '#type' => 'textfield',
      '#default_value' => isset($node->rating) ? $node->rating : NULL,
    );
  }
  $form['state'] = array(
    '#type' => 'radios',
    '#title' => t('State'),
    '#description' => t('Finished exchanges cannot have empty values.'),
    '#default_value' => isset($node->state) ? intval($node->state) : '0', //defaults to 0, or EXCHANGE_STATE_FINISHED
    '#options' => array(
      EXCHANGE_STATE_FINISHED => t('Finished'),
      EXCHANGE_STATE_PENDING => t('Pending'),
      //there is no use case for this, because erased exchanges have no entry in the node table
      //EXCHANGE_STATE_ERASED => t('erased'),
    ),
    '#weight' => 18
  );
  return $form;
}

//returns all currencies
//this could happily be cached
function currencies_load() {
  static $currencies;
  if (!$currencies) {
    $results = db_query("SELECT nid FROM {node} WHERE type = 'currency'");
    while ($nid = db_result($results)) {
      $currencies[$nid] = node_load($nid);
    }
  }
  return $currencies;
}

//takes an array of nodes, with the nid as array keys and returns an array with just the titles
//for preparing form field select options
function mc_node_select_options($nodes, $zero_val = '') {
  $options = array();
  if ($zero_val) {
    $options[] = $zero_val;
  }
  foreach ($nodes as $nid => $node) {
    $options[$nid] = $node->title;
  }
  return $options;
}

/*
 * NOT USED
 */

/*
 * implementation of hook_hook_info()
 * In other words a trigger
 * These triggers are for mcapi-related modules,
 */
function mcapi_hook_info() {
  return array(
    'mcapi' => array(
      'mcapi' => array(
        'created_exchange' => array(
          'runs when' => t('As soon as an exchange is created'),
        ),
        'updated_exchange' => array(
          'runs when' => t('As soon as an exchange is updated'),
        ),
        'deleted_exchange' => array(
          'runs when' => t('As soon as an exchange is updated'),
        ),
      ),
    ),
  );
}
/**
 * Implementation of hook_trigger_name().
 */
function mcapi_mcapi($op, $user) {print_r(func_get_args());
  if (!in_array($op, array('created_exchange', 'updated_exchange', 'deleted_exchange'))) {
    return;
  }
  $aids = _trigger_get_hook_aids('mcapi', $op);
  $context = array(
    'hook' => 'exchanges',
    'op' => $op,
    'user' => $user,
  );
  actions_do(array_keys($aids), $user, $context);
}

/**
 * implementation of hook_form_{form_id}_alter
 */
function mcapi_form_node_delete_confirm_alter(&$form, $form_state) {
  if ($form['#parameters'][2]->type == 'exchange') {
    drupal_set_title(t('Are you sure you want to delete this exchange?'));
    $form['#prefix'] ='<blockquote>'. $form['#parameters'][2]->title .'</blockquote>';
    if ($form['#parameters'][2]->state == EXCHANGE_STATE_PENDING) {
      $form['description']['#value'] = t('The transation had not been confirmed');
    }
    elseif ($form['#parameters'][2]->state == EXCHANGE_STATE_FINISHED) {
      $form['description']['#value'] = t('This exchange was confirmed, so the balances of both users will be affected');
    }
  }
  $form['#redirect'] = 'user';
}

/**
 * implementation of hook_form_{form_id}_alter
 */
function mcapi_form_currency_node_form_alter(&$form, $form_state) {
  //prevent deletion of the last currency
  if (!db_result(db_query("SELECT nid FROM {node} WHERE type = 'currency' LIMIT 1,2"))) {
    $form['buttons']['delete']['#access'] = FALSE;
    $form['buttons']['delete']['#suffix'] = t('This is the only currency and thus cannot be deleted.');
  }
  $form['#redirect'] = 'admin/mc/currencies';
}
