<?php
// $Id$

/*
 * The stats module caches a summary of all the transactions
 * and provides theme callbacks, pages and blocks for displaying them
 *
 * Blocks are defined by naming them in a special config page and then configured in place
 *
 */

/**
 * http://api.drupal.org/api/function/hook_help/6
 */
function mc_stats_help($path) {
  switch($path) {
    case 'admin/mc/stat_blocks':
      return t('Rather than overwhelm the block page with permutations, only the required blocks are be defined here');
  }
}

/**
 * http://api.drupal.org/api/function/hook_menu/6
 */
function mc_stats_menu() {
  $items['admin/mc/stats'] = array(
    'title' => 'Statistics',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_stats_settings_form'),
    'access arguments' => array('configure currencies'),
    'weight' => 5
  );
  $items['exchange_stats'] = array(
    'title' => 'Exchange statistics',
    'description' => 'All available metrics',
    'page callback' => 'exchange_stats',
    'access arguments' => array('view exchange stats'),
    'weight' => 20,
  );
  $items['stats/ajax'] = array(
    'page callback' => 'mc_rebuild_form',
    'access arguments' => array('configure currencies'),
    'type' => MENU_CALLBACK,
    'file' => 'block.admin.inc',
    'file path' => drupal_get_path('module', 'block')
  );
  return $items;
}

function mc_stats_perm(){
  return array(
    'view exchange stats'
  );
}


function mc_stats_block($op = 'list', $delta = 0, $edit = array()) {
  $function = 'mc_stats_block_'.$op;
  return $function($delta, $edit);
}

function mc_stats_block_list($delta) {
  $blocks = array(
    'mc_stat_summary' => array(
      'info' => t('Statistical summary'),
    )
  );
  $descriptions = array_filter(explode("\n", variable_get('mc_stats_block_definitions', '')));
  if (count($descriptions)) {
    foreach ($descriptions as $info) {
      $key = str_replace(' ', '', trim($info));
      $blocks[$key] = array('info' => $info);
    }
  }
  return $blocks;
}

function mc_stats_block_configure($delta) {
  if ($delta == 'mc_stat_summary') return;
  $types = mc_stat_types();
  if (count($_POST)) $defaults = $_POST; //this is for the AJAX
  else $defaults = variable_get('mc_statsblock'.$delta, array('stat_type' => '', 'cid' => NULL));

  $form['cid'] = array(
    '#title' => t('Currency'),
    '#type' => 'select',
    '#options' => array(NULL => t('All in one')) + mc_node_select_options(currencies_load()),
    '#default_value' => $defaults['cid'],
    '#weight' => -1,
    '#ahah' => array(
      'path' => 'stats/ajax',
      'wrapper' => 'block-admin-configure',
      'progress' => array('type' => 'throbber')
    )
  );

  $types = mc_stat_types();
  if (!$defaults['cid']) {
    foreach ($types as $key => $type){
      if (!$type['null_cid']) unset($types[$key]);
    }
  }
  $form['stat_type'] = array(
    '#title' => t('Type of statistic'),
    '#type' => 'select',
    '#options' => mc_node_select_options($types),
    '#default_value' => $defaults['stat_type'],
    '#ahah' => array(
      'path' => 'stats/ajax',
      'wrapper' => 'block-admin-configure',
      'progress' => array('type' => 'throbber')
    )
  );
  $form['limit'] = array(
    '#title' => t('How many to show'),
    '#type' => 'textfield',
    '#default_value' => $defaults['limit'],
    '#weight' => 1,
    '#description' => t('Integer'),
    '#required' => TRUE,
    '#element_validate' => array('mc_validate_integer')
  );

  if (isset($defaults['stat_type'])) {
    foreach ($types[$defaults['stat_type']]['options'] as $fieldname => $options) {
      $form[$fieldname] = array(
        '#title' => $fieldname,
        '#type' => 'select',
        '#default_value' => $defaults[$fieldname],
        '#options' => $options,
      );
    }
  }
  return $form;
}

function mc_stats_block_save($delta, $edit) {
  if ($delta == 'mc_stat_summary') return;
  //set some defaults to prevent warnings
  $edit += array('limit' => 3, 'span' => 'z');
  variable_set('mc_statsblock'. $delta, $edit);
}

function mc_stats_block_view($delta) {
  if ($delta == 'mc_stat_summary') {
    $data = get_global_stats();
    return array(
      'content' => theme('mc_stat_summary_block', $data['top_exchangers'], $data['period_exchanges'], $data['active_users'], $data['user_count'])
    );
  }
  return ;
  //all other blocks have settings
  $settings = variable_get('mc_statsblock'.$delta, NULL);
  if (!isset($settings)) {
    drupal_set_message(t('Block needs configuring: !'.$delta, array('!'.$delta => l($delta, 'admin/build/block/configure/mc_stats/'.$delta))), 'warning');
    return;
  }

  $timecode = substr($stat_type, 0, 6) == 'period' ? $settings['span'] : NULL;

  return array(
    'content' => mc_theme_cache_stat($settings['stat_type'], $settings['limit'], $settings['cid'], $timecode),
  );
}


/**
 * http://api.drupal.org/api/function/hook_theme/6
 * note that there are preprocess functions in inc, file, which is already loaded by the form callback menu items
 */
function mc_stats_theme() {
  $templates_dir = drupal_get_path('module', 'mc_stats') .'/theme';
  return array(
    'top_users' => array(
      'arguments' => array(
        'data' => array(),
        'limit' => 0
      ),
    ),
    'periodic_values' => array(
      'template' => 'periodic_values',
      'path' => $templates_dir,
      'arguments' => array(
        'data' => array(),
        'limit' => 0,
        'period' => ''
      )
    ),
    'mc_stat_summary_block' => array(
      'template' => 'mc_stat_summary_block',
      'path' => $templates_dir,
      'arguments' => array(
        'top_exchangers' => array(),
        'weekly_exchanges' => 0,
        'active_users' => 0,
        'user_count' => 0,
      )
    ),
    'mc_stat_summary' => array(
      'template' => 'mc_stat_summary',
      'path' => $templates_dir,
      'arguments' => array(
        'top_exchangers' => array(),
        'weekly_exchanges' => 0,
        'active_users' => 0,
        'user_count' => 0,
      )
    ),
    'mc_currency_stats' => array(
      'template' => 'mc_currency_stats',
      'path' => $templates_dir,
      'arguments' => array(
        'cid' => 0
      )
    ),
    'mc_stat' => array(
      'template' => 'mc_stat',
      'path' => $templates_dir,
      'arguments' => array(
        'title' => '',
        'content' => ''
      )
    ),
    'mc_stat_cid' => array(
      'arguments' => array(
        'incomes' => array(),
        'expenditures' => 0,
        'volumes' => 0,
        'exchanges' => 0,
        'period_exchanges' => 0,
        'period_volumes' => 0
      )
    ),
    'stats_page' => array(
      'arguments' => array(
        'global_stats' => array(),
        'currencies' => array(),
      )
    ),
  );
}



function mc_stats_nodeapi(&$node, $op) {
  if ($node->type != 'exchange' || !variable_get('mc_live_stats', TRUE)) return;
  switch ($op) {
    case 'update':
    case 'delete':
      mc_cache_set_stats($node->cid);
  }
}
/*
 * implementation of hook 'after_transaction'
 */
function mc_stats_after_transaction($op, $exchanges) {//ddebug_backtrace();
  //assumes all exchanges are the same currency
  $exchange = array_shift($exchanges);
  mc_cache_set_stats($exchange->cid);
}

/*
  * Stats generator
  * calculates a set of basic stats for one currency between two times
  */
function mc_gen_stats($cid = 0, $from = 0, $to = NULL) {
  if (!isset($to)) {
    $to = time() + 1;
  }
  if (!$cid) {
    $cids = implode(',', array_keys(currencies_load()));
  }
  else {
    $cids = $cid;
  }
  //this excludes exchanges with the balancing account
  //Anything involving a member count includes only the active members
  $stats = $incomes = $expenditures = $exchanges = $volume = array();
  $result = db_query("SELECT payer_uid, payee_uid, quantity, changed FROM {mc_exchanges} AS t
    LEFT JOIN {node} AS n ON t.nid = n.nid
    WHERE n.changed > %d AND n.changed < $to
    AND t.cid IN ($cids)
    AND state = %d
    AND NOT t.payer_uid IN (%s) AND NOT t.payee_uid in (%s)",
    array(
      ':since' => $from,
      ':state' => EXCHANGE_STATE_FINISHED,
      ':payer_uid' => variable_get('mc_stats_exclude', 1),
      ':payee_uid' => variable_get('mc_stats_exclude', 1)
    )
  );
  //TODO. Not all of these stats will be needed and will have a performance impact on larger system
  //A better strategy might be to configure which stats to collect
  $exchanges = $yz_period_exchanges = $yW_period_exchanges = $ym_period_exchanges = array();
  if ($cid) {
    $incomes = $expenditures = $volumes = $yz_period_volumes = $yW_period_volumes = $ym_period_volumes = array();
  }

  //iterate through the exchanges, adding stuff up
  while ($t = db_fetch_object($result)) {
    $dayofyear = date('yz', $t->changed);
    $weekofyear = date('yW', $t->changed);
    $monthofyear = date('ym', $t->changed);
    //create the array keys, if needed, annoying but otherwise we get php warnings
    foreach (array('payer_uid', 'payee_uid') as $user_id) {
      if (!isset($exchanges[$t->$user_id])) {
        $exchanges[$t->$user_id] = 0;
        $volumes[$t->$user_id] = 0;
        if (!isset($incomes[$t->$user_id])) {
          $incomes[$t->$user_id] = 0;
        }
        if (!isset($expenditures[$t->$user_id])) {
          $expenditures[$t->$user_id] = 0;
        }
      }
    }
    if (!isset($yz_period_exchanges[$dayofyear])) {
      $yz_period_exchanges[$dayofyear] = 0;
      $yz_period_volumes[$dayofyear] = 0;
    }
    if (!isset($yW_period_exchanges[$weekofyear])) {
      $yW_period_exchanges[$weekofyear] = 0;
      $yW_period_volumes[$weekofyear] = 0;
    }
    if (!isset($ym_period_exchanges[$monthofyear])) {
      $ym_period_exchanges[$monthofyear] = 0;
      $ym_period_volumes[$monthofyear] = 0;
    }
    //now start adding up
    $exchanges[$t->payee_uid] ++;
    $exchanges[$t->payer_uid] ++;
    $yz_period_exchanges[$dayofyear]++;
    $yW_period_exchanges[$weekofyear]++;
    $ym_period_exchanges[$monthofyear]++;
    if (!$cid) continue;

    $incomes[$t->payee_uid] += $t->quantity;
    $expenditures[$t->payer_uid] += $t->quantity;
    $volumes[$t->payee_uid] += $t->quantity;
    $volumes[$t->payer_uid] += $t->quantity;
    $yz_period_volumes[$dayofyear] += $t->quantity;
    $yW_period_volumes[$weekofyear] += $t->quantity;
    $ym_period_volumes[$monthofyear] += $t->quantity;
    //to these could also be added weekly and monthly exchanges and volumes
  }
  if (!count($exchanges)) {
    drupal_set_message('no stats...');
    return array();
  }

  //all of these are stored in DESC order
  arsort($exchanges);
  krsort($yz_period_exchanges);
  krsort($yW_period_exchanges);
  krsort($ym_period_exchanges);
  $stats = compact('exchanges', 'z_period_exchanges', 'yW_period_exchanges', 'ym_period_exchanges');
  if (!$cid) {
    return $stats;
  }
  arsort($incomes);
  arsort($expenditures);
  arsort($volumes);
  krsort($yz_period_volumes);
  krsort($yW_period_volumes);
  krsort($ym_period_volumes);

  return $stats + compact('incomes', 'expenditures', 'exchanges', 'volumes', 'z_period_volumes', 'yW_period_volumes', 'ym_period_volumes');
}

function mc_cache_set_stats($cid = 0) {
  //first set the stats which apply accross all currencies
  $stats = mc_gen_stats();
  foreach ($stats as $type => $data) {
    cache_set('>'.$type, $data);
  }
  //then set stats per currency
  $cids = $cid ? array($cid) : array_keys(currencies_load());
  foreach ($cids as $cid) {
    $stats = mc_gen_stats($cid);
    foreach ($stats as $type => $data) {
      cache_set($cid .'>'.$type, $data);
    }
  }
}

//shows all the stats (for a given period)
function exchange_stats() {
  $cids = array_keys(currencies_load());
  $settings = array('limit' => 5);
  foreach ($cids as $cid) {
    $per_currency[$cid] = theme('mc_currency_stats', $cid);
  }
  $data = get_global_stats();
  $global = theme('mc_stat_summary', $data['top_exchangers'], $data['period_exchanges'], $data['active_users'], $data['user_count']);
  return theme('stats_page', $global, $per_currency);
}

function mc_theme_cache_stat($stat_type, $limit, $cid = NULL, $span = NULL) {
  $data = mc_cache_get_stat($stat_type, $cid, $span);
  if (!count($data)) return;
  if ($limit) {
    //in php5 we can array_slice without losing the keys
    //$data = array_slice($data, 0, $limit);
    $chunks = array_chunk($data, $limit, TRUE);
    $data = $chunks[0];
  }
  //remake the array with useful keys and cut to the limit
  if (isset($span)) {
    array_reverse($data);
    foreach ($data as $key => $value) {
      //user str_split in php5
      $segments[0] = substr($key, 0, 2);
      $segments[1] = substr($key, 2);
      switch($span) {
        case 'yz':
          $time = strtotime('20'. $segments[0] .' + '. $segments[1] .' days');
          break;
        case 'yW':
          $time = strtotime('20'. $segments[0] .' + '. $segments[1] .' weeks');
          $time = t('Week') .date(' W', $time);
          break;
        case 'ym':
          $time = mktime(0,0,0, $segments[1], 0, $segments[0]);
          $time = strftime("%b '%g", $time);
          break;
      }
      $new_intervals[$time] = theme('money', $value, $cid);
    }
    $data = $new_intervals;
  }
  $output = '';
  $types = mc_stat_types();
  if (!count($data)) return;
  return theme($types[$stat_type]['callback'], $data, $limit, $span);
}


//for types see mc_stat_types()
function mc_cache_get_stat($type, $cid = NULL, $date_string = NULL) {
  if ($date_string) {
    $type = $date_string.'_'. $type;
  }
  $cache = cache_get($cid .'>'.$type);
  if (!$cache){
    return array();
  }
  return $cache->data;
}

function theme_top_users($list) {
  $output = array();
  if (count($list)) {
    foreach ($list as $uid => $quant) {
      $output[] = theme('username', user_load($uid)) . ' ('.$quant.')';
    }
  }
  return theme('item_list', $output, NULL, 'ol');
}

//variables includes $global, and $currencies, a nested array of stats grouped by currencies, all preformatted
function theme_stats_page($global_stats, $per_currency){
  $break = '<br style="clear:both" />';
  $output = $global_stats . $break;
  foreach ($per_currency as $cid => $stats) {
    $currency = node_load($cid);
    $output .= '<fieldset style = "float:left"><legend>'.$currency->title.'</legend>';
    $output .= $stats;
    $output .= '</fieldset>';
  }
  return $output . $break;
}

function mc_validate_stats_exclude(&$element, $form_state) {
  $uids = explode(',', $element['#value']);

  foreach (array_filter($uids) as $uid) {
    _mc_check_trader($uid, $element);
  }
}

//configuration page
function mc_stats_settings_form() {
  $form['mc_stats_block_definitions'] = array(
    '#title' => t('Block definitions (one per line)'),
    '#type' => 'textarea',
    '#default_value' => variable_get('mc_stats_block_definitions', ''),
    '#rows' => 6,
    '#description' => t('put a five word description of each required block, then go configure it on the block page'),
  );
  $form['mc_live_stats']  = array(
    '#title' => t('Live Stats'),
    '#type' => 'checkbox',
    '#description' => t('Regenerate stats after every transaction. (Not suitable for larger systems)'),
    '#default_value' => variable_get('mc_live_stats', TRUE),
    '#weight' => -1,
  );
  $form['mc_stats_exclude']  = array(
    '#title' => t('Exclude from stats'),
    '#type' => 'textfield',
    '#description' => t('Any exchange involving these accounts will not be counted in stats.') . ' ' .
      t('Comma separated account numbers.'),
    '#default_value' => variable_get('mc_stats_exclude', 1),
    '#element_validate' => array('mc_validate_stats_exclude'),
    '#weight' => -1,
  );
  if ($GLOBALS['user']->uid == 1) {
    $form['refresh'] = array(
      '#type' => 'submit',
      '#value' => t('Recalculate stats'),
      '#submit' => array('recalc_all')
    );
  }
  $form['#redirect'] = 'admin/build/block';
  return system_settings_form($form);
}

function mc_stat_types() {
  $types = array(
    //the options are assumed to type single select dropdown boxes
    //null_cid is whether the stat type applies with no specified currency.
    'incomes' => array(
      'title' => t('Highest incomes'),
      'callback' => 'top_users',
      'options' => array(
      ),
      'null_cid' => FALSE
    ),
    'expenditures' => array(
      'title' => t('Biggest spenders'),
      'callback' => 'top_users',
      'options' => array(
      ),
      'null_cid' => FALSE
    ),
    'volumes'=> array(
      'title' => t('Exchange volumes'),
      'callback' => 'top_users',
      'options' => array(
      ),
      'null_cid' => FALSE
    ),
    'exchanges'=> array(
      'title' => t('Most exchanges'),
      'callback' => 'top_users',
      'options' => array(
      ),
      'null_cid' => TRUE
    ),
    //these require a graphic to display, and their own
    'period_exchanges' => array(
      'title' => t('Periodic exchanges'),
      'callback' => 'periodic_values',
      'options' => array(
        'span' => array(
          'yz' => 'Day',
          'yW' => 'Week',
          'ym' => 'Month'
        ),
      ),
      'null_cid' => TRUE
    ),
    'period_volumes' => array(
      'title' => t('Periodic volume'),
      'callback' => 'periodic_values',
      'options' => array(
        'span' => array(
          'yz' => 'Day',
          'yW' => 'Week',
          'ym' => 'Month'
        ),
      ),
      'null_cid' => FALSE
    ),
  );
  return $types;
}

function mc_stats_cron() {
  //then if live update is disabled, do it for each currency
  if (!variable_get('mc_live_stats', TRUE)) {
    recalc_all();
  }
}

function mc_rebuild_form() {
  $form = ajax_form_callback();
  //to prevent rendering the form tag itself, since we are replacing only the contents of the form tag
  $form['#printed'] = TRUE;
  //clear the form errors and messages before re-rendering the form
  form_set_error(NULL, NULL, TRUE);
  drupal_get_messages(NULL, TRUE);
  $rendered = drupal_render($form);
  drupal_json($rendered);
}

function recalc_all() {
  mc_cache_set_stats();
  drupal_set_message('The stats have been recalculated');
}


function get_global_stats() {
  //this but requires php5
  $exchanges = mc_cache_get_stat('exchanges', NULL);
  return array(
    'top_exchangers' => array_slice($exchanges, 0, 5, TRUE),//that 5 should be a variable somehow.
    'period_exchanges' => mc_cache_get_stat('period_exchanges', NULL, 'yW'),
    'active_users' => count($exchanges),
    'user_count' => db_result(db_query("SELECT count(uid) FROM {users} WHERE status = 1 AND login > 0"))
  );
}

function mc_stats_enable(){
  recalc_all();
}
