<?php

const CLEARING_CENTRAL_URL = 'http://cxn.org.za';
const CLEARING_CENTRAL_IP = '69.61.35.151';
const TRANSACTION_STATE_HANGING = 'hanging';
const CEN_SUCCESS = 1;//response code

use Drupal\mcapi\Entity\TransactionInterface;
use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Entity\Currency;

/**
 * Implements hook_form_wallet_form_alter().
 * Add the intertrading settings to designated wallets
 */
function mcapi_cc_form_wallet_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $wallet = $form_state->getFormObject()->getEntity();
  if (!$wallet->isIntertrading()) {
    return;
  }
  $used = FALSE;
  foreach ($wallet->getSummaries() as $summary) {
    if ($summary['trades']) {
      $used = TRUE;
      break;
    }
  }
  $settings = \Drupal::keyValue('clearingcentral')->get($wallet->id());

  $form['clearingcentral'] = [
    '#title' => t('Clearing Central service'),
    '#type' => 'details',
    '#open' => !$used,
    'curr_id' => [
      '#title' => t('Currency used for intertrading'),
      '#type' => 'mcapi_currency_select',
      '#multiple' => FALSE,
      '#disabled' => $used,
      '#default_value' => $settings['curr_id']
    ],
    'ex_id' => [
      '#type' => 'textfield',
      '#title' => t('Exchange ID'),
      '#description' => t(
        'Network Identifier in the Community Exchange Network. For example: cen0123. You can check your account at %link.',
        ['%link' => \Drupal::l(t('Clearing Central'), \Drupal\Core\Url::fromUri(CLEARING_CENTRAL_URL))]
      ),
      '#size' => 15,
      '#maxlength' => 7,
      '#disabled' => $used,
      '#default_value' => $settings['login'],
      '#element_validate' => ['ces_exchange_id_validate'],
      '#weight' => 2
    ],
    'ex_pass' => [
      '#title' => t('Password'),
      '#type' => 'textfield',
      '#description' => t('Password of the Community Exchange Network account for this exchange. Leave blank to keep the stored password.'),
      '#size' => 15,
      '#disabled' => $used,
      '#default_value' => $settings['pass'],
      '#weight' => 3
    ]
  ];
  if (!$used) {
    $form['actions']['submit']['#submit'][] = 'mcapi_cc_save_wallet_settings';
  }
}

function ces_exchange_id_validate(&$element, $form_state) {
  if (!preg_match('/[a-zA-Z]{3}[0-9]{4}/', $element['#value'])) {
    $form_state->setError($element, 'Badly formatted login: '.$element['#value']);
  }
}

function mcapi_cc_save_wallet_settings($form, $form_state) {
  $settings = [
    'curr_id' => $form_state->getValue('curr_id'),
    'login' => $form_state->getValue('ex_id'),
    'pass' => $form_state->getValue('ex_pass')
  ];
  \Drupal::keyValue('clearingcentral')
    ->set($form_state->getFormObject()->getEntity()->id(), $settings);
}

/**
 * Implements hook_entity_type_build().
 */
function mcapi_cc_entity_type_build(array &$entity_types) {
  $entity_types['mcapi_transaction']
    ->setFormClass('intertrading', 'Drupal\mcapi_cc\RemoteTransactionForm');
}

/**
 * Implements mcapi hook_mcapi_form_list().
 */
function mcapi_cc_mcapi_form_list() {
  $forms['remotecredit'] = [
    'title' => t('Buy from a remote account'),
    'route' => 'mcapi_cc.remote.credit',
  ];
  return $forms;
}

/**
 * Implements hook_ENTITY_insert().
 * Saves the CC metadata and sends the transaction to clearing central
 */
function mcapi_cc_mcapi_transaction_insert($transaction)  {
  if ($transaction->type->target_id == 'remote') {
    //write the transaction's remote fields
    \Drupal::database()->insert('mcapi_cc')->fields([
      'xid' => $transaction->id(),
      'serial' => $transaction->serial->value,
      'txid' => $transaction->uuid->value,
      'remote_exchange_id' => $transaction->remote_exchange_id,
      'remote_user_id' => $transaction->remote_user_id,
      'remote_user_name' => $transaction->remote_user_name
    ])->execute();
  }
}

/**
 * Convert an internal transaction entity to a Clearing central transaction array
 * @param TransactionInterface $transaction
 * @return array
 */
function mcapi_cc_convert_outwards(TransactionInterface $transaction) {
  $wid = Drupal\mcapi\Exchange::intertradingWalletId();
  $intertrading_settings = \Drupal::keyValue('clearingcentral')->get($wid);
  $currency = Currency::load($intertrading_settings['curr_id']);
  $CcTransaction = [
    'txid' => $transaction->uuid->value,
    'description' => $transaction->description->value,
    'amount' => $currency->format($transaction->worth->value, Currency::DISPLAY_PLAIN)
  ];
  $payer = $transaction->payer->entity;
  $payee = $transaction->payee->entity;

  $keyVal = \Drupal::keyValue('clearingcentral');

  if ($payer->payways->value == Wallet::PAYWAY_AUTO) {
    $settings = $keyVal->get($payer->id());
    $CcTransaction += [
      'seller_nid' => $settings['login'],
      'password' => $settings['pass'],
      'seller_id' => $payee->id(),
      'buyer_nid' => $transaction->remote_exchange_id,//this is the remote id
      'buyer_id' => $transaction->remote_user_id,//this is the remote id
      'outgoing' => 0,//@deprecated
      'credit' => 0
    ];
  }
  elseif ($payee->payways->value == Wallet::PAYWAY_AUTO) {
    $settings = $keyVal->get($payee->id());
    $CcTransaction += [
      'buyer_nid' => $settings['login'],
      'password' => $settings['pass'],
      'buyer_id' => $payer->id(),
      'seller_nid' => $transaction->remote_exchange_id,//this is the remote id
      'seller_id' => $transaction->remote_user_id,//this is the remote id
      'outgoing' => 1,//@deprecated
      'credit' => 1
    ];
  }
  return $CcTransaction;
}

/**
 * Implements hook_ENTITY_load();
 */
function mcapi_cc_mcapi_transaction_load($transactions) {
  foreach ($transactions as $xid => $transaction) {
    if ($transaction->type->target_id != 'remote') {
      return;
    }
    $extra = \Drupal::database()
      ->select('mcapi_cc', 't')
      ->fields('t', ['remote_exchange_id', 'remote_user_id', 'remote_user_name'])
      ->condition('xid', $transaction->id())
      ->execute()->fetchAssoc();
    foreach ($extra as $fieldname => $value) {
      $transaction->{$fieldname} = $value;
    }
  }
}

/**
 *
 * @param type $code
 * @return string
 */
function clearingcentral_lookup_response($code) {
  $codes = [
    0 => t('Unknown error in Clearing Central'),
    CEN_SUCCESS => 'success',
    2 => t('Buyer does not exist (unknown account number)'),
    3 => t('Exchange not registered on Clearing Central'),
    4 => t('Transaction denied ("no funds", over limit, account locked, exchange over deficit limit etc.)'),
    5 => t('faulty data'),
    6 => t('Repeat transaction and so rejected by CC (same TXID submitted)'),
    7 => t('URL error'),
    8 => t('Conversion rate not set'),
    9 => t('Server error (e.g. cannot access db)'),
    10 => t('Password is wrong in settings'),
    11 => t('IP of incoming server not in CC DB'),
    12 => t('No TXID provided (update/delete only)'),
    13 => t('TXID does not exist (update/delete only)'),
    14 => t('Unable to connect to remote server'),
    15 => t('Failed to connect to host or proxy')
  ];
  return $codes[$code];
}


/**
 * Implements hook_ENTITY_TYPE_view_alter().
 * doesn't run for views
 */
function mcapi_cc_mcapi_transaction_view_alter(array &$build, $entity, $display) {
  if ($entity->getEntityTypeId() == 'mcapi_transaction') {
    if ($entity->type->target_id == 'remote') {
      $store = \Drupal::keyValue('clearingcentral');
      if ($store->get($entity->payer->target_id)) {
        $build['payer'] = mcapi_cc_wallet_name($entity->payer);
      }
      elseif($store->get($entity->payee->target_id))  {
        $build['payee'] = mcapi_cc_wallet_name($entity->payee);
      }
    }
  }
}

/**
 * Implements hook entity_build_display()
 * @param type $build
 * @param type $context
 * @see \Drupal\Core\Entity\Entity\EntityViewDisplay::buildMultiple
 *
 * @note if the transaction is coming from views it didn't run hook_mcapi_transaction_load()
 */
function mcapi_cc_entity_display_build_alter(&$build, $context) {
  if ($context['entity']->getEntityTypeId() == 'mcapi_transaction') {
    if ($context['entity']->type->target_id == 'remote') {
      $store = \Drupal::keyValue('clearingcentral');
      if ($store->get($context['entity']->payer->target_id)) {
        $build['payer'] = mcapi_cc_wallet_name($context['entity']->payer);
      }
      elseif($store->get($context['entity']->payee->target_id))  {
        $build['payee'] = mcapi_cc_wallet_name($context['entity']->payee);
      }
    }
  }
}

function mcapi_cc_wallet_name($field_items) {
  $transaction = $field_items->getEntity();
  //the entity may not be fully loaded if we are come via views
  if (!isset($transaction->remote_user_name))  {
    $transactions = [$transaction];
    mcapi_cc_mcapi_transaction_load($transactions);
    $transaction = reset($transaction);
  }
  return [
    '#markup' => t(
      '@name of @exchange',
      [
        '@name'  => $transaction->remote_user_name,
        '@exchange' => \Drupal::keyValue('exchangeNames')->get($transaction->remote_exchange_id)
      ]
    )
  ];
}
