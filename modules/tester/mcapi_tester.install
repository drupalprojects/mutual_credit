<?php


use Drupal\user\Entity\User;
use Drupal\user\Entity\Role;
use Drupal\mcapi\Exchanges;
use Drupal\mcapi\Entity\Transaction;
use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Entity\Currency;
use Drupal\mcapi_exchanges\Entity\Exchange;
use Drupal\taxonomy\Entity\Term;

function mcapi_tester_install() {
  if (\Drupal::CurrentUser()->id() == 0) {//drush runs as user 0 but that buggers things up
    \Drupal::CurrentUser()->setAccount(User::load(1));
  }

  $terms = array('Transport', 'Food', 'Care', 'Learning', 'Home', 'Leisure');
  foreach ($terms as $term_name) {
    Term::create(array(
      'vid' => 'categories',
      'name' => $term_name,
    ))->save();
  }


  //now
  $batch = [
    'title' => t('Creating demo accounting data'),
    'operations' => [
      ['mcapi_tester_make_users', 26],//should make wallets as well
    ]
  ];
  

  if (\Drupal::moduleHandler()->moduleExists('mcapi_exchanges')) {
    $batch['operations'][] = ['multiple_exchanges'];
  }
  //make some transactions within the exchanges.
  $batch['operations'][] = ['mcapi_tester_make_transactions', 100];
  $batch['operations'][] = ['mcapi_tester_make_transactions', 100];

  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('front', 'exchanges')->save();

  \Drupal::configFactory()
    ->getEditable('views.settings')
    ->set('ui.show.sql_query.enabled', 1)
    ->set('ui.always_live_preview', 1)
    ->set('ui.show.advanced_column', 1)
    ->set('ui.show.master_display', 1)
    ->save();
  
  batch_set($batch);
}

function mcapi_tester_modules_installed($modules) {
  if (in_array('mcapi_exchanges', $modules)) {
    mcapi_tester_delete_transactions();
    multiple_exchanges();
    mcapi_tester_make_transactions(200);
  }
}



function multiple_exchanges() {

  $exchange_ids = mcapi_tester_make_exchanges();
die('multiple exchanges not working yet');
return;
  put_users_in_exchanges();
  //make some intertrading transactions
  mcapi_tester_make_transactions(25, TRUE);
  //close the last exchange and disable its currency
  $last_exchange = Exchange::load(end($exchange_ids));
  drupal_set_message('Closing the last exchange: '. ($last_exchange->label()));
  $last_exchange->set('status', 0);
  $last_exchange->save();
}

/**
 * implements hook_uninstall().
 *
  FieldStorageConfig::load('mcapi_transaction.categories')->delete();
 
 db_delete('config')->condition(
   'name',
   [
     'block.block.systemhelp',
     'field.storage.mcapi_transaction.categories',
     'mcapi.type.test',
     'mcapi_1stparty.editform.test1',
     'mcapi_1stparty.editform.test2',
     'mcapi_1stparty.editform.test3',
     'taxonomy.vocabulary.categories',
     'user.role.admin',
     'field.field.mcapi_transaction.mcapi_transaction.categories',
     'user.role.helper',
     'user.role.ladmin',
     'user.role.manager',
     'user.role.member'
   ],
   'IN'
 )->execute();
 \Drupal::configFactory()->getEditable('core.extension')
  ->clear("module.mcapi_tester")
  ->save();
 foreach user:loadMultiple()
  drupal_flush_all_caches();
 */
function mcapi_tester_uninstall() {

  //in case drush is running
  \Drupal::CurrentUser()->setAccount(User::load(1));

  //should delete automatically
  foreach (\Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties(array('vid' => 'categories')) as $term) {
    $term->delete();
  }


  module_load_install('mcapi_tester');
  mcapi_tester_delete_transactions();

  //delete test wallets
  //foreach (Wallet::loadMultiple() as $wallet) {
  //  if ($wallet->id() < 3) continue;
  //  $wallet->delete();//all users' wallets are now 'unused' so will be deleted also
  //}

  //delete test users
  foreach (\Drupal\user\Entity\User::loadMultiple() as $user) {
    if ($user->id() < 2) continue;
    $user->delete();//all users' wallets are now 'unused' so will be deleted also
  }

  if (\Drupal::moduleHandler()->moduleExists('mcapi_exchanges')) {
    //delete all exchanges except the first
    foreach (Exchange::loadMultiple() as $exchange) {
      if ($exchange->id() == 1)continue;
      $exchange->status->setValue(FALSE);//necessary?
      $exchange->save();
      $exchange->delete();//their intertrading wallets should go automatically
    }
  }

  foreach (Currency::loadMultiple() as $currency) {
    if ($currency->weight > 3) {
      $currency->delete();
    }
  }
  Drupal\field\Entity\FieldStorageConfig::load('mcapi_transaction.categories')->delete();

 db_delete('config')->condition(
   'name',
   [
     'block.block.systemhelp',
     'field.storage.mcapi_transaction.categories',
     'mcapi.type.test',
     'mcapi_1stparty.editform.test1',
     'mcapi_1stparty.editform.test2',
     'mcapi_1stparty.editform.test3',
     'taxonomy.vocabulary.categories',
     'user.role.admin',
     'field.field.mcapi_transaction.mcapi_transaction.categories',
     'user.role.helper',
     'user.role.ladmin',
     'user.role.manager',
     'user.role.member'
   ],
   'IN'
 )->execute();
 \Drupal::configFactory()->getEditable('core.extension')
  ->clear("module.mcapi_tester")
  ->save();
  drupal_flush_all_caches();

  field_purge_batch(5);
}

/**
 * implements hook_modules_uninstalled() for module mcapi_exchanges, if installed
 */
function mcapi_exchanges_uninstall() {
  //delete all transactions
  mcapi_tester_delete_transactions();
  //delete all the provided currencies
  foreach (Currency::loadMultiple(array('pp', 'mm', 'ss', 'jj')) as $currency) {
    $currency->delete();
  }
  //delete all exchanges except 1

  if (\Drupal::moduleHandler()->moduleExists('mcapi_exchanges')) {
    foreach (Exchange::loadMultiple() as $exchange) {
      if ($exchange->id() > 1) {
        $exchange->delete();
      }
    }
  }
  put_users_in_exchanges();
  drupal_set_message('Removed all testing currencies and exchanges.');
}

function mcapi_tester_delete_transactions() {
  $storage = \Drupal::EntityManager()->getStorage('mcapi_transaction');
  $transactions = $storage->loadByProperties(array('type' => 'test'));
  $storage->delete($transactions);
}

/**
 * create some exchanges with different names, each with ONE currency
 * each argument is the name of an exchange.
 * N.B. each exchange will have its own intertrading wallet
 *
 * @return array
 *   the ids of the newly created exchanges
 */
function mcapi_tester_make_exchanges() {
  $names = array(
    'Pluto' => 'Pluto Pesos',
    'Mars' => 'Martian Moolah',
    'Saturn' => 'Saturnine Schillings',
    'Jupiter' => 'Jovial Jewels'
  );
  $user1 = User::load(1);
  $w = 4;//because 3 currencies are already provided
  //this is less code and less maintainance than providing config files
  foreach ($names as $exchange_name => $currname) {
    $first = substr($currname, 0, 1);
    $id = strtoLower($first.$first);
    $c = Currency::load($id);
    if (!$c) {
      $props = array(
        'id' => $id,
        'name' => $currname,
        'zero' => rand(0, 1),
        'issuance' => Currency::TYPE_EXCHANGE,
        'deletion' => 1,
        'format' => array($first.$first, '000', ':', '99'),
        'weight' => $w,
        'ticks' => 10*rand(1, 6)
      );
      $c = Currency::create($props);
      $c->save();
    }
    $w++;

    $props = array(
      'name' => $exchange_name,
      'currencies' => array($c->id()),
      'mail' => \Drupal::config('system.site')->get('mail'),
    );
    $e = Exchange::create($props);
    $e->save();
    //for the purposes of testing we put user 1 in every exchange
    mcapi_exchange_join($e->id(), array($user1));
    $ids[] = $e->id();
  }
  return $ids;
}

/**
 * Create up to 26 users and put them EACH IN ONE exchange
 * Note that users will have a wallet created automatically according to the wallet settings
 *
 * @param integer $num
 *   the number of users to create, max 26
 * @param array $exchange_ids
 *   the ids of exchanges the new members can join.
 * @return array
 *   the $account->id()s created
 */
function mcapi_tester_make_users($num = 26) {

  //create users
  $first = array('Alice', 'Bobby', 'Carry', 'Dave', 'Ebeneezer', 'Fanny', 'Garry', 'Harry', 'Isa', 'Josephine', 'Kerry', 'Larry', 'Mathieu', 'Nancy', 'Oliver', 'Perry', 'Quentin', 'Ruby', 'Sylvester', 'Trudy', 'Ursula', 'Veronica', 'William', 'Xanadu', 'Yuri', 'Zoe');
  $last = array('Arachnid', 'Boulder', 'Castaway', 'Deathwish', 'Emerald', 'Frogleg', 'Golden', 'Handiman', 'Indignado', 'Janitor', 'Kant', 'Landrover', 'Mandrake', 'Nakomoto', 'Orwell', 'Python', 'Quarkson', 'Rhodes', 'Smythe', 'Trenchfoot', 'Ustinov', 'Victor', 'Wellington', 'X', 'Ypres', 'Zenithson');
  shuffle($last);
  for ($i = 0; $i < $num; $i++) {
    $props = array(
      'name' => $first[$i] .' '. $last[$i],
      'mail' => strtolower($first[$i]).'@matslats.net',
      'pass' => 'a',
      'status' => 1,
    );
    $u = User::create($props);
    $u->save();
    $uids[] = $u->id();
  }
  return $uids;
}

function put_users_in_exchanges() {
  $manager_role = Role::load('manager');
  $helper_role = Role::load('helper');
  $exchanges = Exchange::loadMultiple();
  $all_exchange_ids = array_keys($exchanges);
  $accounts = User::loadMultiple();
  unset($accounts[0], $accounts[1]);
  $usersperexchange = floor(count($accounts)/count($all_exchange_ids));
  foreach ($accounts as $account) {
    //give the first user in each exchange the manager role and the second the helper
    $memnum = ($account->id() + 1) % $usersperexchange;
    if ($memnum == 0) $account->addRole($manager_role->id());
    elseif ($memnum == 1) $account->addRole($helper_role->id());
    //we'll put the users sequentially into the exchanges so that its easy to guess where they are
    $exchange_id = $all_exchange_ids[$account->id() % $usersperexchange];
    mcapi_exchange_join($exchange_id, array($account));//saves the account
    if ($memnum == 1) {//tell the exchange that it is owned by the manager
      $exchange = Exchange::load($exchange_id);
      $exchange->uid->value = $account->id();
      $exchange->save();
    }
    $uids[] = $account->id();
  }

}

