<?php
/**
 * @file
 * Hook functions for signatures module.
 */

use Drupal\Core\Site\Settings;
use Drupal\Component\Utility\Crypt;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\mcapi_signatures\Signatures;

/**
 * Implements hook_help().
 */
function mcapi_signatures_help($route_name, $route_match) {
  switch ($route_name) {
    case 'mcapi.admin.signatures':
      return implode(' ', [
        t('Each transaction type determines the initial workflow state of the transaction.'),
        t('Any types here with at least one checkbox will override that state and put the transaction into pending state'),
        t("When all of the specified relatives have signed the transaction moves automatically into 'finished' state."),
      ]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 *
 * Alter the start_state of transaction types according to this module settings.
 */
function mcapi_signatures_mcapi_type_load($entities) {
  foreach ($entities as $entity) {
    $signatory_relatives = $entity
      ->getThirdPartySetting('mcapi_signatures', 'signatures');
    if (!empty($signatory_relatives)) {
      $entity->start_state = 'pending';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Add the signatures to a new transaction object and sign for the current user.
 *
 * @note Signatures are added here and saved along with the transaction in
 * mcapi_signatures_mcapi_transaction_insert()
 */
function mcapi_signatures_mcapi_transaction_presave($transaction) {
  // The start state has already been set in transaction::validate.
  if ($transaction->state->target_id == 'pending' && $transaction->isNew()) {
    // Sign by the the current user.
    \Drupal::service('mcapi.signatures')
      ->setTransaction($transaction)
      ->addSignatures()
      ->sign();
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 *
 * Put the signatories into the transaction entity.
 */
function mcapi_signatures_mcapi_transaction_load($entities) {
  Signatures::load($entities);
}

/**
 * Implements mcapi hook_ENTITY_delete().
 *
 * This doesn't happen with the undo action, which merely changes the state.
 * Delete the signature data when a transaction is deleted.
 */
function mcapi_signatures_mcapi_transaction_delete($transaction) {
  \Drupal::service('mcapi.signatures')
    ->setTransaction($transaction)
    ->delete();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Writes the signatures after the transaction is inserted.
 *
 * @todo delete the mail sending when rules becomes available
 */
function mcapi_signatures_mcapi_transaction_insert($transaction) {
  if ($transaction->state->target_id == 'pending' && !$transaction->parent->value && $transaction->isNew()) {
    \Drupal::service('mcapi.signatures')
      ->setTransaction($transaction)
      ->insert();

    // Temp until rules module works - always  send the notification
    // This should be configurable by transaction type.
    foreach (\Drupal::service('mcapi.signatures')->setTransaction($transaction)->waitingOn() as $uid) {
      $account = User::load($uid);
      $options = ['langcode' => $account->getPreferredLangcode()];
      $message = \Drupal::service('plugin.manager.mail')->mail(
        'mcapi_signatures',
        'signhere',
        $account->getEmail(),
        $account->getPreferredLangcode(),
        [
          'recipient' => $account,
          'transaction' => $transaction,
          'subject' => t('Awaiting your signature...'),
          'body' => [
            t('Hi [user:name],', [], $options),
            t("A transaction is awaiting your signature on [site:name].", [], $options),
            "[xaction:sentence]",
            t("Login and sign it with one click:", [], $options),
            "[signhere]"
          ]
        ]
      );
      if ($message['result']) {
        \Drupal::service('logger.channel.mcapi')->notice(
          'Mailed %name to sign transaction @num',
          ['%name' => $account->getUsername(), '@num' => $transaction->serial->value]
        );
      }
    }

  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Rewrites the signatures after the transaction is updated.
 */
function mcapi_signatures_mcapi_transaction_update($transaction) {
  if (isset($transaction->signatures) && !$transaction->parent->value) {
    \Drupal::service('mcapi.signatures')
      ->setTransaction($transaction)
      ->update();
  }
}

/**
 * Implements hook_theme().
 */
function mcapi_signatures_theme() {
  $items['mcapi_signatures'] = [
    'template' => 'mcapi_signatures',
    'variables' => [
      'transaction' => NULL,
    ],
  ];
  return $items;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Show the signatures on the transaction certificate.
 */
function mcapi_signatures_mcapi_transaction_view(array &$build, $transaction, $display, $view_mode) {
  if ($view_mode == 'certificate' && isset($transaction->signatures) && in_array('mcapi_signatures', $display->getComponents())) {
    $build['mcapi_signatures'] = [
      '#theme' => 'mcapi_signatures',
      '#transaction' => $build['#mcapi_transaction'],
      '#attached' => [
        'library' => [
          // @todo check this is included and doesn't overwrite
          'css' => 'mcapi_signatures/signatures.css',
        ],
      ],
    ];
    $build['watermark'] = t('Pending');
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mcapi_signatures_entity_extra_field_info() {
  $fields = [];
  if (\Drupal::moduleHandler()->moduleExists('views')) {
    $fields['user']['user']['display'] = [
      'waiting_on_me' => [
        'label' => t('Requests to sign'),
        'description' => t("Transactions awaiting the user's signature"),
        'weight' => 3,
      ],
      'waiting_on_others' => [
        'label' => t('Signatures awaited'),
        'description' => t("Transactions awaiting others' signatures"),
        'weight' => 3,
      ],
    ];
  }
  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * For user entities. Show the pending transactions on the user.
 */
function mcapi_signatures_user_view(array &$build, $account, $display) {
  if ($info = $display->getComponent('waiting_on_me')) {
    $build['mcapi_signatures']['#attached']['library'] = ['mcapi_signatures/signatures'];
    $build['mcapi_signatures']['#weight'] = $info['weight'];
    $build['mcapi_signatures']['my_sig_needed'] = views_embed_view(
      'mcapi_pending_signatures',
      'my_sig_needed',
      $account->id()
    );
  }
  if ($info = $display->getComponent('waiting_on_others')) {
    $build['mcapi_signatures']['#attached']['library'] = ['mcapi_signatures/signatures'];
    $build['mcapi_signatures']['#weight'] = $info['weight'];
    $build['mcapi_signatures']['other_sig_needed'] = views_embed_view(
      'mcapi_pending_signatures',
      'other_sig_needed',
      $account->id()
    );
  }
}

/**
 * Implements template_preprocess_THEMEHOOK().
 */
function template_preprocess_mcapi_signatures(&$vars) {
  foreach ($vars['transaction']->signatures as $uid => $signed) {
    $account = User::load($uid);
    $vars['signatures'][$uid] = [
      'account' => $account,
      'class' => 'signature ' . (empty($signed) ? 'pending' : 'signed'),
      'name' => $account->getDisplayName(),
    ];
  }
}

/**
 * Add settings to the accounting miscellaneous settingns page.
 */
function mcapi_signatures_form_mcapi_misc_settings_alter(&$form, $form_state) {
  $form['pending_messages'] = [
    '#title' => t('Remind users to sign transactions on every page.'),
    '#type' => 'checkbox',
    '#default_value' => \Drupal::Config('mcapi_signatures.settings')->get('pending_messages'),
    '#weight' => 5,
  ];
  $form['action']['submit']['#submit'][] = 'mcapi_signature_settings_submit';
}

/**
 * Setting form submission callback.
 */
function mcapi_signature_settings_submit($form, &$form_state) {
  \Drupal::configFactory()
    ->get('mcapi_signatures.settings')
    ->set('pending_messages', $form_state->getValue('pending_messages'));
}

/**
 * Implements hook_mail().
 */
function mcapi_signatures_mail($key, &$message, $params) {
  if ($key == 'signhere') {
    $message['subject'] = $params['subject'];
    $data = [
      'xaction' => $params['transaction'],
      'user' => $params['recipient']
    ];
    // Now this special replacement.
    $signhere = Url::fromRoute(
      'mcapi.signatures.anonsign',
      [
        'uid' => $params['recipient']->id(),
        'serial' => $params['transaction']->serial->value,
        'hash' => mcapi_signature_hash($params['recipient']->id(), $params['transaction']->serial->value),
      ],
      ['absolute' => TRUE]
    );
    foreach ($params['body'] as $delta => $paragraph) {
      $paragraph = str_replace('[signhere]', $signhere->toString(), $paragraph);
      $message['body'][] = \Drupal::token()->replace($paragraph, $data);
    }
  }
}

/**
 * Helper function to get a hash corresponding to a user and a transaction.
 *
 * @param int $uid
 *   A user ID.
 * @param int $serial
 *   A transaction serial number.
 */
function mcapi_signature_hash($uid, $serial) {
  return Crypt::hmacBase64(
    $uid . $serial,
    Settings::getHashSalt()
  );

}
