<?php

/*
 * @file
 * Hooks for mcapi_exchanges.module
 */

use Drupal\mcapi_exchanges\Exchanges;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_entity_info_alter().
 *
 * add new handlers for the Exchange entity.
 *
 * @param Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function mcapi_exchanges_entity_type_alter(array &$entity_types) {
  $path = 'Drupal\mcapi_exchanges\Overrides\\';
  $entity_types['mcapi_currency']->setListbuilderClass($path.'CurrencyListBuilderExchanges');
  if (mcapi_exchanges_segregated()) {
    $entity_types['user']->setFormClass('register', $path.'ExchangeUserRegisterForm');
  }
  //$entity_types['user']->setAccessClass($path.'UserAccessControlHandler');
  $entity_types['mcapi_wallet']->setAccessClass($path.'ExchangesWalletAccessControlHandler');

  if (\Drupal::moduleHandler()->moduleExists('contact')) {
    $entity_types['group']->setFormClass('contact', 'Drupal\mcapi_exchanges\Form\Contact');
    $entity_types['group']->setLinkTemplate('contact-form', '/exchange/{mcapi_exchange}/contact');
  }
  $entity_types['group']->setFormClass('enable', 'Drupal\mcapi_exchanges\Form\ExchangeEnableConfirm');
  $entity_types['group']->setFormClass('disable', 'Drupal\mcapi_exchanges\Form\ExchangeDisableConfirm');
  $entity_types['group']->setLinkTemplate('enable-form', '/exchange/{group}/enable');
  $entity_types['group']->setLinkTemplate('disable-form', '/exchange/{group}/disable');
  $entity_types['group']->setAccessClass($path.'ExchangeAccessControlHandler');


}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * Remove the masspay route because this module replaces it.
 *
 * @param array $definitions
 */
function mcapi_exchanges_menu_links_discovered_alter(&$definitions) {
  //unset($items['mcapi.exchange.masspay']);
}

/**
 * Implements hook_menu_local_tasks_alter();
 */
function mcapi_exchanges_local_tasks_alter(&$definitions) {
  // move the user/register tab to the group
  unset($definitions['user.register']);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mcapi_exchanges_entity_extra_field_info() {
  $extra['group']['exchange']['display'] = [
    'members_link' => [
      'label' => t('Link to members'),
      'description' => t('People involved in the exchange'),
      'weight' => 1,
    ],
    'transactions_link' => [
      'label' => t('link to transactions'),
      'description' => t('Transactions governed by the exchange'),
      'weight' => 1,
    ],
    'trade_stats' => [
      'label' => t('Trading stats'),
      'description' => t('A short table of trading stats per currency'),
      'weight' => 1,
    ]
  ];
  return $extra;
}

/**
 * Implements hook_group_view().
 *
 * Adds extra_fields to the exchange.
 *
 * @todo access control on these components
 */
function mcapi_exchanges_group_view(&$build, $entity, $display) {
  if ($info = $display->getComponent('members_link')) {
    $build['members_link'] = [
      '#type' => 'link',
      '#title' => t('Show @count members', ['@count'=> count(Exchanges::memberIds($entity))]),
      '#url' => Url::fromUri('base://group/' . $entity->id() . '/members', []),
      //maybe instead put a view with the last five members here
      '#options' => [
        'attributes' => ['title' => "This view doesn't exist yet @todotim"]
      ],
      '#weight' => $info['weight']
    ];
  }
  if ($info = $display->getComponent('transactions_link')) {
    $transaction_ids = Exchanges::contentIds($entity, 'mcapi_transaction');
    $build['transactions_link'] = [
      '#type' => 'link',
      '#title' => t('Show @count transactions', ['@count' => count($transaction_ids)]),
      '#url' => Url::fromUri('base://exchange/' . $entity->id() . '/transactions', []),
      //@todo maybe instead put a view with the last five members here
      '#options' => [
        'attributes' => ['title' => "This view doesn't exist yet @todotim"]
      ],
      '#weight' => $info['weight']
    ];
  }
  if ($info = $display->getComponent('trade_stats')) {
    //todo consider doing this with views and new view fields
    $build['trade_stats'] = [
      '#theme' => 'exchange_trade_stats',
      '#weight' => $info['weight'],
      '#exchange' => $entity,
      '#currencies' => $entity->currencies->referencedEntities()
    ];
  }
}

/**
 * Implements hook_mcapi_transaction_validate().
 *
 * Check that intertrading wallet is being used correctly.
 */
function _mcapi_exchanges_mcapi_transaction_validate($transaction) {
  if ($transaction->payer->entity->payways->value == Wallet::PAYWAY_AUTO || $transaction->payee->entity->payways->value == Wallet::PAYWAY_AUTO) {
    // There MUST be a child transaction also with an intertrading wallet in a different exchange.
    foreach ($transaction->children as $child) {
      if ($child->payer->entity->payways->value == Wallet::PAYWAY_AUTO || $child->payee->entity->payways->value == Wallet::PAYWAY_AUTO) {
        drupal_set_message('intertrading transaction looks good', 'warning');
        continue 2;
      }
    }
    throw new \Exception('Intertrading wallet error');
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function mcapi_exchanges_theme_registry_alter(&$items) {
  $items['1stpartyform']['preprocess functions'][] = 'mcapi_exchanges_1stparty_preprocess';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * In the unlikely event that a wallets holder is not in any exchanges put a
 * warning on the wallet limits form.
 */
function mcapi_exchanges_form_wallet_limits_form_alter(&$form, $form_state) {
  $wallet = $form_state->getFormObject()->wallet;
  if (!Exchanges::memberOf($wallet->getHolder())) {
    drupal_set_message(t("Wallet %name is not currently in any exchange so can't be used", ['%name' => $wallet->label()]));
  }
}

/**
 * Limit payer and payee wallets to the same exchange.
 *
 * @todo
 */
function __mcapi_exchanges_form_transaction_transition_edit_form(&$form, &$form_state) {
  //payer and payee wallets MUST be limited to the same exchange as the transaction
  foreach (['payer', 'payee'] as $wallet) {
    if (array_key_exists($wallet, $form)) {
      //in fact this might all be done with entity_autocomplete
      //$form[$wallet]['#exchanges'] = [$transaction->exchange->target_id];
    }
  }
}

/**
 * Implements hook_theme().
 */
function mcapi_exchanges_theme() {
  return [
    'exchange_trade_stats' => [
      'template' => 'exchange_trade_stats',
      'variables' => [
        'exchange' => NULL,
        'currencies' => []
      ]
    ]
  ];
}

/**
 * default theme preprocessor for 'exchange_trade_stats'
 */
function template_preprocess_exchange_trade_stats(&$vars) {
  foreach ($vars['currencies'] as $currency) {
    $stats = $currency->stats();
    $vars['stats'][$currency->id] = [
      'trades' => $stats->trades,
      'volume' => $stats->volume,
      'scope' => count(Exchanges::getExchangesUsing($currency->id()))
    ];
  }
  //we could also have a breakdown of transactions by category
  //could mention whether it is exclusive to the given exchange (local) or used by others (shared)
  //number of different traders
  //volume by month
}

function mcapi_exchange_mail($key, &$message, $params) {
  //$key always equals 'contact' from Drupal\mcapi_exchanges\Form\Contact
  return [
    'subject' => t(
      'Message from @site_name',
      ['@site_name' => \Drupal::config('system.site')->get('site.name')]
    ),
    'body' => [
      t(
        '@sender (@mail) wrote to you.',
        ['@sender' => $params['sender']->name, '@mail' => $params['sender']->mail]
      ),
      Drupal\Core\Mail\MailFormatHelper::htmlToText($params['message'])
    ]
  ];
}

function mcapi_exchange_mail_alter($message) {
  switch ($message['key']) {
    case 'register_pending_approval':
      //divert the email to the exchange administrator account
      debug(array_keys($message), '@todo program sending this message');
      debug(array_keys($message['params']));
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter()
 */
function mcapi_exchanges_field_widget_worth_form_alter(&$element, $form_state, $context) {
  $element['#allowed_curr_ids'] = array_keys(Exchanges::currenciesAvailableToUser(\Drupal::currentUser()));
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Limits all wallet entityQueries to the exchanges of the current user OR the
 * wallets of the current user.
 *
 * @todo
 */
function mcapi_exchanges_query_whichWallets_alter(\Drupal\Core\Database\Driver\mysql\Select $query) {
  $account = \Drupal::currentUser();
  $exchanges = Exchanges::userInExchanges($account);

  if ($exchanges and $wids = Exchanges::walletsInExchange(array_keys($exchanges))) {
    //echo 'mcapi_exchanges_query_whichWallets_alter';print_r($wids);
    $query->condition('w.wid', $wids, 'IN');
  }
  else {
    //if the holder isn't in an exchange, or has no compatiable wallet, the query returns nothing
    $query->condition('w.wid', 0);
  }
}

/**
 * Probably not needed code
 */

/**
 * Implements hook_FORM_first_party_editform_ALTER().
 *
 * limit certain firstparty forms to certain exchanges
 * NOT USED TOO COMPLEX NOT NEEDED
 */
function __mcapi_exchanges_form_first_party_editform_alter(&$form, FormStateInterface $form_state) {
  $configEntity = $form_state->getFormObject()->getEntity();
  //ensure the worth field is showing all possible currencies ()
  $exchange = $configEntity->exchange ?
    entity_load('mcapi_exchange', $configEntity->exchange) :
    NULL;

  if ($exchange) {//for the exchange
    foreach($exchange->currencies->referencedEntities() as $entity) {
      $form['fieldapi_presets']['worth']['preset']['#allowed_curr_ids'][] = $entity->id();
    }
    $form['partner']['preset']['#description'] = t("Wallet holder must be in, or be, an exchange '%name'.", ['%name' => $exchange->label]);
  }
  $form['menu']['#states'] = [
    'visible' => [
      ':input[name="exchange"]' => ['value' => ''],
    ]
  ];

  //since this is an entity form, we need to get the $config from the $entity.
  $config = $form_state->getBuildInfo()['callback_object']->getEntity();
  //$account = User::load(\Drupal::currentuser()->id());
  $options = [];


  $exchanges = \Drupal::currentUser()->hasPermission('manage mcapi') ?
    Exchange::loadMultiple() :
    Exchange::loadMultiple();
  debug('Exchanges field needs to be limited to only the exchanges of which the current user is a member ', 'warning');
    /* transaction forms might go in exchange groups? */
  foreach ($exchanges as $id => $entity) {
    $options[$id] = $entity->label();
  }
  $form['exchange'] = [
    '#title' => t('Restricted to exchange:'),
    '#type' => 'select',
    '#empty_option' => t('- All -'),
    '#empty_value' => '',
    '#options' => $options,
    '#default_value' => $config->getThirdPartySetting('mcapi_exchanges', 'exchange'),
    '#weight' => 10,
  ];

  $form['actions']['submit']['#submit'][] = 'mcapi_exchanges_first_party_editform_submit';
}

/**
 * Form submit callback
 *
 * @note could be moved to another file.
 */
function mcapi_exchanges_first_party_editform_submit(&$form, &$form_state) {
  $form_state->getFormObject()->getEntity()->setThirdPartySetting('mcapi_exchanges', 'exchange', $form_state->getValue('exchange'));
  $form_state->getFormObject()->getEntity()->save();
}

/**
 * Determine whether users can join more than one exchange.
 *
 * @return boolean
 */
function mcapi_exchanges_segregated() {
  return TRUE;
}

/**
 * Field api default value callback.
 *
 * Populate the currencies entityref field (on exchange entity).
 * Using the currencies in exchanges the current user is in.
 *
 * @param ContentEntityInterface $exchange
 *   the exchange
 *
 * @param array $field_definition
 *
 * @return string[]
 *   currency ids
 *
 * @todo this might not make sense usability wise;
 */
function mcapi_exchanges_default_currency_id(ContentEntityInterface $exchange, $field_definition) {
  $output = [];
  // Default currencies are the currencies of the exchanges of which the current user is a member.
  if ($exchanges = Exchanges::memberOf(NULL, TRUE)) {
    foreach (Exchanges::exchangeCurrencies($exchanges) as $currency) {
      $output[] = $currency->id();
    }
  }
  return $output;
}

