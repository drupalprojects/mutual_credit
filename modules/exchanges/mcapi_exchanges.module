<?php

/*
 * 
 * @todo see deprecated og functions if they can be used 
 * _og_group($group_type, $gid, $values = array(), $save_created = TRUE)
 *   subscribe an entity to a group
 * _og_ungroup()
 * _og_get_entity_groups($entity_type = 'user', $entity = NULL, $states = array(OgMembershipInterface::STATE_ACTIVE), $field_name = NULL)
 *   Get the groups an entity is associated with.
 * Og::getEntityGroups(EntityInterface $entity, array $states = [OgMembershipInterface::STATE_ACTIVE], $field_name = NULL)
 *   Get the group IDs of all the groups a user is an approved member of
 * Og::isMember(EntityInterface $group, EntityInterface $entity, $states = [OgMembershipInterface::STATE_ACTIVE])
 *   Return whether a group content belongs to a group
 */

use Drupal\mcapi\Exchange;
use Drupal\mcapi_exchanges\Exchanges;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;

/**
 * name of the references to og_membership for the group-type mcapi_exchange
 * as opposed to the og normal name for it, DEFAULT_FIELD
 */
const EXCHANGE_OG_FIELD = 'og_exchange_ref';


/**
 * implements hook_entity_info_alter().
 * add new handlers for the Exchange entity
 * @param Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function mcapi_exchanges_entity_type_alter(array &$entity_types) {
  $path = 'Drupal\mcapi_exchanges\Overrides\\';
  $entity_types['mcapi_currency']->setListbuilderClass($path.'CurrencyListBuilderExchanges');
  $entity_types['mcapi_wallet']->setAccessClass($path.'ExchangesWalletAccessControlHandler');
  if (isset($entity_types['firstparty_editform'])) {
    //$entity_types['firstparty_editform']->setListbuilderClass($path.'FirstPartyEditFormListBuilderExchanges');
  }
  if (\Drupal::config('mcapi_exchanges.settings')->get('segregate_exchanges')) {
    $entity_types['user']->setFormClass('join', 'Drupal\mcapi_exchanges\Form\Join');
  }
  if (\Drupal::moduleHandler()->moduleExists('contact')) {
    $entity_types['mcapi_exchange']->setFormClass('contact', 'Drupal\mcapi_exchanges\Form\Contact');
    $entity_types['mcapi_exchange']->setLinkTemplate('contact-form', '/exchange/{mcapi_exchange}/contact');
  }
}

/**
 * implements hook_menu_links_discovered_alter().
 * remove the masspay route because this module replaces it
 * @param array[] $definitions
 */
function mcapi_exchanges_menu_links_discovered_alter(&$items) {
  unset($items['mcapi.exchange.masspay']);
}

function mcapi_exchanges_local_tasks_alter(&$items) {
  if (\Drupal::moduleHandler()->moduleExists('contact')) {
    $items['mcapi.exchange.contact.tab'] = [
      'route_name' => 'entity.mcapi_exchange.contact',
      'title' => 'Contact',
      'base_route' => 'entity.mcapi_exchange.canonical',
      'weight' => 5,
    ];
  }
}


/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_exchanges_entity_extra_field_info() {
  $extra['mcapi_exchange']['mcapi_exchange']['display'] = [
    'wallets' => [
      'label' => t('Wallets'),//this could be configured to show the display mode
      'weight' => 11
    ],
    'members_link' => [
      'label' => t('Link to members'),
      'description' => t('People involved in the exchange'),
      'weight' => 1,
    ],
    'transactions_link' => [
      'label' => t('link to transactions'),
      'description' => t('Transactions governed by the exchange'),
      'weight' => 1,
    ],
    'trade_stats' => [
      'label' => t('Trading stats'),
      'description' => t('A short table of trading stats per currency'),
      'weight' => 1,
    ]
  ];
  return $extra;
}

/**
 * implements hook_mcapi_exchange_view().
 * adds extra_fields to the exchange
 */
function mcapi_exchanges_mcapi_exchange_view(&$build, $entity, $display) {
  if ($info = $display->getComponent('members_link')) {
    $build['members_link'] = [
      '#type' => 'link',
      '#title' => t('Show @count members', ['@count'=> count($entity->memberIds('user'))]),
      '#url' => \Drupal\Core\Url::fromUri('base://exchange/' . $entity->id() . '/members', []),
      //maybe instead put a view with the last five members here
      '#options' => [
        'attributes' => ['title' => "This view doesn't exist yet @todotim"]
      ],
      '#weight' => $info['weight']
    ];
  }
  if ($info = $display->getComponent('transactions_link')) {
    $build['transactions_link'] = [
      '#type' => 'link',
      '#title' => t('Show @count transactions', ['@count' => count($entity->memberIds('mcapi_transaction'))]),
      '#url' => Drupal\Core\Url::fromUri('base://exchange/' . $entity->id() . '/transactions', []),
      //@todo maybe instead put a view with the last five members here
      '#options' => [
        'attributes' => ['title' => "This view doesn't exist yet @todotim"]
      ],
      '#weight' => $info['weight']
    ];
  }
  if ($info = $display->getComponent('trade_stats')) {
    //todo consider doing this with views and new view fields
    $build['trade_stats'] = [
      '#theme' => 'exchange_trade_stats',
      '#weight' => $info['weight'],
      '#exchange' => $entity,
      '#currencies' => $entity->currencies->referencedEntities()
    ];
  }
}

/**
 * implements hook_mcapi_transaction_validate().
 * check that _intertrading wallet is being used correctly.
 * @param array $clusters
 */
function mcapi_exchanges_mcapi_transaction_validate(array $clusters) {
  foreach ($clusters as $transaction) {
echo $transaction->payer->entity->name();
    if ($transaction->payer->entity->name == '_intertrading' || $transaction->payee->entity->name == '_intertrading') {
      //there MUST be a child transaction also with an intertrading wallet in a different exchange.
      foreach ($transaction->children as $child) {
        if ($child->payer->entity->name == '_intertrading' || $child->payee->entity->name == '_intertrading') continue 2;
      }
      throw new \Exception('Intertrading wallet error');
    }
  }
}

/**
 * restrict the wallet fields to the current users' exchanges' wallets
 * @todo this should be done with the entity reference callback
 */
function blah(&$form, &$form_state) {
    $form['partner'] = array(
      '#exchanges' => array_keys(Exchanges::memberOf()),
      '#default_value' => $config->partner['preset']
    ) + $form['partner'];
    //
}

/**
 * implements hook_form_FORM_ID_alter().
 * adds the exchange option to the designed form
 * @todo work out the function name and alter the config schema for this extra variable
 */
function mcapi_exchanges_form_mcapi_transaction_1stparty_form_alter(&$form, &$form_state) {

  $config = $form_state->getFormObject()->config;  $maxes = $wallet_config->get('autoadd');
debug($maxes);
  $maxes['mcapi_exchange:mcapi_exchange'] = 1;
  $wallet_config->set('autoadd', $maxes);
  $wallet_config->save();
  if ($config->getThirdPartySetting('mcapi_exchanges', 'exchange')) {
    debug($form['payer']);
  }
  if (strpos($config->experience['twig'], '{{ intertrade }}') && Exchanges::memberOf(NULL, TRUE, TRUE)) {
    //this checkbox flips between partner_choosers
    $form['intertrade'] = array(
      '#title' => t('Intertrade'),
      '#description' => t('Trade with someone outside your exchange'),
      '#type' => 'checkbox',
      '#default_value' => 0,
    );
    //make a second partner widget and switch between them
    $form['partner']['#states'] = array(
      'visible' => array(
        ':input[name="intertrade"]' => array('checked' => FALSE)
      )
    );
    $form['partner_all'] = $form['partner'];
    $form['partner_all']['#exchanges'] = [];
    $form['partner_all']['#states']['visible'][':input[name="intertrade"]']['checked'] = TRUE;
  }
}

function mcapi_exchanges_theme_registry_alter(&$items) {
  $items['1stpartyform']['preprocess functions'][] = 'mcapi_exchanges_1stparty_preprocess';
}

function mcapi_exchanges_1stparty_preprocess(&$vars) {
  //adjustments for intertrade mode
  //@todo move this to the exchanges module
  if (array_key_exists('intertrade', $tokens)) {// && array_key_exists('partner_all', $form)) {
    $checkbox = mcapi_render_stripped($form['partner_all']);
    $last = key($tokens);//we just iterated through the tokens array
    if (array_key_exists('partner', $tokens)) {
      $tokens['partner'] .= $checkbox;
    }
    else {
      $tokens[$last] .= $checkbox;
    }
  }
}

/**
 * implement hook_FORM_first_party_editform_ALTER().
 *
 */
function mcapi_exchanges_form_first_party_editform_alter(&$form, FormStateInterface $form_state) {
  
  $configEntity = $form_state->getFormObject()->entity;
  //ensure the worth field is showing all possible currencies ()
  $exchange = $configEntity->exchange ?
    entity_load('mcapi_exchange', $configEntity->exchange) :
    NULL;

  if ($exchange) {//for the exchange
    foreach($exchange->currencies->referencedEntities() as $entity) {
      $form['fieldapi_presets']['worth']['preset']['#allowed_curr_ids'][] = $entity->id();
    }
    $form['partner']['preset']['#description'] = $this->t("Wallet holder must be in, or be, an exchange '%name'.", ['%name' => $exchange->label]);
  }
  $form['menu']['#states'] = [
    'visible' => [
      ':input[name="exchange"]' => ['value' => ''],
    ]
  ];

  //since this is an entity form, we need to get the $config from the $entity.
  $config = $form_state->getBuildInfo()['callback_object']->getEntity();
  $account = User::load(\Drupal::currentuser()->id());
  $options = [];


  $exchanges = \Drupal::currentUser()->hasPermission('manage mcapi') ?
    Exchange::loadMultiple() :
    Exchange::loadMultiple();
  drupal_set_message('Exchanges field needs to be limited to only the exchanges of which the current user is a member ', 'warning');
    /* transaction forms might go in exchange groups? */
  foreach ($exchanges as $id => $entity) {
    $options[$id] = $entity->label();
  }
  $form['exchange'] = array(
    '#title' => t('Restricted to exchange:'),
    '#type' => 'select',
    '#empty_option' => t('- All -'),
    '#empty_value' => '',
    '#options' => $options,
    '#default_value' => $config->getThirdPartySetting('mcapi_exchanges', 'exchange'),
    '#weight' => 10,
  );

  $form['actions']['submit']['#submit'][] = 'mcapi_exchanges_first_party_editform_submit';
}

function mcapi_exchanges_first_party_editform_submit(&$form, &$form_state) {
  $form_state->getFormObject()->getEntity()->setThirdPartySetting('mcapi_exchanges', 'exchange', $form_state->getValue('exchange'));
  $form_state->getFormObject()->getEntity()->save();
}


/**
 * implement hook_form_FORM_ID_alter
 * in the unlikely event that a wallets holder is not in any exchanges
 * put a warning on the wallet limits form
 */
function mcapi_exchanges_form_wallet_limits_form_alter(&$form, $form_state) {
  $wallet = $form_state->getFormObject()->wallet;
  if (!Exchanges::memberOf($wallet->getHolder())) {
    drupal_set_message(t("Wallet %name is not currently in any exchange so can't be used", ['%name' => $wallet->label()]));
  }
}


function mcapi_exchanges_form_transaction_transition_edit_form(&$form, &$form_state) {
  //payer and payee wallets MUST be limited to the same exchange as the transaction
  foreach (['payer', 'payee'] as $wallet) {
    if (array_key_exists($wallet, $form)) {
      //in fact this might all be done with entity_autocomplete
      $form[$wallet]['#exchanges'] = [$transaction->exchange->target_id];
    }
  }
}

/**
 * implements hook_FORM_FORM_ID_alter();
 * Add the ticks property to the currency form
 */
function mcapi_exchanges_form_mcapi_currency_form_alter(&$form, $form_state) {
  $currency = $form_state->getFormObject()->getEntity();

  $unit_name = \Drupal::config('mcapi.settings')->get('ticks_name');//this assumes one base currency
  $form['ticks'] = [
    '#title' => t('Currency value, expressed in @units', ['@units' => $unit_name]),
    '#description' => implode(' ', [
      t('Exchange rates are not determined by a free market, but negotiated and fixed.'),
      t('@units are the base units used to convert between currencies.', ['@units' => $unit_name]),
      t('Leave blank if this currency cannot be intertraded.')]),
    '#type' => 'number',
    '#min' => 0,
    '#default_value' => $currency->ticks,
    '#weight' => 6
  ];
}
/**
 * implements hook_form_FORM_ID_alter()
 * add a submit callback to the wallet settings
 */
function mcapi_exchanges_form_mcapi_wallet_settings_form_alter(&$form, $form_state) {
  $form_state->loadInclude('mcapi_exchanges', 'install');
  $form['#submit'][] = 'mcapi_exchanges_check_og_fields';
}

function mcapi_exchanges_theme() {
  return [
    'exchange_trade_stats' => [
      'template' => 'exchange_trade_stats',
      'variables' => [
        'exchange' => NULL,
        'currencies' => []
      ]
    ]
  ];
}

function template_preprocess_exchange_trade_stats(&$vars) {
  $exchange = $vars['exchange'];
  \Drupal::moduleHandler()->loadInclude('mcapi', 'inc', 'templates/theme');
  foreach ($vars['currencies'] as $currency) {
    $currvars = ['currency' => ['#mcapi_currency' => $currency]];
    template_preprocess_mcapi_currency($currvars);
    unset($currvars['currency']);
    $vars['stats'][$currency->id] = $currvars;
    $vars['stats'][$currency->id]['scope'] = count(Exchanges::getExchangesUsing($currency->id()));
  }
  //we could also have a breakdown of transactions by category
  //could mention whether it is exclusive to the given exchange (local) or used by others (shared)
  //number of different traders
  //volume by month
}

function mcapi_exchange_mail($key, &$message, $params) {
  //$key always equals 'contact' from Drupal\mcapi_exchanges\Form\Contact
  return [
    'subject' => t(
      'Message from @site_name', 
      ['@site_name' => \Drupal::config('system.site')->get('site.name')]
    ),
    'body' => [
      t(
        '@sender (@mail) wrote to you.', 
        ['@sender' => $params['sender']->name, '@mail' => $params['sender']->mail]
      ),
      Drupal\Core\Mail\MailFormatHelper::htmlToText($params['message'])
    ]
  ];
}

function mcapi_exchange_mail_alter($message) {
  switch ($message['key']) {
    case 'register_pending_approval':
      //divert the email to the exchange administrator account
      print_R(array_keys($message));
      print_R(array_keys($message['params']));
      die();
  }
}

/**
 * implements hook_form_FORM_ID_alter().
 * adds the segregate_exchanges setting checkbox to the user admin settings form
 */
function mcapi_exchanges_form_user_admin_settings_alter(&$form, $form_state) {
  $form['registration_cancellation']['segregate_exchanges'] = [
    '#title' => t('Every user is a member of one and only one exchange'),
    '#description' => t('Delegates user/register page to groups'),
    '#type' => 'checkbox',
    '#default_value' => \Drupal::config('mcapi_exchanges.settings')->get('segregate_exchanges'),
  ];
  $form['#submit'][] = 'mcapi_exchanges_segregate_exchanges_submit';
}

/**
 * form submit callback which saves segregate_exchanges setting
 * 
 * @todo this could be moved to a .inc file
 */
function mcapi_exchanges_segregate_exchanges_submit($form, $form_state) {
  $val = $form_state->getValue('segregate_exchanges');
  \Drupal::configFactory()
    ->getEditable('mcapi_exchanges.settings')
    ->set('segregate_exchanges', $val)
    ->save();
  
  Drupal\field\Entity\FieldStorageConfig::load('user.'.EXCHANGE_OG_FIELD)
    ->setCardinality($val ? 1 : Drupal\Core\Field\FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->save();
  //and rebuild the menu in case it has changed
  mdump(\Drupal::menuTree());
}

/**
 * implements hook_field_widget_wallet_reference_autocomplete_form_alter()
 * change the wallet selector to be group sensitive
 */
function mcapi_exchanges_field_widget_wallet_reference_autocomplete_form_alter(&$element, $form_state, $context) {
  if ($context['widget']->getThirdPartySetting('mcapi_exchanges', 'og_limit')) {
    //$element['#type'] = 'wallet_reference_autocomplete_og';
    //$element['#selection_handler'] = 'blah';
    
  }
}

/**
 * implements hook_query_TAG_alter for tag entity_query_mcapi_wallet
 * @param \Drupal\Core\Entity\Query\QueryInterface $query
 * or 
 * @param \Drupal\Core\Database\Driver\mysql\Select is actually passed
 */
function mcapi_exchanges_query_entity_query_mcapi_wallet_alter( $query) {
  return;
  mtrace(); //what the fuck hook is this?
  $exchanges = User::load(\Drupal::currentUser()->id())->get(EXCHANGE_OG_FIELD)->referencedEntities();
  $ids = array_keys($exchanges);
  debug($ids);
  //except of course the wallet itself isn't in the exchanges
  //$query->condition(EXCHANGE_OG_FIELD, $ids);
}

/**
 * implements hook_ENTITY_TYPE_insert for mcapi_wallet().
 * Ensure the wallet is in the same Exchange as its holder
 * @todo update this when og field is loading into the entity
 */
function mcapi_exchanges_mcapi_wallet_presave($wallet) {
  //TEMP because og field isn't working yet.
  drupal_set_message($wallet->holder_entity_type->value." ". $wallet->holder_entity_id->value);
  $memof = \Drupal::database()->select('og_membership', 'm')
      ->fields('m', ['group_entity_id'])
      ->condition('member_entity_type', $wallet->holder_entity_type->value)
      ->condition('member_entity_id', $wallet->holder_entity_id->value)
      ->execute()->fetchField();
  
  $wallet->set(EXCHANGE_OG_FIELD, $memof);
  drupal_set_message("putting wallet ".$wallet->id()." in holder's exchange $memof.");
}