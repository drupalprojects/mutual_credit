<?php

/*
 * @file
 * Hooks for mcapi_exchanges.module
 */

use Drupal\mcapi\Mcapi;
use Drupal\mcapi\Entity\TransactionInterface;
use Drupal\mcapi_exchanges\Exchanges;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Database\Driver\mysql\Select;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_entity_info_alter().
 *
 * add new handlers for the Exchange entity.
 *
 * @param Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function mcapi_exchanges_entity_type_alter(array &$entity_types) {
  $path = 'Drupal\mcapi_exchanges\Overrides\\';
  $entity_types['mcapi_currency']->setListbuilderClass($path .'CurrencyListBuilderExchanges');
  $entity_types['mcapi_currency']->setAccessClass($path .'ExchangeCurrencyAccessControlHandler');
  $entity_types['mcapi_transaction']->setAccessClass($path .'ExchangeTransactionAccessControlHandler');
  $entity_types['mcapi_wallet']->setAccessClass($path .'ExchangesWalletAccessControlHandler');
  $entity_types['group']->setAccessClass($path .'ExchangeAccessControlHandler');
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mcapi_exchanges_entity_extra_field_info() {
  $extra['group']['exchange']['display'] = [
    'currencies' => [
      'label' => t('Currencies'),
      'description' => t('A list of currencies available to the group'),
      'weight' => 1,
    ]
  ];
  return $extra;
}

/**
 * Implements hook_group_view().
 *
 * Adds extra_fields to the exchange.
 */
function mcapi_exchanges_group_view(&$build, $entity, $display) {
  if ($info = $display->getComponent('currencies')) {
    return \Drupal::entityTypeManager()->getViewBuilder('mcapi_currency')
      ->viewMultiple($entity->currencies->referencedEntities(), 'summary');
  }
}

/**
 * Implements hook_theme().
 */
function mcapi_exchanges_theme() {
  return [
    'currencies' => [
      'render element' => 'element'
    ]
  ];
}

/**
 * Default theme preprocessor for 'currencies'
 */
function template_preprocess_currencies(&$vars) {
  foreach ($vars['element']['#currencies'] as $id => $curr) {
    $row = &$vars['rows'][$id];
    $row['name'] = $curr->name;
    $row['volume'] = $curr->format(99);
    if (\Drupal::entityTypeManager()->getAccessControlHandler('mcapi_currency')->access($curr, 'update')) {
      $row['edit'] = Link::fromTextAndUrl(
        t('Edit'),
        Url::fromRoute('entity.mcapi_currency.edit_form', ['mcapi_currency' => $curr->id])
      );
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter()
 */
function mcapi_exchanges_field_widget_worth_form_alter(&$element, $form_state, $context) {
  $element['#allowed_curr_ids'] = array_keys(Exchanges::currenciesAvailableToUser());
}

/**
 * Implements hook_query_entity_query_ENTITY_TYPE_alter().
 *
 * Restrict wallet queries to the current user's exchange.
 *
 * @see Drupal\mcapi\Plugin\Field\FieldWidget\WalletReferenceAutocompleteWidget::formElement
 */
function mcapi_exchanges_query_entity_query_mcapi_wallet_alter(Select $query) {
  $membership = group_exclusive_membership_get('exchange');
  if ($membership) {
    if ($wids = Exchanges::walletsInExchange($membership->getGroup())) {
      drupal_set_message(count($wids) .' wallets in exchange '.$membership->getGroup()->label(), 'warning');
      $query->condition('base_table.wid', $wids, 'IN');
    }
    else {
      \Drupal::logger('mcapi_exchanges')
          ->debug(count($wids) .' wallets in exchange '.$membership->getGroup()->label(), ['exception' => new \Exception()]);

      drupal_set_message('NB no wallets in exchange '.$membership->getGroup()->label(), 'warning');
    }
  }
}

/**
 * Field api default value callback.
 *
 * Populate the currencies entityref field (on exchange entity).
 * Using the currencies in exchanges the current user is in.
 *
 * @param ContentEntityInterface $exchange
 *   the exchange
 *
 * @param array $field_definition
 *
 * @return string[]
 *   currency ids
 *
 * @deprecated ?
 */
function mcapi_exchanges_default_currency_id(ContentEntityInterface $exchange, $field_definition) {
  drupal_set_message('mcapi_exchanges_default_currency_id');
  $curr_ids = [];
  // Default currencies for the currency field are all the currencies of the
  // exchanges of which the current user is a member.
  if ($membership = group_exclusive_membership_get('exchange')) {
    foreach ($membership->getGroup()->currencies->referencedEntities() as $curr) {
      $curr_ids = $curr->id();
    }
  }
  return $curr_ids;
}

/**
 * Implements hook_modules_installed().
 *
 * @note this hook must not be in the .install file.
 */
function mcapi_exchanges_modules_installed($modules) {
  // Completely replace this view with config from this module.
  if ($view = \Drupal::ConfigFactory()->getEditable('views.view.mcapi_transactions')) {
    $view->delete();
  }
  // When intertrading is enabled, create an intertrading wallet for each existing
  // exchange.
  if (in_array('mcapi_cc', $modules)) {
    $exchanges = \Drupal::entityTypeManager()
      ->getStorage('group')
      ->loadByProperties(['type' => 'exchange']);
    foreach ($exchanges as $exchange) {
      mcapi_cc_group_insert($entity);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_create().
 *
 * Put new transactions in the current user's exchange.
 *
 * @param TransactionInterface $transaction
 *
 * @see mcapi_exchanges_mcapi_transaction_insert
 *
 * @note Because develGenerate operates as user 0 during installation, $transaction->exchange is set there.
 */
function mcapi_exchanges_mcapi_transaction_create(TransactionInterface $transaction) {
  if ($membership = group_exclusive_membership_get('exchange')) {
    $transaction->exchange = $membership->getGroup();
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Relate the transaction to the group specified in mcapi_exchanges_mcapi_transaction_create
 *
 * @param TransactionInterface $transaction
 */
function mcapi_exchanges_mcapi_transaction_insert(TransactionInterface $transaction) {
  // Just create GroupContent for the main transaction and the children will be
  if ($ex = $transaction->exchange) {
    $props = [
      'gid' => $ex->id(),
      'type' => 'exchange-transactions',
      'entity_id' => $transaction->id(),
    ];
    GroupContent::Create($props)->save();
    //because the same transaction is being added multiple times
    drupal_set_message('Adding transaction '.$transaction->serial->value .' to exchange '.$ex->label(), 'status', TRUE);
  }
}

/**
 * Populate the mass transaction notifcation field with the exchange's last used notification.
 */
function mcapi_exchanges_form_mcapi_transaction_mass_form_alter(&$form, $form_state, $form_id) {
  if(isset($form['notification'])) {
    $presets = \Drupal::keyValue('masspay')
      ->get($form_state->getFormObject()->getEntity()->exchange->id());
    $form['notification']['subject']['#default_value'] = $presets['subject'];
    $form['notification']['body']['#default_value'] = $presets['body'];
  }
    $form['actions']['submit']['#submit'][] = 'mcapi_exchanges_save_masspay_message';
}
/**
 * Save the message from the mass transaction form
 */
function mcapi_exchanges_save_masspay_message($form, $form_state) {
  \Drupal::keyValue('masspay')->set(
    $form_state->getFormObject()->getEntity()->exchange->id(),
    $form_state->get('mail')
  );
}

/**
 * Implements hook_group_content_insert().
 *
 * Anything that holds a wallet, when added to a group, must add the wallet to
 * the group also.
 *
 * @note This doesn't cover the case of entities moving between exchanges, which
 * we don't have a use-case for at the moment.
 */
function mcapi_exchanges_group_content_insert(GroupContent $entity) {
  $group = $entity->getGroup();
  $inserted_entity = $entity->getEntity();
  $inserted_entity_type_id = $inserted_entity->getEntityTypeId();
  // If any content is added to an exchange, and it has a wallet, then add the
  // wallet to the exchange as well
  if ($group->bundle() == 'exchange' && $inserted_entity_type_id != 'mcapi_wallet') {
    $wids = Mcapi::WalletsOf($inserted_entity);
    if (!$wids) {
      return;
    }
    foreach ($wids as $wid) {
      $props = [
        'gid' => $group->id(),
        'type' => 'exchange-wallet',
        'entity_id' => $wid,
      ];
      GroupContent::Create($props)->save();
      drupal_set_message('Adding wallet of '.$inserted_entity_type_id.' '. $inserted_entity->id()  .' to group'.$group->label());
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevent editing some groupEnabledContentTypes
 */
function mcapi_exchanges_form_group_content_type_edit_form_alter(&$form, $form_state) {
  $donottouch  = ['exchange-wallet', 'exchange-group_membership', 'exchange-transactions'];
  if (in_array($form_state->getFormObject()->getEntity()->id(), $donottouch)) {
    drupal_set_message(t('Multiple exchanges module forbids editing this.'),  'warning');
    $form['#disabled'] = TRUE;
    $form['info_text']['#access'] = FALSE;
  }
}

