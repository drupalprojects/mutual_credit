<?php

/*
 * @file
 * Hooks for mcapi_exchanges.module
 */

use Drupal\mcapi\Entity\TransactionInterface;
use Drupal\mcapi_exchanges\Exchanges;
use Drupal\group\Entity\GroupContent;
use Drupal\user\Entity\User;
use Drupal\Core\Database\Driver\mysql\Select;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_entity_info_alter().
 *
 * add new handlers for the Exchange entity.
 *
 * @param Drupal\Core\Entity\EntityTypeInterface[] $entity_types
 */
function mcapi_exchanges_entity_type_alter(array &$entity_types) {
  $path = 'Drupal\mcapi_exchanges\Overrides\\';
  $entity_types['mcapi_currency']->setListbuilderClass($path.'CurrencyListBuilderExchanges');
  $entity_types['mcapi_currency']->setAccessClass($path.'ExchangeCurrencyAccessControlHandler');
  $entity_types['mcapi_transaction']->setAccessClass($path.'ExchangeTransactionAccessControlHandler');
  $entity_types['user']->setFormClass('register', $path.'ExchangeUserRegisterForm');
  $entity_types['mcapi_wallet']->setAccessClass($path.'ExchangesWalletAccessControlHandler');
  $entity_types['group']->setAccessClass($path.'ExchangeAccessControlHandler');
}


/**
 * Implements hook_menu_local_tasks_alter();
 */
function mcapi_exchanges_local_tasks_alter(&$definitions) {
  // move the user/register tab to the group
  unset($definitions['user.register']);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mcapi_exchanges_entity_extra_field_info() {
  $extra['group']['exchange']['display'] = [
    'currencies' => [
      'label' => t('Currencies'),
      'description' => t('A list of currencies available to the group'),
      'weight' => 1,
    ]
  ];
  return $extra;
}

/**
 * Implements hook_group_view().
 *
 * Adds extra_fields to the exchange.
 */
function mcapi_exchanges_group_view(&$build, $entity, $display) {
  if ($info = $display->getComponent('currencies')) {
    // Could do with a wrapper
    $build['currencies'] = [
      '#theme' => 'currencies',
      '#weight' => $info['weight'],
      '#currencies' => $entity->currencies->referencedEntities(),
      '#cache' =>[
        'contexts' => ['user', 'group']
      ]
    ];
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function mcapi_exchanges_theme_registry_alter(&$items) {
  $items['1stpartyform']['preprocess functions'][] = 'mcapi_exchanges_1stparty_preprocess';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * In the unlikely event that a wallets holder is not in any exchanges put a
 * warning on the wallet limits form.
 */
function mcapi_exchanges_form_wallet_limits_form_alter(&$form, $form_state) {
  $wallet = $form_state->getFormObject()->wallet;
  if (!Exchanges::memberOf($wallet->getHolder())) {
    drupal_set_message(t("Wallet %name is not currently in any exchange so can't be used", ['%name' => $wallet->label()]));
  }
}

/**
 * Implements hook_theme().
 */
function mcapi_exchanges_theme() {
  return [
    'exchange_trade_stats' => [
      'template' => 'exchange_trade_stats',
      'variables' => [
        'exchange' => NULL,
        'currencies' => []
      ]
    ],
    'currencies' => [
      'template' => 'currencies',
      'render element' => 'element'
    ]
  ];
}

/**
 * Default theme preprocessor for 'exchange_trade_stats'
 */
function template_preprocess_exchange_trade_stats(&$vars) {
  foreach ($vars['currencies'] as $currency) {
    $stats = $currency->stats();
    $vars['stats'][$currency->id] = [
      'trades' => $stats->trades,
      'volume' => $stats->volume,
      'scope' => count(Exchanges::getExchangesUsing($currency->id()))
    ];
  }
  //we could also have a breakdown of transactions by category
  //could mention whether it is exclusive to the given exchange (local) or used by others (shared)
  //number of different traders
  //volume by month
}

/**
 * Default theme preprocessor for 'currencies'
 */
function template_preprocess_currencies(&$vars) {
  foreach ($vars['element']['#currencies'] as $id => $curr) {
    $row = &$vars['rows'][$id];
    $row['name'] = $curr->name;
    $row['volume'] = $curr->format(99);
    if (\Drupal::entityTypeManager()->getAccessControlHandler('mcapi_currency')->access($curr, 'update')) {
      $row['edit'] = Link::fromTextAndUrl(
        t('Edit'),
        Url::fromRoute('entity.mcapi_currency.edit_form', ['mcapi_currency' => $curr->id])
      );
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter()
 */
function mcapi_exchanges_field_widget_worth_form_alter(&$element, $form_state, $context) {
  $currencies = Exchanges::currenciesAvailableToUser(\Drupal::currentUser());
  $element['#allowed_curr_ids'] = array_keys($currencies);
}

/**
 * Implements hook_query_entity_query_ENTITY_TYPE_alter().
 *
 * Limits all wallet entityQueries to the exchanges of the current user. NB Only
 * Applies to restricted queries
 *
 * @see Drupal\mcapi\Plugin\Field\FieldWidget\WalletReferenceAutocompleteWidget::formElement
 */
function mcapi_exchanges_query_entity_query_mcapi_wallet_alter(Select $query) {
  $exchange_ids = Exchanges::memberOf();
  if ($exchange_ids and $wids = Exchanges::walletsInExchanges($exchange_ids)) {
    $query->condition('base_table.wid', $wids, 'IN');
  }
  else {
    // If the holder isn't in an exchange, query returns nothing.
    $query->condition('base_table.wid', 0);
  }
}

/**
 * Field api default value callback.
 *
 * Populate the currencies entityref field (on exchange entity).
 * Using the currencies in exchanges the current user is in.
 *
 * @param ContentEntityInterface $exchange
 *   the exchange
 *
 * @param array $field_definition
 *
 * @return string[]
 *   currency ids
 *
 * @todo this might not make sense usability wise;
 */
function mcapi_exchanges_default_currency_id(ContentEntityInterface $exchange, $field_definition) {
  $output = [];
  // Default currencies for the currency field are all the currencies of the exchanges of which the current user is a member.
  if ($exchange_ids = Exchanges::memberOf()) {
    $exchanges = \Drupal\group\Entity\Group::loadMultiple($exchange_ids);
    $output = array_keys(Exchanges::exchangeCurrencies($exchanges));
  }
  return $output;
}

/**
 * Implements hook_modules_installed().
 *
 * @note this hook doesn't fire in the .install file.
 */
function mcapi_exchanges_modules_installed($modules) {
  if ($view = \Drupal::ConfigFactory()->getEditable('views.view.mcapi_transactions')) {
    $view->delete();
  }
}

/**
 * Get the exchange of the current user.
 *
 * @param int $uid
 *
 * @return \Drupal\group\GroupMembership | NULL
 */
function mcapi_exchanges_current_membership($uid = NULL) {
  static $done, $membership;
  if (!$done) {
    $done = TRUE;
    $user = $uid ? User::load($uid) : NULL;
    foreach (\Drupal::service('group.membership_loader')->loadByUser($user) as $membership) {
      if ($membership->getGroup()->getGroupType()->id() == 'exchange') {
        break;
      }
      $membership = NULL;
    }
  }
  return $membership;
}

/**
 * Implements hook_ENTITY_TYPE_create().
 *
 * Tells each new transaction it is in the current user's exchange
 *
 * @param TransactionInterface $transaction
 *
 * @see mcapi_exchanges_mcapi_transaction_insert
 */
function mcapi_exchanges_mcapi_transaction_create(TransactionInterface $transaction) {
  // Could use context for this?
  if ($membership = mcapi_exchanges_current_membership()) {
    $transaction->exchange = $membership->getGroup();
  }
  // DevelGenerate operates as user 0 during installation
}

/**
 * Implements hook_entity_insert().
 *
 * Relate the transaction to the specified group.
 *
 * @param TransactionInterface $transaction
 *
 */
function mcapi_exchanges_mcapi_transaction_insert(TransactionInterface $transaction) {
  // Just create GroupContent for the main transaction and the children will be
  // created by mcapi_exchanges_group_content_insert
  if ($ex = $transaction->exchange) {
    //foreach ($transaction->flatten() as $t) {
    $props = [
      'gid' => $ex->id(),
      'type' => 'exchange-transactions',
      'entity_id' => $transaction->id(),
    ];
    GroupContent::Create($props)->save();
  }
}

/**
 * populate the notifcation field with the exchange's last used notification
 */
function mcapi_exchanges_form_mcapi_transaction_mass_form_alter(&$form, $form_state, $form_id) {
  if(isset($form['notification'])) {
    $presets = \Drupal::keyValue('masspay')
      ->get($form_state->getFormObject()->getEntity()->exchange->id());
    $form['notification']['subject']['#default_value'] = $presets['subject'];
    $form['notification']['body']['#default_value'] = $presets['body'];
  }
    $form['actions']['submit']['#submit'][] = 'mcapi_exchanges_save_masspay_message';
}

function mcapi_exchanges_save_masspay_message($form, $form_state) {
  \Drupal::keyValue('masspay')->set(
    $form_state->getFormObject()->getEntity()->exchange->id(),
    $form_state->get('mail')
  );
}
