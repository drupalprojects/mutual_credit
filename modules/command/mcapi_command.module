<?php

use Drupal\user\Entity\User;
use Drupal\mcapi\Entity\Transaction;
use Drupal\mcapi\Entity\Currency;
use Drupal\mcapi\Mcapi;
use Drupal\mcapi\Storage\WalletStorage;

/*
 * returns a message
 */
function process_mcapi_command($message, $sender_account = NULL, $really = FALSE) {
  if (!$sender_account) {
    $sender_account = User::load(\Drupal::currentUser()->id());
  }
  $transaction = mcapi_command_execute($message, $sender_account);
  //this has no idea whether the transaction is pending or whether it failed
  if ($really) {
    $wallets = WalletStorage::walletsOf($sender_account, TRUE);
    $stats = reset($wallets)->getStats(\Drupal::config('mcapi_command.settings')->get('curr_id'));

    return t('Transaction created.').' '.
      t('Your current balance is @num', array('@num' => $stats['balance']));//no need the format this
  }
  else {
    return t('Transaction passed validation.');
  }
}

/*
 * create the transaction from the command, and return it
 */
function mcapi_command_execute($message, $sender_account, $really = FALSE) {
  $props = mcapi_parse_command($message);//would throw an error
  if (!$props) return;

  $props['curr_id'] = \Drupal::config('mcapi_command.settings')->get('curr_id');
  $props['creator'] = $sender_account->uid;
  //need to parse the user IDs, and substitute the payer or payee
  //assume that either payer or payee is in the string

  if (array_key_exists('payer', $props)) {
    $props['payee'] = $sender_account->uid;
    $props['payer'] = mcapi_command_get_uid($props['payer']);
  }
  else {
    $props['payer'] = $sender_account->uid;
    $props['payee'] = mcapi_command_get_uid($props['payee']);
  }

  $transaction = Transaction::Create($props);
  transaction_cluster_create($transaction, $really);//thrown errors will be caught elsewhere
  //if we are still here, that means the transaction was created
  return $transaction;
}

function mcapi_parse_command($message) {
  $translations = array(
    '[transaction:quantity]' => '([0-9.]+)',
    '[transaction:payer]' => '(.*)',
    '[transaction:payee]' => '(.*)',
    '[transaction:description]' => '(.*)',
  );
  $most_matches = [];
  $strings = explode("\n", \Drupal::config('mcapi_command.settings')->get('command_strings'));
  foreach ($strings as $expression) {
    $expression = trim($expression); //get the linebreak off it yuk
    $pattern = '/'.strtr($expression, $translations) .'/i';

    preg_match($pattern, $message, $matches);

    if (count($matches) > count($most_matches)) {
      $most_matches = $matches;
      $longest_matching_expression = $expression;
    }
  }
  if (!isset($longest_matching_expression)) {
    throw new Exception(\Drupal::config('mcapi_command.settings')->get('syntax_error'));
  }

  array_shift($most_matches);//remove the first which was the matched expression

  //find all the tokens in the expression
  preg_match_all("/\[[^ ]*\]/", $longest_matching_expression, $tokens);
  foreach ($tokens[0] as $token) {
    //we want the exes from a token like '[transaction:xxxxx]'
    $pseudotokens[] = substr($token, 13, -1);
  }

  //now the extracted tokens line up with the matches from before
  if (count($tokens[0]) == count($most_matches)) {
    return array_combine($pseudotokens, $most_matches);
  }
  elseif ($most_matches) {

  }
  else return [];//probably wasn't even supposed to match, so fail gracefully
}

/*
 * check that the parsed trader is actually a user who is permitted to trade
 * $string should be a uid, username or email
 */
function mcapi_command_get_uid($string) {
  $config = \Drupal::config('mcapi_command.settings');
  $query = db_select('wallets', 'w')->fields('w', array('wid'));
  $or = db_or();

  //@todo we need some settings to determine how wallets will be identified from command strings.
  //if mcapi.settings.one_wallet we can use the parent entity label, or email.
  //otherwise might have to insist on the wallet wid only.
  $match_field = $config->get('match_field');
  if ($match_field == 'parent') {
    //assume the parent is a user
    $query->join('users', 'u', 'u.uid = w.pid');
    $or->condition('name', $string);
  }
  else {
    $or->condition($match_field, $string);
  }
  $query->condition($or);
  $wid = $query->execute()->fetchField();

  $curr_id = $config->get('commands_currcode');
  $currency = Currency::load($curr_id);
  if (!$wid) {
    throw new Exception(t('Unknown wallet: @string', array('@string' => $string)));
  }
  return $uid;
}


/*
 * implementation of hook 'sms_incoming'
 * $op = 'pre process', 'process', 'post process'
 * sms_send($number, $message, $options = []);
 * sms_incoming($number, $message, $options = []);
 */
function mcapi_command_sms_incoming($op, $number, $message) {
  if ($op != 'process') {
    return;
  }
  $config = \Drupal::config('mcapi_command.settings');
  try {
    $sender_uid = sms_user_get_uid($number);
    if (!$sender_uid) {
      throw new Exception('Your number is not registered at @sitename', array('@sitename' => variable_get('site_name', '')));
    }
    $sender = User::load($sender_uid);
    $transaction = mcapi_command_execute($message, $sender, TRUE);
    if (!$transaction) {
      $message = $config->get('syntax_error');
      throw new Exception($message);
    }
  }
  catch (Exception $e) {
     sms_send($number, $e->getmessage());
  }

  $langcode = user_preferred_language($sender)->language;
  if ($transaction->state == TRANSACTION_STATE_COMPLETED) {
    $message = $config->get('syntax_error');
    $curr_id = $config->get('commands_currcode ');

    $stats = $wallet->getStats($curr_id);
    $currency = Currency::load($curr_id);

    $response = t(
      "Transaction created. Your new balance is @num",
      array('@num' => $currency->format($stats['balance'])),
      array('langcode' => $langcode)
    );
  }
  else {
    $states = Mcapi::entityLabelList('mcapi_state');
    $response = t(
      "Transaction created into state '@state'",
      array('@state' => $states[$transaction->state]),
      array('langcode' => $langcode)
    );
  }
  sms_send($number, $response);

}

/*
 * Implements hook_twitter_status_save().
 * parse the tweet as it is saved
 * this module does NOT ISSUE COMMANDS OR RESPONSES via twitter
 * likely to be fired on cron
 */
function mcapi_command_twitter_status_save($status) {
  $message = $status->text;
  //convert (the first) twitter id to a username, because the command expects usernames
  preg_match('/@[^ ]*/', $message, $matches);
  if (count($matches) > 1) {
    $otherusername = twitter_account_load(trim($matches[0], '@,.;:!'))->name;
    //so the tweet mentions another user known to this
    $message = str_replace($otherusername, $matches[1], $message);
  }
  $config = \Drupal::config('mcapi_command.settings');
  try {
    $uid = db_query("SELECT uid FROM twitter_account WHERE twitter_uid = ".$status->user->id)->fetchfield();
    $transaction = mcapi_command_execute($message, User::load($uid), TRUE);
    //could use a variable instead of transaction completed.
    $response = t('Transaction completed');
  }
  catch (Exception $e) {
    if ($e->getMessage() != $config->get('syntax_error')) {
      //we don't publish syntax error messages, but we do log non-syntax error message
      \Drupal::service('logger.channel.mcapi')->error(
        'Failed to execute twitter command: @message',
        ['@message' => "$status->text :". $e->getMessage()]
      );
      $response = $e->getMessage();
    }
  }

  if ($transaction and $config->get('twitter_response')) {
    mcapi_twitter_respond($twitter_uid, $response, $status->id);
  }
}

//replaces twitter_set_status because that function has no way to REPLY, even though the API supports it
function mcapi_twitter_respond($twitter_uid, $response, $original_id) {
  $twitter_uid = 1;//assumes that account 1 has a twitter account and is connected.
  $twitter = twitter_connect($twitter_uid);
  $params['status'] = $response;
  $params['in_reply_to_status_id'] = $twitter->id;
  $values = $this->call('statuses/update', $params, 'POST');
}
