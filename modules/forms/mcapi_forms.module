<?php

use Drupal\mcapi\Entity\Wallet;
use Drupal\mcapi\Entity\WalletInterface;
use Drupal\mcapi\Entity\Transaction;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;


const MCAPI_FORMS_DIR_INCOMING = 1;
const MCAPI_FORMS_DIR_OUTGOING = -1;
const MCAPI_FORMS_DIR_BOTH = 0;

/**
 * Implements hook_entity_type_build().
 */
function mcapi_forms_entity_type_build(array &$entity_types) {
  if (isset($entity_types['mcapi_transaction'])) {
    foreach (array_keys(mcapi_form_displays_load(TRUE)) as $mode) {
      $entity_types['mcapi_transaction']->setFormClass(
        $mode,
        'Drupal\mcapi_forms\FirstPartyTransactionForm'
      );
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * adds menu links where the firstparty forms specify them
 *
 * @param array $links
 *   Each link is a definition array.
 */
function mcapi_forms_menu_links_discovered_alter(&$links) {
  foreach (mcapi_form_displays_load() as $id => $first_party_form) {
    $settings = $first_party_form->getThirdPartySettings('mcapi_forms');
    if ($menu = $settings['menu_parent']) {
      list($menu_name, $parent_link) = explode(':', $menu);
      $route_name = 'mcapi.1stparty.'.$first_party_form->get('mode');
      $links[$route_name.'.link'] = [
        'title' => $settings['title'],
        'route_name' => $route_name,
        'provider' => 'mcapi_forms',
        'menu_name' => $menu_name,
        'parent' => $parent_link,
        'weight' => $settings['menu_weight']
      ];
    }
  }
}

/**
 *
 * implement hook_entity_base_field_info_alter().
 *
 * change the default date widget for the created field
 *
 * @todo make this work with the date_popup widget, but in what module?
 */
function mcapi_forms_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'mcapi_transaction') {
    $fields['created']->setDisplayOptions(
      'form',
      [
        'type' => \Drupal::moduleHandler()->moduleExists('datetime') ? 'datetime_timestamp' : 'datetime_timestamp',
        'weight' => 10
      ]
    );
  }
}

/**
 * Implements hook_theme().
 */
function mcapi_forms_theme() {
  return [
    'first_party_transaction_form' => [
      'function' => 'theme_first_party_transaction_form',//no template is possible in this case
      'render element' => 'form',
      'file' => 'mcapi_forms.inc',
    ]
  ];
}

/**
 * implement mcapi hook_mcapi_form_list().
 * return a list of transaction forms declared in this module.
 * each item must e an array with the following keys
 * - 'link' => \Drupal\Core\Link::()
 * - 'operations' => [Url::fromPath('blah')] an array of items, each with title and path
 */
function mcapi_forms_mcapi_form_list() {
  drupal_set_message(t('Create more forms by creating more transaction form displays and customising them'));
  $forms = [];

  foreach (mcapi_form_displays_load() as $mode => $entity) {
    $forms[$mode] = [
      'link' => Link::fromTextAndUrl(
        $entity->getThirdpartySetting('mcapi_forms', 'title'),
        Url::fromRoute('mcapi.1stparty.'.$mode)
      ),
      'operations' => [
        'edit' => [
          'title' => t('Edit'),
          'url' => Url::fromRoute(
            'entity.entity_form_display.mcapi_transaction.form_mode',
            ['form_mode_name' => $mode]
          )
        ]
      ]
    ];
  }
  return $forms;
}

/**
 *
 * utility
 * get the EntityFormDisplays which have the thirdpartysettings
 *
 * @param bool $config
 *   TRUE if there is a risk of recursion
 * @return []
 *   The EntityFormDisplay entities, as entities or as config
 */
function mcapi_form_displays_load($config = FALSE) {
  $displays = [];
  if ($config) {
    $transaction_form_display_ids = \Drupal::configFactory()
      ->listAll('core.entity_form_display.mcapi_transaction.mcapi_transaction');
    foreach ($transaction_form_display_ids as $id) {
      $display = \Drupal::config($id);
      if ($display->get('third_party_settings.mcapi_forms')) {
        $displays[$display->get('mode')] = $display;
      }
    }
  }
  else {
    $entities = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->loadByProperties(['bundle' => 'mcapi_transaction']);
    foreach ($entities as $display) {
      if ($display->getThirdPartySettings('mcapi_forms')) {
        $displays[$display->get('mode')] = $display;
      }
    }
  }
  return $displays;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function mcapi_forms_entity_extra_field_info() {
  $extra['mcapi_wallet']['mcapi_wallet']['display']['trade_with'] = [
    'label' => t('Link(s) to trade'),
    'description' => t("Link or links to log a transaction with each of the entity's wallets, in each direction"),
    'weight' => 7
  ];
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function mcapi_forms_mcapi_wallet_view(array &$build, $entity, $display) {
  if ($display->getComponent('trade_with')) {
    foreach (mcapi_form_displays_load() as $id => $display) {
      $settings = $display->getThirdPartySettings('mcapi_forms');
      switch($settings['direction']) {
        case MCAPI_FORMS_DIR_INCOMING:
          $key = 'payer';
          break;
        case MCAPI_FORMS_DIR_OUTGOING:
          $key = 'payee';
          break;
        default:
          continue;
      }
      $build['wallet_link_'.$id] = [
        '#type' => 'link',
        '#title' => wallet_link_title($entity, $settings['wallet_link_title']),
        '#url' => Url::fromUserInput($settings['path'], ['query' => [$key => $entity->id()]]),
        '#attributes' => ['class' => 'wallet-link'],
      ];
    }
  }
}

/**
 * implements hook_form_FORM_ID_alter
 */
function mcapi_forms_form_entity_form_display_edit_form_alter(&$form, \Drupal\Core\Form\FormState $form_state) {
  if ($form['#entity_type'] == 'mcapi_transaction') {
    $entity_form_display = $form_state->getFormObject()->getEntity();
    if ($entity_form_display->getMode() == 'default') {
      return;
    }
    $form_state->loadInclude('mcapi_forms', 'inc');
    mcapi_forms_display_decorate($form, $entity_form_display->getThirdpartySettings('mcapi_forms'));
  }
}

function mcapi_forms_make_default_transaction($type, $overrides = []) {
  //prepare a transaction using the defaults here
  $vars = ['type' => $type];
  $vars += $overrides;
  return Transaction::create($vars);
}

/**
 * @param WalletInterface $wallet
 * @param string $title
 * @return string
 */
function wallet_link_title(WalletInterface $wallet, $title) {
  return str_replace('[mcapi_wallet:name]', $wallet->label(), $title);
}

/**
 * Find out which wallets a user can pay into or out of.
 *
 * @param int $uid
 *   A user $account->id
 * @param string $dir
 *   Either 'incoming' or 'outgoing'
 *
 * @return int[]
 *   The wallet ids
 */
function mcapi_forms_access_direction($uid, $dir) {
  //we can access this form if we have one or wallets which operate in the right direction.
  $query = \Drupal::entityQuery('mcapi_wallet')
    ->condition('payways', Wallet::PAYWAY_AUTO, '<>')
    ->condition('orphaned', 0)
    ->condition('holder_entity_type', 'user')
    ->condition('holder_entity_id', $uid);
  $directions = [Wallet::PAYWAY_ANYONE_BI];
  if ($dir == 1) {
    $directions[] = Wallet::PAYWAY_ANYONE_IN;
  }
  elseif ($dir == -1) {
    $directions[] = Wallet::PAYWAY_ANYONE_OUT;
  }
  $query->condition('payways', $directions, 'IN');
  return $query->execute();
}

