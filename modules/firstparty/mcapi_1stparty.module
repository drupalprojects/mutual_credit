<?php

use Drupal\mcapi\Exchange;
use Drupal\mcapi_1stparty\Entity\FirstPartyFormDesign;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * implements hook_help().
 */
function mcapi_1stparty_help($route_name) {
  if ($route_name == 'mcapi.admin.transaction_form.list') {
    $help[] = t('Design your own forms for users to start transactions on their workflow paths.');
    $help[] = t('Each form has access control and can be presented as a block, page or panel.');
    $help[] = t('Each form can have presets and hidden fields.');
    return implode(' ', $help);
  }
}

/**
 * implements hook_entity_type_alter().
 *
 * adds one form controller to the transaction entity for every designed form
 */
function mcapi_1stparty_entity_type_alter(array &$entity_types) {
  //there's a recursive problem doing loadMultiple configEntities during entity_type_alter
  //foreach (FirstPartyFormDesign::loadMultiple() as $id => $configEntity) {
  //So this is a direct db query
  $template = 'mcapi_1stparty.editform.';
  $ids = db_select('config', 'c')
    ->fields('c', ['name'])
    ->condition('name', $template.'%', 'LIKE')
    ->execute()->fetchCol();
  foreach ($ids as $id) {
    $entity_types['mcapi_transaction']
      ->setFormClass(
        substr($id, strlen($template)),
        'Drupal\mcapi_1stparty\FirstPartyTransactionForm'
      );
  }
}

/**
 * machine_name callback
 * @param unknown $id
 */
function mcapi_editform_load($id) {
  return FirstPartyFormDesign::load($id);
}

/**
 * get all the tokens which apply in the transaction form
 * @param boolean $natural
 *   TRUE if the transaction entities fields are wanted, FALSE if the form fields
 * @return string[]
 *   the token names, without the 'type:'
 */
function mcapi_1stparty_transaction_tokens($natural = FALSE) {
  $tokens = Exchange::transactionTokens(FALSE);

  unset($tokens[array_search('state', $tokens)]);
  unset($tokens[array_search('serial', $tokens)]);
  unset($tokens[array_search('creator', $tokens)]);
//  unset($tokens[array_search('mcapi_exchange_og_ref', $tokens)]);
  if (!$natural) {
    unset($tokens[array_search('payer', $tokens)]);
    unset($tokens[array_search('payee', $tokens)]);
    $tokens[] = 'partner';
    $tokens[] = 'mywallet';
  }
  return $tokens;
}

function mcapi_1stparty_form_field_ui_form_display_overview_form_alter(&$form, $form_state) {
  $form['#suffix'] = t('N.B. Disabled fields may cause problems with the transaction form editor');
}

/**
 * implements hook_menu_links_discovered_alter().
 * adds menu links where the firstparty forms specify them
 *
 * @param array $links
 *   each link is an array
 */
function mcapi_1stparty_menu_links_discovered_alter(&$links) {
  foreach (FirstPartyFormDesign::loadMultiple() as $id => $first_party_form) {
    if ($menu = $first_party_form->menu['menu_name']) {
      $route_name = 'mcapi.1stparty.'.$id;
      $parent_path = substr($first_party_form->path, 0, strrpos($first_party_form->path, '/'));
      $links[$route_name.'.link'] = [
        'title' => $first_party_form->title,
        'route_name' => $route_name,
        'provider' => 'mcapi_1stparty',
        'menu_name' => $menu
        //'parent' => '',// currently the entity doesn't support nested menu items
        //weight
      ];
    }
  }
}

/**
 *
 * implement hook_entity_base_field_info_alter().
 *
 * change the default date widget for the created field
 *
 * @todo make this work with the date_popup widget, but in what module
 */
function mcapi_1stparty_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  $dateTime = \Drupal::moduleHandler()->moduleExists('datetime');
  if ($entity_type->id() == 'mcapi_transaction') {
    $fields['created']->setDisplayOptions(
      'form',
      [
        'type' => $dateTime ? 'datetime_timestamp' : 'datetime_timestamp',
        'weight' => 10
      ]
    );
  }
}

/**
 * implements hook_theme().
 */
function mcapi_1stparty_theme() {
  return [
    'first_party_transaction_form'=> [
      'function' => 'theme_first_party_transaction_form',//no template is possible in this case
      'render element' => 'form',
      'file' => 'mcapi_1stparty.inc',
    ]
  ];
}

/**
 * implements hook_dunno
 * when a field is added, make sure it appears in the default display
 */
function dunno() {
  
}


/**
 * implement mcapi hook_mcapi_form_list().
 * return a list of transaction forms declared in this module.
 * each item must e an array with the following keys
 * - 'title' => 'Blah'
 * - 'route' => 'mcapi.transaction_form'
 * - 'route_parameters' => []
 * - 'operations' => [Url::fromPath('blah')] an array of items, each with title and path
 */
function mcapi_1stparty_mcapi_form_list() {
  foreach (FirstPartyFormDesign::loadMultiple() as $id => $entity) {
    $forms[$id] = [
      'title' => $entity->title,
      'route' => 'mcapi.1stparty.'.$id,
      'route_parameters' => [],
    ];
    
    if ($entity->access('update') && $entity->hasLinkTemplate('edit-form')) {
      $forms[$id]['operations']['edit'] = array(
        'title' => t('Edit'),
        'weight' => 10,
        'url' => $entity->urlInfo('edit-form'),
      );
    }
    if ($entity->access('delete') && $entity->hasLinkTemplate('delete-form')) {
      $forms[$id]['operations']['delete'] = array(
        'title' => t('Delete'),
        'weight' => 100,
        'url' => $entity->urlInfo('delete-form'),
      );
    }
  }
  return $forms;
}
