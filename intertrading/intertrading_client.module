<?php

module_load_include('inc', 'intertrading_client', 'intertrading');

define('INTERTRADING_API_VERSION', 1.0);

/*
 * implements hook_menu
 */
function intertrading_client_menu() {
  $items['statement'] = array(
    'title' => 'Trading network',
    'description' => 'Display statistics about this exchange in the Community Forge network',
    'page callback' => 'statement',
    'access arguments' => array('access statement'),
    'menu_name' => 'secondary-links',
    'weight' => 1
  );

  $items['transact/remote'] = array(
    'title' => 'Remote transaction',
    'description' => 'Trade with another exchange in the network',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('remote_incoming_form'),
    'access arguments' => array('intertrade'),
    'menu_name' => 'main-menu',
    'type' => MENU_LOCAL_TASK,
    'file' => 'mcapi.inc',
    'file path' => drupal_get_path('module', 'mcapi'),
    'weight' => 1
  );
  $items['transact/remote/incoming'] = array(
    'title' => 'Remote claim',
    'description' => 'Request credit from another exchange',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1
  );
  $items['transact/remote/outgoing'] = array(
    'title' => 'Remote payment',
    'description' => 'Pay credit to another exchange',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('remote_outgoing_form'),
    'access arguments' => array('intertrade'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mcapi.inc',
    'file path' => drupal_get_path('module', 'mcapi'),
    'weight' => 2
  );
  $items['intertrade'] = array(
    'page callback' => 'intertrading_client2_receive',
    'access callback' => 'intertrading_check_key',
  );
  $items['admin/accounting/intertrade'] = array(
    'title' => 'Trading network',
    'description' => 'Settings for your trading network',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intertrading_settings'),
    'access arguments' => array('manage all transactions'),
    'weight' => 4
  );
  return $items;
}


/*
 * implements hook_permission
 */
function intertrading_client_permission() {
  return array(
    'access statement' => array(
      'title' => t('access statement'),
      'description' => t('View the aggregating trading stats which show the activity of this exchange to the trading network.')
    ),
    'intertrade' => array(
      'title' => t('Intertrade'),
      'description' => t('Initiate transactions with other exchanges')
    )
  );
}

/*
 * implements hook_forms
 * $args is an mcapi_form and an optional transaction
 */
function intertrading_client_forms($form_id, $args) {
  $forms['remote_incoming_form'] = array(
    'callback' => 'transaction_form',
    'callback arguments' => $args
  );
  $forms['remote_outgoing_form'] = array(
    'callback' => 'transaction_form',
    'callback arguments' => $args
  );
  return $forms;
}

/*
 * menu callback
 * this could be one of three forms, depending on whether the site is set up
 */
function intertrading_settings() {
  form_load_include($form_state, 'inc', 'mcapi');
  $form = array(
    'intertrading_server' => array(
      '#title' => t('Intertrading server url'),
      '#description' => t('The url of the server. Contact the server administrator to change this'),
      '#field_prefix' => 'http://',
      '#type' => 'textfield',
      '#default_value' => variable_get('intertrading_server', ''),
      '#required' => TRUE
    )
  );

  $form['intertrading_uid'] = array(
    '#type' => 'textfield',
    '#title' => t('Account number for intertrading'),
    '#description' => t('A username, email, or user ID'),
    '#default_value' => variable_get('intertrading_uid', 0),
    '#element_validate' => array('mcapi_validate_transactor'),
    '#required' => TRUE
  );
  if (module_exists('mcapi_currencies')) {
    $form['intertrading_currcode'] =  currency_picker_element(variable_get('intertrading_uid', 0));
  }
  else {
    $form['intertrading_currcode'] = array(
      '#type' => 'hidden',
      '#value' => key(currencies_load())
    );
  }

  $form['intertrading_ticks'] = array(
    '#title' => 'Ticks',//this is a reference to the forex base comparision unit
    '#description' => t('The value of the currency, relative to a common denominator.') . '<br />'.
      t('If 1 tick is 1 minute and your currency is hours, then enter 60'),
    '#type' => 'textfield',
    '#element_validate' => array('intertrading_validate_ticks'),
    '#default_value' => variable_get('intertrading_ticks', 0),
    '#required' => TRUE,
    '#weight' => 2
  );

  $fields = array();
  foreach(field_info_instances('transaction', 'transaction') as $fieldname => $instance) {
    if ($fieldname == 'worth') continue; //this field is reserved!
    $fields[$fieldname] = $instance['label'];
  }
  if (count($fields)) {
    $form['intertrading_description_field'] = array(
      '#title' => 'Description field',
      '#description' => t("Which field API field on the transaction entity should be used for 'description'"),
      '#type' => 'select',
      '#options' => $fields,
      '#default_value' => variable_get('intertrading_description_field', ''),
      '#weight' => 5
    );
  }
  else {
    drupal_set_message(t('Intertrading works better when the transaction entity has a description field'), 'warning', FALSE);
    $form['intertrading_description_field'] = array(
      '#type' => 'hidden',
      '#default_value' => ''
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Handshake with server'),
    '#weight' => 10
  );
  $form['#validate'] = array('intertrading_settings_validate');
  $form['#submit'] = array('intertrading_settings_submit', 'intertrading_handshake');
  return $form;
}

function intertrading_settings_validate(&$form, &$form_state) {
  $ticks = &$form_state['values']['intertrading_ticks'];
  if (is_numeric($ticks) && $ticks <= 0) {
    form_error($form['intertrading_ticks'], t('Ticks must be greater than zero'));
  }
}

function intertrading_settings_submit($form, $form_state) {
  $vars = array_keys(intertrading_client_variable_info());
  foreach ($vars as $var) {
    variable_set($var, $form_state['values'][$var]);
  }
}


function intertrading_validate_ticks(&$element, $form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('Ticks must be numeric'));
  }
}


function intertrading_client_uninstall() {
  variable_del('intertrading_server');
}


/*
 * implements hook_form_FORM_ID_alter
 * injects the lat lon variables into the site_information form
 * no validation
 */
function intertrading_client_form_system_site_information_settings_alter(&$form) {
  $form['coordinates'] = array(
    '#title' => t('Geolocation'),
    '#description' => t('To determine your coordinates, please visit !link', array('!link' => l('http://itouchmap.com', 'http://itouchmap.com'))),
    '#type' => 'fieldset',
    'site_lat' => array(
      '#type' => 'textfield',
      '#title' => t('Latitude'),
      '#default_value' => variable_get('site_latitude', ''),
      '#element_validate' => array('intertrading_validate_coords'),
      '#weight' => 0,
    ),
    'site_lon' => array(
      '#type' => 'textfield',
      '#title' => t('Longitude'),
      '#default_value' => variable_get('site_longitude', ''),
      '#element_validate' => array('intertrading_validate_coords'),
      '#weight' => 1,
    ),
    '#weight' => -5
  );
}

/*
 * implements hook_theme
 */
function intertrading_client_theme() {
  return array (
    'statement' => array(
      'arguments' =>array(
        'data' => array()
      )
    )
  );
}

//announce to the intertrading server
//always make a new key
function intertrading_handshake() {
  $data = _intertrading_handshake() + _intertrading_report();
  $new_key = md5(time() . user_password());//could be anything...
  $data['new_key'] = $new_key;
  $data['key'] = $new_key;
  $result = intertrading_json_client_request('exchange/handshake', $data);
  if ($result->code == 'OK') {
    //if the result is good then save the key
    variable_set('intertrading_key', $data['new_key']);
    $result->message = t('You have an account on the intertrading server.');
  }
  drupal_set_message($result->message, $result->code == 'OK' ? 'status' : 'warning');
}

function _intertrading_handshake() {
  $stats['mail'] = variable_get('site_mail', '');
  $stats['api'] = INTERTRADING_API_VERSION;
  $stats['ticks'] = variable_get('intertrading_ticks', 0);

  //the rest are optional
  $currency = currency_load(variable_get('intertrading_currcode', key(currencies_load())));
  if (isset($currency->divisions)) {
    //divisions is either string '01' or an keyed array
    $stats['divisions'] = $currency->divisions == '01' ? '01' : implode('|', array_keys($currency->divisions));
  }
  $stats['name'] = variable_get('site_name', '');
  $stats['visibility'] = db_query('SELECT rid FROM {role_permission} WHERE rid = :rid AND permission = :perm',
    array(':rid' => DRUPAL_ANONYMOUS_RID, ':perm' => 'access statement')
  );
  $stats['logo'] = theme_get_setting('logo_path');
  $stats['lat'] = variable_get('site_lat', 0);
  $stats['lon'] = variable_get('site_lon', 0);
  return $stats;
}

function _intertrading_report() {
  $currcode = variable_get('intertrading_currcode', key(currencies_load()));
  //get active users with permission to trade
  $uids = array();
  $result = db_query("SELECT DISTINCT(payer) FROM {mcapi_transactions} UNION SELECT DISTINCT(payee) FROM {mcapi_transactions}")->fetchCol();
  foreach ($result as $uid) {
    $uids[$uid] = 1;
  }
  $stats['traders'] = count($uids);

  $stats['transactions'] = db_query(
    "SELECT COUNT(xid) from {mcapi_transactions} t
    LEFT JOIN {field_data_worth} fw ON t.xid = fw.entity_id
    WHERE t.state = :state AND fw.worth_currcode = '$currcode' AND created > :created",
    array(':state' => TRANSACTION_STATE_FINISHED, ':created' => strtotime('-30 days'))
  )->FetchField();

  $query = "SELECT SUM(fw.worth_quantity) from {mcapi_transactions} t 
    LEFT JOIN {field_data_worth} fw ON t.xid = fw.entity_id
    WHERE t.state = :state AND fw.worth_currcode = '$currcode' AND created > :created";
  $replacements = array(
    ':state' => TRANSACTION_STATE_FINISHED,
    ':created' => strtotime('-1 year')
  );
  $stats['volume'] = db_query($query, $replacements)->fetchField();
  //this isn't foolproof. but then nothing is
  //the intention is to identify an account or even group of accounts which are so far in debt (or credit)
  //that they will never return to zero
  if (module_exists('mcapi_index_views')) {
    $bal = db_query("SELECT SUM(diff) FROM {mcapi_index} GROUP BY uid1 ORDER BY SUM(diff) ASC LIMIT 0,1")->fetchField();
    $stats['deficit'] = floatval($bal);
  }
  //checks that all balances add up to zero
  //In this software, they must, because there is no caching of balances
  $sum = 0;
  $stats['integrity'] = !$sum;
  $stats['balance'] = transaction_totals(variable_get('intertrading_uid', 0), $currcode)->balance;
  return $stats;
}

/*
 * menu callback
 */
function statement() {
  $data = _get_statement() + _intertrading_report();
  return theme('statement', array('data' => $data));
}


//this could be made prettier
function theme_statement($variables) {
  $data = &$variables['data'];
  $currcode = variable_get('intertrading_currcode', key(currencies_load()));
  $rows[] = array();
  $rows['api']['title'] = t('API version');
  $rows['src_url'] = array(
    'title' => t('Server name'),
    'value' => $_SERVER['SERVER_NAME']
  );
  foreach ($variables['data'] as $key => $prop) {
    $rows[$key]['title'] = '';//this ensures that the title column comes first
    $rows[$key]['value'] = $prop;
  }
  $rows['name']['title'] = t('Site name');
  $rows['url'] = array(
    'title' => t('Address'),
    'value' => l($data['url'], $data['url'])
  );
  $rows['currency_name']['title'] = t('Name of (first) currency');
  unset($rows['mail']);
  $rows['traders']['title'] = t('Number of traders');
  $rows['transactions']['title'] = t('Last 30 days transactions');
  $rows['volume'] = array(
    'title' => t('Last 365 days volume'),
    'value' => theme('worth_field', array('currcode' => $currcode, 'quantity' => $data['volume'] )),
  );
  $rows['deficit']['title'] = t('Largest negative balances');
  $rows['integrity'] = array(
    'title' => t('Balances add up to zero'),
    'value' => $data['integrity'] == TRUE ? t('Yes') : t('No')
  );
  $rows['balance'] = array(
    'title' => t('Balance of Trade'),
    'value' => theme('worth_field', array('currcode' => $currcode, 'quantity' => $data['balance']))
  );
  $rows['ticks']['title'] = t('Relative value');
  $rows['logo'] = array(
    'title' => t('Url of logo'),
    'value' => empty($data['logo']) ? '' : theme('image', array('path' => $data['logo'], 'height' => 20))
  );
  $rows['visibility'] = array(
    'value' => $data['visibility'] == 0 ? t('Yes') : t('No'),
    'title' => t('Visibility')
  );
  $rows['lat']['title'] = t('Latitude');
  $rows['lon']['title'] = t('Longitude');
  return theme('table', array('rows' => $rows));
}

function intertrading_validate_coords(&$element, &$form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('Coordinates must be numeric'));
  }
  if ($element['#value'] > 180 || $element['#value'] < -180) {
    form_error($element, t('Coordinates out of range: @val', array('@val' => $element['#value'])));
  }
}

/*
 * implements mcapi hook_info_types
 */
function intertrading_client_mcapi_info_types() {
  return array('remote receipt', 'remote payment');
}
/*
 * wrapper around intertrading json request
 * adds client validation criteria to the POST
 */
function intertrading_json_client_request($path, $data = array()) {
  foreach (array('intertrading_uid', 'intertrading_server', 'intertrading_currcode', 'intertrading_ticks') as $varname) {
    $$varname = variable_get($varname, 0);
    if (!$$varname) {
      return (object)array(
        'code' => -1,
        'message' => t('Configure intertrading at !link', array('admin/accounting/intertrade', 'admin/accounting/intertrade'))
      );
    }
  }
  return intertrading_json_request(
    'http://'. $intertrading_server .'/'. $path,
    $data += array(
      'key' => variable_get('intertrading_key', ''),
      'src_url' => $_SERVER['SERVER_NAME']
    )
  );
}

/*
 * form function for menu callback
 * provide a basic form for intertrading
 */
function intertrading_client_form_remote_incoming_form_alter(&$form, &$form_state, $form_id) {
  $incoming = $form_id == 'remote_incoming_form';
  //check that the intertrading settings are all set
  if (empty($form_state['$server_params'])) {
    //storing in $form_state means we don't have to interrogate the server more than once per form
    $form_state['server_params'] = intertrading_json_client_request('exchange/prepare', _intertrading_report());
  
    if ($form_state['server_params']->code != 'OK') {
      drupal_set_message($form_state['server_params']->message, 'warning');
      drupal_goto('user/'. variable_get('intertrading_uid', 1));
    }
    elseif ($incoming && $form_state['server_params']->args['earn_limit'] && $form_state['server_params']->args['earn_limit'] < 0) {
      drupal_set_message(t('Your system cannot earn any more on the network'), 'warning');
      $form = array('msg' => array('#markup' => t('No receipts are possible at this time')));
      return;
    }
    elseif (!$incoming && $form_state['server_params']->args['spend_limit'] && $form_state['server_params']->args['spend_limit'] < 0) {
      drupal_set_message(t('Your system cannot spend any more into the network'), 'warning');
      $form = array('msg' => array('#markup' => t('No payments are possible at this time')));
      return;
    }
  }
  //for now we'll hide the state
  $form['state']['#access'] = FALSE;
  $form['type']['#value'] = $incoming ? 'remote receipt' : 'remote payment';
  $form['type']['#type'] = 'hidden';

  $sites = &$form_state['server_params']->args['sites'];
  unset($sites[$_SERVER['SERVER_NAME']]);
  $form['dest_url'] = array(
    '#title' => t('Remote exchange'),
    '#description' => l(t('Not listed?'), 'intertrading/help'),
    '#type' => 'select',
    '#options' => $sites,
    '#weight' => -10,
  );
  $form['dest_acc'] = array(
    '#title' => $incoming ? t('Remote payer ID') : t('Remote payee ID'),
    '#type' => 'textfield',
    '#weight' => -3
    //this can't be validated because it's an address on another system
  );
  $form['incoming'] = array(
    '#type' => 'hidden',
    '#value' => intval($incoming)
  );
  $form['creator']['#type'] = 'hidden';

  if ($incoming) {
    $first_person = 'payee';
    $second_person = 'payer';
  }
  else {
    $first_person = 'payer';
    $second_person = 'payee';
  }

  $form[$first_person]['#value'] = $GLOBALS['user']->uid;
  $form[$first_person]['#type'] = 'hidden';
  $form[$second_person]['#type'] = 'hidden';
  $form[$second_person]['#value'] = variable_get('intertrading_uid', 0);
  unset($form[$second_person]['#description']);
  //this replaces the usual transaction form validation
  //$form['#validate'] = array('intertrading_transaction_form_validate');
  $form['#validate'][] = 'intertrading_transaction_form_validate';
  $form['#submit'][] = 'intertrading_transaction_form_submit';
  //This means certain things can be checked by the client before making a remote request

  $currcode = variable_get('intertrading_currcode', '');
  if ($incoming && $form_state['server_params']->args['earn_limit']) {
    $form['worth']['und'][0]['#max'][$currcode] = $form_state['server_params']->args['earn_limit'];
  }
  elseif (!$incoming && $form_state['server_params']->args['spend_limit']) {
    $form['worth']['und'][0]['#max'][$currcode] = $form_state['server_params']->args['spend_limit'];
  }
}

/*
 * form function for menu callback
 * provide a basic form for intertrading
 */
function intertrading_client_form_remote_outgoing_form_alter(&$form, &$form_state, $form_id) {
  return intertrading_client_form_remote_incoming_form_alter($form, $form_state, $form_id);
}



/*
 * form validation callback for intertrading_transaction_form
 * if the form has validated so far
 * build the transaction and send it to the intertrading server
 * $form_state['transaction'] is assumed to be set, ready for local saving
 */
function intertrading_transaction_form_validate($form, $form_state) {
  if (count(form_get_errors())) return;
  $values = &$form_state['values'];
  
  $data = array(
    'payer' => $values['incoming'] ? $values['dest_acc'] : $values['payer'],
    'payer_url' => $values['incoming'] ? $values['dest_url'] : $_SERVER['SERVER_NAME'],
    'payee' => $values['incoming'] ? $values['payee'] : $values['dest_acc'],
    'payee_url' => $values['incoming'] ? $_SERVER['SERVER_NAME'] :  $values['dest_url'],
    'quantity' => $values['worth']['und'][0]['quantity'],
    'src_url' => $_SERVER['SERVER_NAME'],
    'dest_url' => $values['dest_url']
  );

  if ($desc_field = variable_get('intertrading_description_field', '')) {
    $data['description'] = $desc_field ? $values[$desc_field]['und'][0]['value'] : '';
  }
  //this should overwrite whichever of payer and payee is the local intertrading account
  $result = intertrading_json_client_request('transaction/try', $data);
  if ($result->code == 'OK') return; //go to the submit function
  form_set_error('', $result->message);
}

/*
 * form submit callback for intertrading_transaction_form
 */
function intertrading_transaction_form_submit($form, $form_state) {
  $form_state['transaction']->state = TRANSACTION_STATE_FINISHED;
  transaction_save($form_state['transaction']);
  drupal_set_message('Success!');
  //redirect somewhere
}


function intertrading_check_key() {
  $post = intertrading_get_post();
  if (empty($post) || $_GET['q'] != 'intertrade' || $GLOBALS['user']->uid) {
    return FALSE;
  }
  if ($post['key'] != variable_get('intertrading_key', '')) {
    watchdog('intertrading', 'server passed wrong key to this client', array(), WATCHDOG_ERROR);
    intertrading_respond(20, array('@server' => $_SERVER['SERVER_NAME'], '@message' => 'wrong key'));
  }
  $GLOBALS['user'] = user_load(variable_get('intertrading_uid', 0));
  return TRUE;
}

function intertrading_client2_receive() {
  $post = intertrading_get_post();
  intertrading_validate_transaction_post($post);
  //build up the transaction object and validate it.
  $form_state['build_info']['args'] = array();
  $form_state['values'] = intertrading_mimic_form_state_values(
    $GLOBALS['user']->uid, //should always be the intertrading account
    $post['dest_url'] == $post['payer_url'] ? $post['payer'] : variable_get('intertrading_uid', 0),
    $post['dest_url'] == $post['payee_url'] ? $post['payee'] : variable_get('intertrading_uid', 0),
    $post['dest_url'] == $post['payee_url'] ? 'remote receipt' : 'remote payment',
    $post['quantity'],
    urldecode($post['description'])
  );

  try {
    $transaction = new stdClass;
    $form = drupal_retrieve_form('transaction_form', $form_state);
    entity_form_submit_build_entity('transaction', $transaction, $form, $form_state);
    field_attach_form_validate('transaction', $transaction, $form, $form_state);
    mcapi_transaction_validate($transaction);
    $form_state['transaction'] = $transaction;
  }
  catch (Exception $e) {
    $message = $e->getMessage();
    if(strpos($message, '>')) {
      list($excess, $limit) = explode('>', $message);
      $code = $data['incoming'] ? 21 : 23;
      $args = array('@quantity' => $excess);
    }
    elseif(strpos($message, '<')) {
      list($excess, $limit) = explode('<', $message);
      $code = $data['incoming'] ? 22 : 24;
      $args = array('@quantity' => $excess);
    }
    else {
      $code = 25;
      $args = array('@message' => $message . print_r($transaction, 1));
    }

    watchdog('intertrading', '@message: @transaction', array(
      '@message' => intertrading_error_codes($code, $args),
      '@transaction' => print_r($transaction, 1)
    ), WATCHDOG_ERROR);
    //we should really convert the excess here
    intertrading_respond($code, $args);
  }

  if ($errors = form_get_errors()) {
    intertrading_respond(25, array('@message' => implode('; ', $errors)));
  }

  transaction_all_submit($form, $form_state);
  intertrading_respond('OK');
}

function intertrading_client_cron(){
  intertrading_handshake();
}

/*
 * Implements variable module's hook_variable_info
 * only block settings really
 */
function intertrading_client_variable_info() {
  $vars['intertrading_server'] = array(
    'type' => 'string',
    'title' => t('Intertrading server url'),
    'default' => '',
    'description' => t('The url of the server. Contact the server administrator to change this'),
    'required' => TRUE,
  );
  $vars['intertrading_ticks'] = array(
    'type' => 'string',
    'title' => t('Ticks'),
    'default' => '10',
    'description' => t('The value of the currency, relative to a common denominator.') . '<br />'.
      t('If 1 tick is 1 minute and your currency is hours, then enter 60'),
    'required' => TRUE,
  );
  $vars['intertrading_currcode'] = array(
    'type' => 'string',
    'title' => t('Currency used for intertrading'),
    'default' => '',
    'required' => TRUE,
  );
  $vars['intertrading_uid'] = array(
    'type' => 'string',
    'title' => t('The account on this exchange used for intertrading'),
    'default' => '',
    'description' => t('Enter the account number'),
    'required' => TRUE,
  );
  $vars['intertrading_description_field'] = array(
    'type' => 'string',
    'title' => t('Description field'),
    'default' => '',
    'description' => t('Choose from these fields which have been added to the transaction entity'),
    'required' => TRUE,
  );
  return $vars;
}
/*
 * implements hook_form_FORM_ID_alter
 * prevent all editing of transactions with the intertrading account
 */
function intertrading_client_form_transaction_form_alter(&$form, &$form_state) {
  if (empty($form_state['build_info']['args'][0])) return;
  if (in_array($form_state['build_info']['args'][0]->type, intertrading_client_mcapi_info_types())) {
    drupal_set_message(t('Transactions with the intertrading account cannot be modified'), 'warning');
    $form['#printed'] = TRUE;
  }
}