<?php
// $Id: 

/*
 * Injects mail template into each mcapi_form
 * Puts the title of each mcapi form mail on the user profile, so the user can can choose which mails to receive
 * Then puts a submit callback on each transaction form, which handles the mail sending, using tokens
 */

/*
 * implements hook_help
 */
function mcapi_forms_help($path) {
  if ($path == 'admin/accounting/forms') {
    return t('Disable any forms not in use');
  }
}

/*
 * Tabs on the currency edit form to compose the notification emails
 */
function mcapi_notification_form_ctools_export_ui_edit_item_form_alter(&$form, $form_state) {
  if ($form_state['plugin']['schema'] != 'mcapi_forms') return;
  $preset = &$form_state['item']->data['email_template'];
  $form['email_template'] = array(
    '#title' => t('Mail notification'),
    '#description' => implode(' ', array(
      t('Edit the e-mail to members who wish to be notified when this form completes.'),
      t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url].'),
      mcapi_get_tokens()
    )),
    '#type' => 'fieldset',
    '#group' => 'mcapi_form_templates',
    '#weight' => 3
  ) + mcapi_notification_fields($preset);
}

function mcapi_unique_mail_subjects($element, $form_state) {
  foreach (mcapi_forms_load() as $mcapi_form) {
    if ($mcapi_form->name == $form_state['values']['info']['name']) continue;
    if (@$mcapi_form->data['email_template']['subject'] == $element['#value']) {
      form_error($element, t('Mail subject line is the same as for form @formname', array('@formname' => $mcapi_form->name)));
    }
  }
}

/*
 * implements hook_form_FORMID_alter
 */
function mcapi_notification_form_mcapi_forms_form_alter(&$form) {
  $form['#submit'][] = 'mcapi_form_mail_handle';
}


/*
 * submit callback ONLY for mcapi_forms
 */
function mcapi_form_mail_handle ($form, $form_state) {
  $form_id = $form_state['build_info']['args'][0]->name;
  $template = isset($form_state['build_info']['args'][0]->data['email_template']) ?
    $form_state['build_info']['args'][0]->data['email_template'] :
    array('subject' => _mcapi_mail_text('subject'), 'body' => _mcapi_mail_text('body'));
  //get the preferences for payer and payee, for this form
  foreach (array('payer', 'payee') as $uid) {
    //check if the user wants notification from this form
    $recipient = user_load($form_state['transaction']->$uid);
    $mail_settings = $recipient->data['mutual_credit_mail'] ? $recipient->data['mutual_credit_mail'] : array();
    $actives = array_filter($mail_settings);
    if (isset($actives[$form_id])) {
      //check that the user isn't sending to himself unwantedly
      if (!$recipient->data['mutual_credit_mail_to_self'] && $recipient->uid == $GLOBALS['user']->uid) continue;
      drupal_mail(
        'mcapimail',
        $form_id,
        $recipient->mail,
        user_preferred_language($recipient),
        array(
          'recipient' => $recipient,
          'transaction' => $form_state['transaction'],
          'template' => $template
        ),
        NULL, //defaults to site_mail
        TRUE
      );
    }
  }
}

/*
 * implements hook_mail
 */
function mcapimail_mail($key, &$message, $params) {
  $variables = array(
    'transaction' => &$params['transaction'],
    'user' => &$params['recipient']
  );
  // We do not sanitize the token replacement, since the output of this
  // replacement is intended for an e-mail message, not a web browser.
  $options = array('language' => $message['language'], 'sanitize' => FALSE);
  
  $message['subject'] =  token_replace($params['template']['subject'], $variables, $options);
  $message['body'][] =  token_replace($params['template']['body'], $variables, $options);
}

function _mcapi_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  switch($key) {
    case 'subject':
      return t('Exchange saved with [transaction:partner]');
      break;
    case 'body':
      return t("[user:name],

A transaction for [transaction:worth] has been saved with [transaction:partner]

More details can be found at
[transaction:uri]

To change your notification settings, visit your profile at
[user:edit-url]

The team at [site:name]");
      break;
  }
}


/*
 * Admin writes the emails using tokens, then, according to some checkboxes in the user profile,
 * this module will email users with notifications about transactions in which they are involved
 */
function mcapi_notification_form_user_profile_form_alter(&$form, $form_state) {
  $data = &$form['#user']->data;
  $subjects = array();
  foreach (mcapi_forms_load() as $mcapi_form) {
    if (!empty($mcapi_form->data['email_template']['subject'])) {
      $subjects[$mcapi_form->name] = $mcapi_form->data['email_template']['subject'];
    }
  }

  $form['mutual_credit_notifications'] = array(
    '#title' => t('Transaction notifications'),
    '#description' => t('The system will inform you when you are involved in transactions'),
    '#type' => 'fieldset',
    'mutual_credit_mail' => array(
      '#title' => t('Notifications by mail'),
      '#description' => t('Choose which mails you want to receive'),
      '#type' => 'checkboxes',
      '#options' => $subjects,
      '#default_value' => isset($data['mutual_credit_mail']) ? $data['mutual_credit_mail'] : array()
    ),
    'mutual_credit_mail_to_self' => array(
      '#title' => t('Mail me even for my own actions'),
      '#type' => 'checkbox',
      '#default_value' => isset($data['mutual_credit_mail_to_self']) ? $data['mutual_credit_mail_to_self'] : 0
    )
  );
}

/*
 * implements hook_user_presave
 * injects the notification preferences into the account object
 */
function mcapi_notification_user_presave(&$edit, $account, $category) {
  if ($category != 'account') return;
  $edit['data']['mutual_credit_mail'] = isset($edit['mutual_credit_mail']) ? $edit['mutual_credit_mail'] : array();
  $edit['data']['mutual_credit_mail_to_self'] = isset($edit['mutual_credit_mail_to_self']) ? $edit['mutual_credit_mail_to_self'] : FALSE;
}



/*
 * Implements ctools hook_ctools_plugin_api

function mcapi_notification_ctools_plugin_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_notification'),
  );
}
 */

function mcapi_notification_fields($preset) {
  return array(
    'subject' => array(
      '#title' => t('Subject'),
      '#description' => t('This string must be unique because it used on the user profile page to determine which forms send them mail'),
      '#type' => 'textfield',
      '#default_value' => empty($preset['subject']) ? _mcapi_mail_text('subject') : $preset['subject'],
      '#maxlength' => 180,
      '#element_validate' => array('mcapi_unique_mail_subjects')
    ),
    'body' => array(
      '#title' => t('Body'),
      '#type' => 'textarea',
      '#default_value' => empty($preset['body']) ? _mcapi_mail_text('body') : $preset['body'],
      '#rows' => 10
    )
  );
}
/*
 * implements hook_install
 */
function mcapi_notification_install() {
  cache_clear_all('mcapi_forms', 'cache');
}


/*
 * Alters mcapi_forms after loading from code OR database
 * adds the mail template to ALL mcapi orms, both in code and in database
 */
function mcapi_notification_mcapi_forms_alter(&$mcapiforms) {
  foreach ($mcapiforms as $name => $mcapi_form) {
    if (empty($mcapi_form->data['email_template'])) {
      //we'll give some unique names for the forms we know about
      switch ($name) {
        case '1stparty': $subject = '[transaction:creator] recorded a transaction'; break;
        case '3rdparty': $subject = 'Transaction recorded with [transaction:partner]'; break;
        case 'correction': $subject = 'Transaction with [transaction:partner] altered'; break;
        case 'one2many': $subject = 'Mass payment from [transaction:payer]'; break;
        case 'many2one': $subject = 'Mass payment to [transaction:payee]'; break;
        case 'add_my_signature': $subject = '[transaction:xid] signed by [user:name]'; break;
        default: debug($name);
      }
      $mcapiforms[$name]->data['email_template'] = array(
        'subject' => $name . ': '. _mcapi_mail_text('subject'),//this ensures it is unique
        'body' => _mcapi_mail_text('body')
      );
    }
  }
}