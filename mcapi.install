<?php


/**
 * @file
 * Install, update and uninstall functions for the transactions module.
 */
/*
 * implements hook_requirements
 * really sorry but I couldn't get entity tokens to work properly with the worth field
 */
function mcapi_requirements($phase) {
  if ($phase != 'update') {
    // Ensure translations don't break at install time
    if (module_exists('entity_token')) {
      return array('mcapi' => array(
        'title' => t('Community Accounting'),
        'value' => t("'Entity tokens' module has a longstanding issue and will only render the worth field as separate properties, currcode, and quantity"),
        'severity' => REQUIREMENT_WARNING,
      ));
    }
  }
  return array();
}

/**
 * Implements hook_install().
 */
function mcapi_install() {
  entity_load('user_role', DRUPAL_AUTHENTICATED_RID)->grantPermission('transact');
  drupal_set_message(t("For ease of setup, authenticated user has been granted 'transact' permission."));

  module_set_weight('mcapi', -1);

  /* if (module_exists('text')) {
    _allow_text_on_transaction();
  }
  //this variable is deleted when the first transaction is erased
  variable_set('change_undo_mode', TRUE);
  //import the translations before building the fields
  mcapi_update_6999();
  mcapi_check_fields();

  variable_set('mcapi_controller_delete_mode', MCAPI_CURRENCY_UNDO_ERASE);

  //create a new user if only user 1 exists.
  if (db_query("SELECT count(uid) FROM {users}")->fetchField() < 2) {
    $account = user_save(NULL, array(
      'name' => 'demo',
      'mail' => 'demo@'.$_SERVER['SERVER_NAME'],
      'pass' => 'demo'
    ));
    drupal_set_message(t(
      "A new user was created for trading. uid: :uid name: demo, pass: demo",
      array(':uid' => $account->uid, ':delete' => l('Delete', 'user/'.$account->uid.'/delete'))
    ));
  } */
}

/**
 * Implements hook_uninstall().
 * Remove any tables or variables that the module sets.
 */
function mcapi_uninstall() {
  //delete all the views this module declared
  if (module_exists('views')) {
    $view_ids = db_query("SELECT vid FROM {views_view} WHERE tag = 'mcapi'");
    while ($vid = $view_ids->fetchField()) {
      db_delete('views_view')
      ->condition('vid', $vid)
      ->execute();
      db_delete('views_display')
      ->condition('vid', $vid)
      ->execute();
    }
  }

  //truncate the tables containing field_api data
  //db_query('TRUNCATE table {field_data_worth}');
  //db_query('TRUNCATE table {field_revision_worth}');

  //need to detatch the worth field before the module will uninstall

  db_query("DELETE FROM {variable} WHERE name LIKE 'mcapi_%'");
  variable_del('currency_default');
  cache()->invalidate('currencies');
}

/**
 * Implements hook_enable
 */
function mcapi_enable() {
  global $language;

  cache_clear_all("entity_info:".$language->language, 'cache');
  //this seems to have been omitted from core...
  currencies_load();
}

function mcapi_disable() {
  cache()->invalidate('currencies');
}

/**
 * Implements of hook_schema)()
 */
function mcapi_schema() {
  $numeric = array(
    'type' => 'numeric',
    'size' => 'normal',
    'precision' => 8,
    'scale' => 2
  );
  $schema['mcapi_transactions'] = array(
    'description' => 'currency transactions between users',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'serial' => array(
        'description' => 'serial number (integer)',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'payer' => array(
        'description' => 'the user id of the payer',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'payee' => array(
        'description' => 'the user id of the payee',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      //quantity is done, perhaps controversially, but the field API
      'type' => array(
        'description' => 'The type of transaction, types are provided by modules',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => "completed, pending, disputed, etc",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'description' => 'nonessential info not fitting into existing fields',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      'creator' => array(
        'description' => 'the user id of the creator',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => "Unixtime that the transaction was recorded",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('xid'),
    'foreign keys' => array(
      'payer' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid')
      ),
      'payee' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid')
      )
    )
  );

  $schema['mcapi_currencies'] = array(
    'description' => 'metadata for currencies, in addition to name and title',
    'fields' => array(
      'currcode' => array(
        'description' => 'the unique currency ID',
        'type' => 'varchar',
        'length' => '12',
      ),
      'data' => array(
        'type' => 'blob',
        'description' => 'A serialized array of options for this display',
        'serialize' => TRUE,
        'serialized default' => 'a:0:{}',
      ),
    ),
    'primary key' => array('currcode'),
    'export' => array(
      'key' => 'currcode',
      'key name' => t('Universal currency code (8 chars, immutable)'),
      'primary key' => 'currcode',
      'identifier' => 'mcapicurrency',
      'api' => array(
        'owner' => 'mcapicurrencies',
        'api' => 'mcapicurrencies_default',
        'minimum_version' => 3,
        'current_version' => 3,
      ),
      'default hook' => 'mcapicurrencies_default',
      //'load all callback' => 'currencies_ctools_load_all',
      //'object' => 'stdClass', //not sure that this is the best way... see ctools_export_new_object
      'admin_title' => 'currcode', //this converts the form field into machine_name I think
      'bulk export' => TRUE,
    )
  );
  $schema['mcapi_submitted'] = array(
    'description' => 'submitted form_build_ids, cleared periodically',
    'fields' => array(
      'form_build_id' => array(
        'description' => 'the unique form build ID',
        'type' => 'varchar',
        'length' => '49',
        'not null' => TRUE,
      ),
      'time' => array(
        'description' => "Unixtime that the form was submitted",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      )
    ),
    'unique keys' => array(
      'name' => array('form_build_id')
    )
  );
  return $schema;
}

function mcapi_check_fields() {
  module_load_install('field');
  field_associate_fields('mcapi');//sets field_config definition to active
  $field = current(_update_7000_field_read_fields(array('module' => 'mcapi'), 'field_name'));
  list($default_field, $default_instance) = _define_worth();
  if (empty($field)) {
    _update_7000_field_create_field($default_field);
  }
  else field_update_field($default_field);
  // Create the instance if needed.
  if (!field_read_instance('transaction', 'worth', 'transaction', array('include_inactive' => TRUE))) {
    _update_7000_field_create_instance($default_field, $default_instance);
  }
  else field_update_instance($default_instance);
}

function _define_worth() {
  $field = array(
    'field_name' => 'worth',
    'type' => 'worth_field',
    'module' => 'mcapi',
    'entity_types' => array('transaction', 'node', 'user'),
    'cardinality' => 1,
  );
  $instance = array(
    'field_name' => $field['field_name'],
    'description' => '',
    'label' => t('Worth'),
    'entity_type' => 'transaction',
    'bundle' => 'transaction',
    'settings' => array(),
    'required' => TRUE,
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'worth_field',
        'weight' => 0,
        'module' => 'mcapi'
      ),
    ),
    'widget' => array(
      'type' => 'worths_widget',
      'module' => 'mcapi',
      'settings' => array(),
      'weight' => 5,
    )
  );
  return array($field, $instance);
}

/* this feature has been commented out entirely for now
function mcapi_controller_options_form_ajax($form, $form_state) {
  $form['master_slave']['mcapi_db_read']['#options'] = array_filter($form_state['values']['mcapi_db_write']);
  return $form;
}
 *
 */

function mcapi_modules_enabled($modules) {
  if (in_array('text', $modules)) {
    _allow_text_on_transaction();
  }
}

function _allow_text_on_transaction() {
  $data = unserialize(db_query("SELECT data from {field_config} where field_name = 'body'")->fetchField());
  if (is_array($data['entity_types']) && !in_array('transaction', $data['entity_types'])) {
    $data['entity_types'][] = 'transaction';
    $data_col = serialize($data);
    db_update('field_config')->fields(array('data' => $data_col))->condition('field_name', 'body')->execute();
  }
}

/**
 * Implements hook_field_schema().
 */
function mcapi_field_schema($field) {
  if ($field['type'] == 'worth_field') {
    return array(
      'columns' => array(
        'currcode' => array(
          'description' => 'The currency ID',
          'type' => 'varchar',
          'length' => '8',
        ),
        'quantity' => array(
          'description' => 'Price',
          'type' => 'numeric',
          'size' => 'normal',
          'precision' => 8,
          'scale' => 2,
          'not null' => TRUE,
          'default' => 0
        )
      )
    );
  }
}

/**
 * Implements hook_update_dependencies().
 */
function mcapi_update_dependencies() {
  $dependencies = array(
    'mcapi' => array(
      '7000' => array(//needs the text module already installed.
        'system' => 7027,
        'filter' => 7000,
        'token' => 7000,
      ),
      '7001' => array(
        'system' => 7034
      ),
    ),
    'system' => array(
      //profile module changes the name of the tables which we need to work with
      //sometimes hook_menu is called before profile_update_7001 and it breaks
      '7001' => array(
        'profile' => 7001
      ),
    )
  );
  return $dependencies;
}

/**
 * Implements hook_update_last_removed().
 */
function mcapi_update_last_removed() {
  return 7023;
}
