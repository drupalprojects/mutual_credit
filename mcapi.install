<?php
// $Id: mcapi.install,v 1.1.2.4 2010/12/15 22:04:03 matslats Exp $

/**
 * @file
 * Install, update and uninstall functions for the transactions module.
 */

/**
 * Implements hook_install().
 */
function mcapi_install() {
  variable_set('comment_transactions', 0);

  //permit authenticated user to trade by default
  if (!user_roles(FALSE, 'transact')) {
    db_merge('role_permission')
    ->key(array('permission' => 'transact', 'rid' => DRUPAL_AUTHENTICATED_RID))
    ->fields(array('module' => 'mcapi'))
    ->execute();
  }
  drupal_set_message(t('By default, authenticated user has been given permission to transact.'));

  //here we set all the module weights together
  //the main module must be heavier than contact module, because it needs to modify after contact_form_alter
  //could all these be done in one query?
  db_update('system')->fields(array('weight' => 0))->condition('name', 'mcapi')->execute();
  db_update('system')->fields(array('weight' => 1))->condition('name', 'mcapi_limits')->execute();
  db_update('system')->fields(array('weight' => 2))->condition('name', 'mcapi_services')->execute();
  db_update('system')->fields(array('weight' => 3))->condition('name', 'mcapi_limits_equation')->execute();

  //allow the body field to be added to currencies and transactions
  $data = unserialize(db_query("SELECT data from {field_config} where field_name = 'body'")->fetchField());
  foreach (array('currency', 'transaction') as $ent) {
    if (!in_array($ent, $data['entity_types'])) {
      $data['entity_types'][] = $ent;
    }
  }
  $data_col = serialize($data);
  db_update('field_config')->fields(array('data' => $data_col))->condition('field_name', 'body')->execute();

  if (module_exists('image')) {
    mcapi_modules_enabled(array('image'));
  }
}


/**
 * Implements hook_uninstall().
 * Remove any tables or variables that the module sets.
 */
function mcapi_uninstall() {
  $view_ids = db_query("SELECT vid FROM {views_view} WHERE name LIKE 'mcapi_%'");
  while ($vid = $view_ids->fetchField()) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("DELETE FROM {views_view} WHERE vid = %d", $vid) */
    db_delete('views_view')
    ->condition('vid', $vid)
    ->execute();
    db_delete('views_display')
    ->condition('vid', $vid)
    ->execute();
  }
  /* this doesn't work, perhaps because the controller has been disabled
  //delete all the currencies properly, with their field data
  module_load_include('inc', 'mcapi', 'entities');
  $controller = entity_get_controller('currency');
  $result = db_query("SELECT cid from {mcapi_currencies}");
  while ($cid = $result->Fetchfield()) {
    $controller->delete($cid);
  }
   * So instead we're going to manually delete the fields
   * Except the instances don't delete unless they are mentioned in the fields' "bundles" property, which is undocumented.
   * IN fact we can't even retrieve the instances here, possibly because the entity is already gone
   * So we delete the instances manually
   */
  //lose the currency entity fields and instances
  db_query("DELETE FROM field_config_instance WHERE entity_type = 'currency'");
  db_query("DELETE FROM field_data_body WHERE entity_type = 'currency'");
  db_query("DELETE FROM field_revision_body WHERE entity_type = 'currency'");
  //db_query("DELETE FROM file_usage WHERE type = 'currency'");
  

  variable_del('mcapi_controller');
  variable_del('mcapi_db_read');
  variable_del('mcapi_db_write');
}

/**
 * Implements hook_enable
 */
function mcapi_enable() {
  //we need to refresht this variable because it's not set on installation
  //$drupal_static_fast['entity_info'] = &drupal_static('entity_get_info');
  //$drupal_static_fast['entity_info'] = array();
  global $language;
  $langcode = $language->language;
  cache_clear_all("entity_info:$langcode", 'cache');
  module_load_include('inc', 'mcapi');
  //this seems to have been omitted from core...
  menu_rebuild();
  drupal_set_message(t('A default currency will be created the first time you visit !link',
    array('!link' => l('admin/accounting', 'admin/accounting'))
  ), 'warning');
}

/**
 * Implements of hook_schema)()
 */
function mcapi_schema() {
  //the schema has two modes, depending on whether we store the amounts as integers or floats.
  module_load_include('inc', 'mcapi');
  $numeric = array(
    'type' => 'numeric',
    'size' => 'normal',
    'precision' => 8,
    'scale' => 2
  );
  $schema['mcapi_transactions'] = array(
    'description' => 'currency transactions between users',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'serial',
        'size' => 'normal',
      ),
      'description' => array(
        'description' => 'a brief description of what was exchanged',
        'type' => 'text',
        'size' => 'small',
      ),
      'payer_uid' => array(
        'description' => 'the user id of the payer',
        'type' => 'int',
        'size' => 'normal',
      ),
      'payee_uid' => array(
        'description' => 'the user id of the payee',
        'type' => 'int',
        'size' => 'normal',
      ),
      'cid' => array(
        'description' => 'the nid of the currency used',
        'type' => 'int',
        'size' => 'normal',
      ),
      'quantity' => $numeric + array(
        'description' => 'the number of units transferred',
      ),
      //views is likely to want to see this, but it can have many uses
      'type' => array(
        'description' => 'The type of transaction, types are provided by modules',
        'type' => 'varchar',
        'length' => '32',
      ),
      'state' => array(
        'description' => "State of the transaction - completed, pending, disputed, etc",
        'type' => 'int',
        'size' => 'normal',
      ),
        /*
      'parent' => array(
        'description' => 'nid of parent transaction',
        'type' => 'int',
        'size' => 'normal',
      ),*/
      'data' => array(
        'description' => 'nonessential info not fitting into existing fields',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      'creator' => array(
        'description' => 'the user id of the creator',
        'type' => 'int',
        'size' => 'normal',
      ),
      'created' => array(
        'description' => "Unixtime that the transaction was recorded",
        'type' => 'int',
        'size' => 'normal',
      ),
      'modifier' => array(
        'description' => 'the user id of the modifier',
        'type' => 'int',
        'size' => 'normal',
      ),
      'modified' => array(
        'description' => "Unixtime that the transaction was modified",
        'type' => 'int',
        'size' => 'normal',
      ),
    ),
    'primary key' => array('xid'),
  );

  //This table cointains one row for every user/currency and contains balances and personal balance limits
  //The rows are created and deleted in hook_user, and when currencies are added and removed.
  $schema['mcapi_cache'] = array(
    'description' => 'cached balances, turnovers and pending balances, for exposure to views',
    'fields' => array(
      'uid' => array(
        'description' => 'the user to which this entry is attached',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'the currency id, where there is more than one currency',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'cleared_balance' => $numeric + array(
        'description' => 'balance excluding pending transactions',
        'not null' => TRUE,
        //'default' => 0,
      ),
      'gross_in' => $numeric + array(
        'description' => "sum of all this user's income in this currency",
        'not null' => TRUE,
        //'default' => 0,
      ),
      'gross_out' => $numeric + array(
        'description' => "sum of all this user's ougoings in this currency",
        'not null' => TRUE,
        //'default' => 0,
      ),
      'count' => array(
        'description' => "number of cleared transactions",
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      )
    ),
    'unique keys' => array(
      'uid_cid' => array('uid', 'cid')
    )
  );

  $schema['mcapi_currencies'] = array(
    'description' => 'metadata for currencies, in addition to name and title',
    'fields' => array(
      'cid' => array(
        'description' => 'the unique currency ID',
        'type' => 'serial',
        'size' => 'normal',
      ),
      'uid' => array(
        'description' => 'the creator of the currency',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'name' => array(
        'description' => 'the name of the currency',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE
      ),
      'divisions_conf' => array(
        'description' => 'fractions of the currency unit',
        'type' => 'text',
        'size' => 'small',
      ),
      'format' => array(
        'description' => "How to display the amount using normal characters",
        'type' => 'varchar',
        'length' => '64',
        'default' => '@minus<strong>Cc</strong>@integer:@subdivision',
      ),
      'data' => array(
        'description' => 'nonessential info not fitting into existing fields',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('cid'),
    'unique keys' => array(
      'name' => array('name')
    )
  );
  return $schema;
}



function mcapi_modules_enabled($modules) {
  $fields = field_read_fields();
  if (in_array('image', $modules)) {
    $instance = field_info_instance('currency', 'field_image', 'currency');
    if (empty($instance)) {
      $currency_icon = array(
        'field_name' => 'field_image',
        'entity_type' => 'currency',
        'label' => 'Icon',
        'bundle' => 'currency',
        'description' => t('A small graphical representation of the currency'),
        'required' => FALSE,
        'settings' => array(
          'file_directory' => 'field/image',
          'file_extensions' => 'png gif jpg jpeg',
          'max_filesize' => '2048',
          'max_resolution' => '20x20',
          'min_resolution' => '12x12',
          'alt_field' => FALSE,
          'title_field' => TRUE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'image',
            'settings' => array('image_style' => 'curr_icon', 'image_link' => ''),
            'weight' => -1,
          ),
        ),
      );
      field_create_instance($currency_icon);
    }
    $instance = field_info_instance('currency', 'body', 'currency');
    if (empty($instance)) {
      $rationale = array(
        'field_name' => 'body',
        'entity_type' => 'currency',
        'bundle' => 'currency',
        'label' => t('Rationale'),
        'widget_type' => 'text_textarea_with_summary',
        'description' => t('What are the credentials of this currency? Richard Douthwaite poses these questions:') . theme('item_list', array('items' => array(
            t('Who issues the money?'),
            t('Why do they issue it?'),
            t('Where is the money created?'),
            t('What gives the money its value?'),
            t('How is the money created?'),
            t('When is the money created?'),
          ), 'title' => NULL, 'type' => 'ol')),
        'settings' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'text_default',
          ),
        )
      );
      field_create_instance($rationale);
    }
  }
}

function mcapi_modules_disabled($modules) {
  $fields = field_read_fields();
  if (in_array('image', $modules)) {
    field_delete_field('curr_icon');
  }
  if (in_array('contact', $modules)) {
    field_delete_field('notify_threshhold');
  }
}

function check_default_currency() {
  $count = db_select('mcapi_currencies', 'c')->fields('c')->countquery()->execute()->fetchField();
  if ($count) return;
  
  $currency = array(
    'name' => t('Community Coins'),
    'divisions_conf' => '00',
    'format' => '@minus<strong>Cc</strong>@integer:@subdivision',
    'body' => array (
      'en' => array (
        0 => array (
          'value' => t('This is the default currency'),
          'format' => 'filtered_html',
        ),
      ),
    ),
    'data' => array(
      'delete_mode' => 2,
      'update_mode' => 2,
      'user_editable_mode' => 2,
      'write_validate' => TRUE,
      'privacy' => 2,
      'access_callback' => 'user_access',
    )
  );
  currency_controller('save', (object)$currency);
  
  $new_curr = db_select('mcapi_currencies', 'c')->fields('c', array('cid', 'name'))->execute()->fetch();
  drupal_set_message(t('Your default currency is @name.', array('@name' => $new_curr->name)));
  drupal_set_message(t('N.B. The default currency does not allow negative balances: !edit', array('!edit' => l(t('edit'), 'currency/' . $new_curr->cid . '/edit'))));
}

/*
 *
 */
function mcapi_controller_options_form($form_state) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  $controllers = file_scan_directory(drupal_get_path('module', 'mcapi'), '/.controller/');
  foreach ($controllers as $path => $file){
    $options[$file->name] = $file->filename;
  }

  $form['mcapi_controller'] = array(
    '#title' => 'Entity controller file',
    '#description' => t('Choose which .controller file, in modules/mutual_credit directory to use'),
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => variable_get('mcapi_controller', 'default'),
    '#ajax' => array(
      'callback' => 'mcapi_controller_options_form_ajax',
      'wrapper' => 'mcapi-controller-options-form',
    ),
  );
  if (variable_get('mcapi_controller', 'default') == 'default') {
    global $databases;
    if (count($databases) == 1) return;
    foreach($databases as $key => $data) {
      $options[$key] = $key;
    }
    $form['master_slave'] = array(
      '#title' => t('Databases'),
      '#description' => t('See @file for how to enable more databases.', array('@file' => 'settings.php')) .' '.
        t('Write accounting information to more than one database, and read from one database, making a sort of master/slave arrangement.') .' '.
        t("Don't forget each database connection itself can have master/slave arrangement, but we are concerned only with accounting here."),
      '#type' => 'fieldset',
      '#attributes' => array('id' => 'master-slave'),
    );
    $form['master_slave']['mcapi_db_write'] = array(
      '#title' => t('Write accounting information to'),
      '#description' => t('See @file for how to enable more databases.', array('@file' => 'settings.php')) .' '.
        t('Use with caution as fields added to transactions and currencies will still be saved locally'),
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => variable_get('mcapi_db_write', array('default'=>'default')),
      '#ajax' => array(
        'callback' => 'mcapi_controller_options_form_ajax',
        'wrapper' => 'master-slave',
      ),
    );
    $form['master_slave']['mcapi_db_read'] = array(
      '#title' => t('Read accounting information from'),
      '#type' => 'select',
      '#options' => variable_get('mcapi_db_write', array('default'=>'default')),
      '#default_value' => variable_get('mcapi_db_read', 'default'),
      '#weight' => 1,
    );
  }
  return system_settings_form($form);
}
function mcapi_controller_options_form_ajax($form, $form_state) {
  $form['master_slave']['mcapi_db_read']['#options'] = array_filter($form_state['values']['mcapi_db_write']);
  return $form['master_slave'];
}