<?php

/**
 * @file
 * Install, update and uninstall functions for the transactions module.
 */

use Drupal\user\Entity\User;
use Drupal\mcapi\Entity\Wallet;

/**
 * Implements hook_requirements().
 */
function mcapi_requirements($phase) {
  if ($phase == 'runtime') {
    $result = [
      'title' => t('Transaction index table'),
    ];
    // Check that the index table is integral.
    if (\Drupal::entityTypeManager()->getStorage('mcapi_transaction')->indexCheck()) {
      $result['severity'] = REQUIREMENT_OK;
      $result['description'] = t('Index table adds up');
    }
    else {
      $result['severity'] = REQUIREMENT_ERROR;
      $result['description'] = t(
        'Index table does not add up. Try rebuilding it at %link',
        ['%link' => Link::fromTextAndUrl('admin/accounting/misc', Url::fromRoute('mcapi.admin_misc'))]
      );
    }
    return [$result];
  }
  return [];
}

/**
 * Implements hook_install().
 */
function mcapi_install() {
  // Mcapi has to be after field_ui for mcapi_local_tasks_alter.
  module_set_weight('field_ui', -1);

  // We need to deal with existing users, especially user 1 in accordance with
  // the default wallet settings put every user in the default exchange.
  $users = User::loadMultiple();
  foreach ($users as $account) {
    if ($account->id() == 0) {
      continue;
    }
    // Give every existing user a wallet.
    Wallet::create([
      'holder' => $account,
    ])->save();
  }
}

/**
 * Implements hook_modules_installed().
 */
function mcapi_modules_installed($modules) {
  if (in_array('migrate', $modules)) {
    $map_process = [
      'plugin' => 'static_map',
      'bypass' => TRUE,
    ];
    $config = \Drupal::configFactory()->getEditable('migrate.migration.d7_field');
    $process = $map_process + [
      'source' => 'entity_type',
      'map' => [
        'transaction' => 'mcapi_transaction',
      ]
    ];
    $config->set('process.entity_type', $process);

    $process = $map_process + [
      'source' => 'field_name',
      'map' => [
        'transaction_description' => '',
      ],
    ];
    $config->set('process.field_name', $process);

    $map = $config->get('process.type.map');
    $map['worth_field'] = 'worth';
    // This will probably be automated @see d7_field.yml
    $config->set('process.type.map', $map);
    $config->save();

    $config = \Drupal::configFactory()->getEditable('migrate.migration.d7_field_instance');
    $process['source'] = 'bundle';
    $config->set('process.entity_type', $process)->set('process.bundle', $process)->save();
  }
}
