<?php

/**
 * @file
 * Install, update and uninstall functions for the transactions module.
 */

/**
 * Implements hook_install().
 */
function mcapi_install() {
  //this helps ensure this module runs before all the stuff that might depend on it
  module_set_weight('mcapi', -1);
  //create default content entities.

  //default exchange
  entity_create('mcapi_exchange', array(
    'name' => t(
      'First !sitename exchange',
      array('!sitename' => \Drupal::config('system.site')->get('name'))
    ),
    'uid' => '1',
    'visibility' => EXCHANGE_VISIBILITY_RESTRICTED,
    'open' => TRUE,
    'active' => TRUE,
    'field_currencies' => array('credunit')
  ))->save();
  //add the field_exchanges entity_reference instance to the user entity


  //put user 1 in the default exchange
  $account = user_load(1);
  $account->set('field_exchanges', array(1));
  $account->save();

  //according to the default settings this will have autocreated a wallet for the exchange !

  //Create a wallet for user 1, which was created before this module was installed.
  $props = array(
    //'name' => '',
    'entity_type' => 'user',
    'pid' => 1,
    'viewers' => 'dunno',
    'payees' => 'dunno',
    'payers' => 'dunno',
  );
  entity_create('mcapi_wallet', $props)->save();

}

/**
 * Implements hook_uninstall().
 * Remove any tables or variables that the module sets.
 */
function mcapi_uninstall() {

}

/**
 * Implements of hook_schema)()
 */
function mcapi_schema() {
  $numeric = array(
    'type' => 'numeric',
    'size' => 'normal',
    'precision' => 8,
    'scale' => 2
  );
  $schema['mcapi_transactions'] = array(
    'description' => 'currency transactions between users',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'Description of the Transaction.',
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ),
      'serial' => array(
        'description' => 'serial number (integer)',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'parent' => array(
        'description' => 'Xid of the parent transaction',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'payer' => array(
        'description' => 'Wallet id id of the payer',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'payee' => array(
        'description' => 'Wallet id id of the payee',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of transaction, types are provided by modules',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'exchange' => array(
        'description' => 'The exchange in which this transaction happened',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'state' => array(
        'description' => 'Completed, pending, disputed, etc',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'description' => 'nonessential info not fitting into existing fields',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      'creator' => array(
        'description' => 'the user id of the creator',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Unixtime that the transaction was recorded',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('xid'),
    'unique keys' => array(
      'uuid' => array('uuid')
    ),
    'indexes' => array(
      'parent' => array('parent'),
    ),
    //drupal doesn't actually do anything with these
    'foreign keys' => array(
      'payer' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'payee' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      )
    )
  );

  $schema['mcapi_transactions_worths'] = array(
    'description' => 'Transaction worth amounts.',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'currcode' => array(
        'description' => 'The currency ID',
        'type' => 'varchar',
        'length' => '32',
      ),
      'value' => array(
        'description' => 'Value',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('xid', 'currcode'),
    'foreign keys' => array(
      'mcapi_transactions' => array(
        'table' => 'mcapi_transactions',
        'columns' => array('xid' => 'xid'),
      ),
    ),
  );

  $schema['mcapi_transactions_index'] = array(
    'description' => 'currency transactions between users',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'serial' => array(
        'description' => 'serial number (integer)',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'wallet_id' => array(
        'description' => 'the id of the wallet we are viewing',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'partner_id' => array(
        'description' => 'the id of the 2nd wallet in the transaction',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'completed, pending, disputed, etc',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'type' => array(
        'description' => 'The type of transaction, types are provided by modules',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Unixtime that the transaction was recorded',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'currcode' => array(
        'description' => 'The currency ID',
        'type' => 'varchar',
        'length' => '32',
      ),
      'incoming' => array(
        'description' => 'Income',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'outgoing' => array(
        'description' => 'Outgoing',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'diff' => array(
        'description' => 'Change in balance',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'volume' => array(
        'description' => 'Volume',
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'exchange' => array(
        'description' => 'The exchange in which this transaction happened',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'child' => array(
        'description' => 'whether this transaction is a child',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('xid', 'wallet_id', 'partner_id', 'currcode'),
    'indexes' => array(
      'wallet_id' => array('wallet_id'),
      'partner_id' => array('partner_id'),
    ),
  );
  $schema['mcapi_wallets'] = array(
    'description' => 'Wallets',
    'fields' => array(
      'wid' => array(
        'description' => 'the unique wallet ID',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'entity_type' => array(
        'description' => 'The parent entity_type',
        'type' => 'varchar',
        'length' => '32',
      ),
      'pid' => array(
        'description' => 'The parent entity_id',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'name' => array(
        'description' => "The owner's name for this wallet",
        'type' => 'varchar',
        'length' => '32',
      ),
      'viewers' => array(
        'description' => "The wallet's view access controller",
        'type' => 'varchar',
        'length' => '32',
      ),
      'payers' => array(
        'description' => "The wallet's payee access controller",
        'type' => 'varchar',
        'length' => '32',
      ),
      'payees' => array(
        'description' => "The wallet's payer access controller",
        'type' => 'varchar',
        'length' => '32',
      ),
        /*
      'settings' => array(
        'description' => 'any config needed for the access controller',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      */
    ),
    'primary key' => array('wid'),
    //TODO Gordon is this about right?
    'unique keys' => array(
  	  'unique' => array('name', 'entity_type', 'pid')
    ),
    'foreign keys' => array(
      'mcapi_transactions_payee' => array(
        'table' => 'mcapi_transactions',
        'columns' => array('wid' => 'payee'),
      ),
      'mcapi_transactions_payer' => array(
        'table' => 'mcapi_transactions',
        'columns' => array('wid' => 'payer'),
      ),
    ),
  );
  $schema['mcapi_exchanges'] = array(
    'description' => 'Exchanges, or marketplaces',
    'fields' => array(
      'id' => array(
        'description' => 'the unique exchange ID',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'name' => array(
        'description' => "The full name of the exchange",
        'type' => 'varchar',
        'length' => '32',
      ),
      'uid' => array(
        'description' => 'The one user responsible for administration',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'TRUE if the exchange is current and working',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'open' => array(
        'description' => 'TRUE if the exchange is open to outside trade',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'visibility' => array(
        'description' => 'Visibility of impersonal data in the exchange',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => 'restricted'
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    )
  );
  return $schema;
}

/*
 * change the database tabless
 */
function mcapi_update_8000() {
  //change the mcapi_transactions table
  //change the field_data_worth table into mcapi_transaction_data
  //create the mcapi_index table
  $tables = mcapi_schema();
  db_create_table('mcapi_transactions_index', $tables['mcapi_transactions_index']);
}
/*
 * migrate any other data around
 */
function mcapi_update_8001() {
  //put the transaction description data into the entity table
  mcapi_index_rebuild();

  update_variables_to_config('node.misc', array(
    // 'old_variable' => 'new_config.sub_key'
  ));
  //replace the token namespace in the transaction sentence from 'transaction' to 'mcapi'
}


/*
 * remove unneeded data
 */
function mcapi_update_8002() {
  db_query('DROP VIEW mcapi_index');
  //deleted the field_data_worth field and tables (if not used elsewhere)
  //delete the transaction description field and tables if not used elsewhere

}
