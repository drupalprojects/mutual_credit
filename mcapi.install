<?php
// $Id: mcapi.install,v 1.1.2.4 2010/12/15 22:04:03 matslats Exp $

/**
 * @file
 * Install, update and uninstall functions for the transactions module.
 */

/**
 * Implements hook_install().
 */
function mcapi_install() {

  //permit authenticated user to trade by default
  if (!user_roles(FALSE, 'transact')) {
    db_merge('role_permission')
    ->key(array('permission' => 'transact', 'rid' => DRUPAL_AUTHENTICATED_RID))
    ->fields(array('module' => 'mcapi'))
    ->execute();
  }
  drupal_set_message(t("Authenticated user has been granted 'transact' permission."));

  //here we set all the module weights together
  //the main module must be heavier than contact module, because it needs to modify after contact_form_alter
  //could all these be done in one query?
  db_update('system')->fields(array('weight' => -1))->condition('name', 'mcapi')->execute(); //before ctools
  db_update('system')->fields(array('weight' => 2))->condition('name', 'mcapi_currencies')->execute();
  db_update('system')->fields(array('weight' => 2))->condition('name', 'mcapi_webforms')->execute();
  db_update('system')->fields(array('weight' => 2))->condition('name', 'mcapi_limits')->execute();
  db_update('system')->fields(array('weight' => 3))->condition('name', 'mcapi_services')->execute();
  db_update('system')->fields(array('weight' => 3))->condition('name', 'mcapi_pending')->execute();
  db_update('system')->fields(array('weight' => 4))->condition('name', 'mcapi_limits_equation')->execute();
  db_update('system')->fields(array('weight' => 4))->condition('name', 'mcapi_display')->execute();

  //allow the body field to be added to currencies and transactions
  if ($data = unserialize(db_query("SELECT data from {field_config} where field_name = 'body'")->fetchField())) {
    foreach (array('currency', 'transaction') as $ent) {
      if (!in_array($ent, $data['entity_types'])) {
        $data['entity_types'][] = $ent;
      }
    }
    $data_col = serialize($data);
    db_update('field_config')->fields(array('data' => $data_col))->condition('field_name', 'body')->execute();
  }
}


/**
 * Implements hook_uninstall().
 * Remove any tables or variables that the module sets.
 */
function mcapi_uninstall() {
  $view_ids = db_query("SELECT vid FROM {views_view} WHERE name LIKE 'mcapi_%'");
  while ($vid = $view_ids->fetchField()) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("DELETE FROM {views_view} WHERE vid = %d", $vid) */
    db_delete('views_view')
    ->condition('vid', $vid)
    ->execute();
    db_delete('views_display')
    ->condition('vid', $vid)
    ->execute();
  }
  /*
   * So instead we're going to manually delete the fields
   * Except the instances don't delete unless they are mentioned in the fields' "bundles" property, which is undocumented.
   * IN fact we can't even retrieve the instances here, possibly because the entity is already gone
   * So we delete the instances manually
   */
  $fields = db_query("SELECT {field_name} FROM {field_config_instance} WHERE entity_type = 'transaction'")->fetchCol();
  foreach ($fields as $fieldname) {
    //this is temporary!!! might delete fields in use by other entities.
    //field_delete_field($fieldname);
    //db_query("DROP table 'field_data_$fieldname'");
  }
  //lose the currency entity fields and instances
  //db_query("DELETE FROM {field_config} WHERE type = 'worth'");
  db_query("DELETE FROM {field_config_instance} WHERE entity_type = 'transaction'");
  db_query("DELETE FROM {field_data_body} WHERE entity_type = 'transaction'");
  db_query("DELETE FROM {field_revision_body} WHERE entity_type = 'transaction'");

  //this is a hack. Without it the re-installation breaks
  //db_query("UPDATE field_config SET deleted = 0 WHERE type = 'worth_field'");
  
  variable_del('mcapi_controller');
  variable_del('mcapi_db_read');
  variable_del('mcapi_db_write');
  variable_del('currency_default');
  cache_clear_all('currencies', 'cache');
}

/**
 * Implements hook_enable
 */
function mcapi_enable() {
  global $language;
  cache_clear_all("entity_info:".$language->language, 'cache');
  //this seems to have been omitted from core...
  menu_rebuild();
}

/**
 * Implements of hook_schema)()
 */
function mcapi_schema() {
  $numeric = array(
    'type' => 'numeric',
    'size' => 'normal',
    'precision' => 8,
    'scale' => 2
  );
  $schema['mcapi_transactions'] = array(
    'description' => 'currency transactions between users',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'serial',
        'size' => 'normal',
      ),
      'description' => array(
        'description' => 'a brief description of what was exchanged',
        'type' => 'text',
        'size' => 'small',
      ),
      'payer' => array(
        'description' => 'the user id of the payer',
        'type' => 'int',
        'size' => 'small',
      ),
      'payee' => array(
        'description' => 'the user id of the payee',
        'type' => 'int',
        'size' => 'small',
      ),
      'type' => array(
        'description' => 'The type of transaction, types are provided by modules',
        'type' => 'varchar',
        'length' => '32',
      ),
      'state' => array(
        'description' => "completed, pending, disputed, etc",
        'type' => 'int',
        'size' => 'normal',
      ),
      'data' => array(
        'description' => 'nonessential info not fitting into existing fields',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      'creator' => array(
        'description' => 'the user id of the creator',
        'type' => 'int',
        'size' => 'small',
      ),
      'created' => array(
        'description' => "Unixtime that the transaction was recorded",
        'type' => 'int',
        'size' => 'normal',
      ),
      'modifier' => array(
        'description' => 'the user id of the modifier',
        'type' => 'int',
        'size' => 'small',
      ),
      'modified' => array(
        'description' => "Unixtime that the transaction was modified",
        'type' => 'int',
        'size' => 'normal',
      ),
    ),
    'primary key' => array('xid'),
  );
  return $schema;
}



/*
 *
 */
function mcapi_controller_options_form($form_state) {
  module_load_include('controller', 'mcapi', variable_get('mcapi_controller', 'default'));
  $controllers = file_scan_directory(drupal_get_path('module', 'mcapi'), '/.controller/');
  foreach ($controllers as $path => $file){
    $options[$file->name] = $file->filename;
  }

  $form['mcapi_controller'] = array(
    '#title' => 'Entity controller file',
    '#description' => t('Choose which .controller file, in modules/mutual_credit directory to use'),
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => variable_get('mcapi_controller', 'default'),
    '#ajax' => array(
      'callback' => 'mcapi_controller_options_form_ajax',
      'wrapper' => 'mcapi-controller-options-form',
    ),
  );
  if (variable_get('mcapi_controller', 'default') == 'default') {
    global $databases;
    if (count($databases) == 1) return;
    foreach($databases as $key => $data) {
      $options[$key] = $key;
    }
    $form['master_slave'] = array(
      '#title' => t('Databases'),
      '#description' => t('See @file for how to enable more databases.', array('@file' => 'settings.php')) .' '.
        t('Write accounting information to more than one database, and read from one database, making a sort of master/slave arrangement.') .' '.
        t("Don't forget each database connection itself can have master/slave arrangement, but we are concerned only with accounting here."),
      '#type' => 'fieldset',
      '#attributes' => array('id' => 'master-slave'),
    );
    $form['master_slave']['mcapi_db_write'] = array(
      '#title' => t('Write accounting information to'),
      '#description' => t('See @file for how to enable more databases.', array('@file' => 'settings.php')) .' '.
        t('Use with caution as fields added to transactions and currencies will still be saved locally'),
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => variable_get('mcapi_db_write', array('default'=>'default')),
      '#ajax' => array(
        'callback' => 'mcapi_controller_options_form_ajax',
        'wrapper' => 'master-slave',
      ),
    );
    $form['master_slave']['mcapi_db_read'] = array(
      '#title' => t('Read accounting information from'),
      '#type' => 'select',
      '#options' => variable_get('mcapi_db_write', array('default'=>'default')),
      '#default_value' => variable_get('mcapi_db_read', 'default'),
      '#weight' => 1,
    );
  }
  return system_settings_form($form);
}
function mcapi_controller_options_form_ajax($form, $form_state) {
  $form['master_slave']['mcapi_db_read']['#options'] = array_filter($form_state['values']['mcapi_db_write']);
  return $form['master_slave'];
}


/**
 * Implements hook_field_schema().
 */
function mcapi_field_schema($field) {
  if ($field['type'] == 'worth_field') {
    return array(
      'columns' => array(
        'currcode' => array(
          'description' => 'The currency ID',
          'type' => 'varchar',
          'length' => '8',
        ),
        'quantity' => array(
          'description' => 'Price',
          'type' => 'numeric',
          'size' => 'normal',
          'precision' => 8,
          'scale' => 2
        )
      )
    );
  }
}


function mcapi_modules_enabled($modules) {
  //we need to run the field hooks to create the field.
  if (in_array('mcapi', $modules)) {
    $field = field_read_field('worth', array('include_inactive' => TRUE));
    if (!$field) { debug("creating field 'worth'");
      $field = array(
        'field_name' => 'worth',
        'type' => 'worth_field',
        'entity_types' => array('transaction'),
      );
      field_create_field($field);
    }
    else {
      debug("activating preexisting field 'worth'");
      db_query("UPDATE {field_config} SET active = 1 WHERE field_name = 'worth'");
    }
    // Create the instance if needed.
    if (!field_read_instance('transaction', 'worth', 'transaction', array('include_inactive' => TRUE))) {
      $instance = array(
        'field_name' => 'worth',
        'label' => 'Value',
        'entity_type' => 'transaction',
        'bundle' => 'transaction',
        'settings' => array(),
        'required' => TRUE,
        'display' => array(
          'default' => array(
            'label' => 'hidden',
            'type' => 'text_default',
            'weight' => 0,
          ),
        ),
      );
      debug('creating instance of field worth');
      field_create_instance($instance);
    }
  }
}