<?php
// $Id: mcapi.install,v 1.1.2.4 2010/12/15 22:04:03 matslats Exp $

/**
 * @file
 * Install, update and uninstall functions for the transactions module.
 */


/**
 * Implements hook_install().
 */
function mcapi_install() {
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('transact'));
  drupal_set_message(t("For ease of setup, authenticated user has been granted 'transact' permission."));

  _mcapi_module_weights();

  if (module_exists('text')) {
    _allow_text_on_transaction();
  }
  //this variable is deleted when the first transaction is erased
  variable_set('change_undo_mode', TRUE);

  mcapi_check_fields();
  return;
  //create a new user if only user 1 exists.
  if (db_query("SELECT count(uid) FROM {users}")->fetchField() < 2) {
    $account = user_save(NULL, array(
      'name' => 'demo',
      'mail' => 'demo@'.$_SERVER['SERVER_NAME'],
      'pass' => 'demo'
    ));
    drupal_set_message("A new user, !name was created for trading. name: demo, pass", array('!name' => format_username($account)));
  }
}

/**
 * Implements hook_uninstall().
 * Remove any tables or variables that the module sets.
 */
function mcapi_uninstall() {
  //delete all the views this module declared
  if (module_exists('views')) {
    $view_ids = db_query("SELECT vid FROM {views_view} WHERE tag = 'mcapi'");
    while ($vid = $view_ids->fetchField()) {
      db_delete('views_view')
      ->condition('vid', $vid)
      ->execute();
      db_delete('views_display')
      ->condition('vid', $vid)
      ->execute();
    }
  }

  //truncate the tables containing field_api data
  //db_query('TRUNCATE table {field_data_worth}');
  //db_query('TRUNCATE table {field_revision_worth}');

  variable_del('mcapi_controller');
  variable_del('mcapi_db_read');
  variable_del('mcapi_db_write');
  variable_del('currency_default');
  cache_clear_all('currencies', 'cache');
}

/**
 * Implements hook_enable
 */
function mcapi_enable() {
  global $language;

  cache_clear_all("entity_info:".$language->language, 'cache');
  //this seems to have been omitted from core...
  menu_rebuild();
}
function mcapi_disable() {
  cache_clear_all('currencies', 'cache');
}

/**
 * Implements of hook_schema)()
 */
function mcapi_schema() {
  $numeric = array(
    'type' => 'numeric',
    'size' => 'normal',
    'precision' => 8,
    'scale' => 2
  );
  $schema['mcapi_transactions'] = array(
    'description' => 'currency transactions between users',
    'fields' => array(
      'xid' => array(
        'description' => 'the unique transaction ID',
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'serial' => array(
        'description' => 'serial number (integer)',
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'payer' => array(
        'description' => 'the user id of the payer',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'payee' => array(
        'description' => 'the user id of the payee',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      //quantity is done, perhaps controversially, but the field API
      'type' => array(
        'description' => 'The type of transaction, types are provided by modules',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => "completed, pending, disputed, etc",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'description' => 'nonessential info not fitting into existing fields',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      'creator' => array(
        'description' => 'the user id of the creator',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => "Unixtime that the transaction was recorded",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('xid'),
    'foreign keys' => array(
      'payer' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid')
      ),
      'payee' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid')
      )
    )
  );

  $schema['mcapi_currencies'] = array(
    'description' => 'metadata for currencies, in addition to name and title',
    'fields' => array(
      'currcode' => array(
        'description' => 'the unique currency ID',
        'type' => 'varchar',
        'length' => '12',
      ),
      'data' => array(
        'type' => 'blob',
        'description' => 'A serialized array of options for this display',
        'serialize' => TRUE,
        'serialized default' => 'a:0:{}',
      ),
    ),
    'primary key' => array('currcode'),
    'unique keys' => array(
      'name' => array('currcode')
    ),
    'export' => array(
      'key' => 'currcode',
      'key name' => t('Universal currency code (8 chars, immutable)'),
      'primary key' => 'currcode',
      'identifier' => 'mcapicurrency',
      'api' => array(
        'owner' => 'mcapicurrencies',
        'api' => 'mcapicurrencies_default',
        'minimum_version' => 3,
        'current_version' => 3,
      ),
      'default hook' => 'mcapicurrencies_default',
      //'load all callback' => 'currencies_ctools_load_all',
      //'object' => 'stdClass', //not sure that this is the best way... see ctools_export_new_object
      'admin_title' => 'currcode', //this converts the form field into machine_name I think
      'bulk export' => TRUE,
    )
  );
  $schema['mcapi_submitted'] = array(
    'description' => 'submitted form_build_ids, cleared periodically',
    'fields' => array(
      'form_build_id' => array(
        'description' => 'the unique form build ID',
        'type' => 'varchar',
        'length' => '49',
        'not null' => TRUE,
      ),
      'time' => array(
        'description' => "Unixtime that the form was submitted",
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
      )
    ),
    'unique keys' => array(
      'name' => array('form_build_id')
    )
  );
  return $schema;
}

function mcapi_check_fields() {
  field_associate_fields('mcapi');//sets field_config definition to active
  $fields = _update_7000_field_read_fields(array('module' => 'mcapi'), 'field_name');
  
  if (empty($fields['worth'])) {
    $field = array(
      'field_name' => 'worth',
      'type' => 'worth_field',
      'module' => 'mcapi',
      'entity_types' => array('transaction', 'node', 'user'),
    );
    _update_7000_field_create_field($field);
  }
  // Create the instance if needed.
  if (!field_read_instance('transaction', $field['field_name'], 'transaction', array('include_inactive' => TRUE))) {
    $instance = array(
      'field_name' => $field['field_name'],
      'description' => t('The value of the exchange'),
      'label' => t('Worth'),
      'entity_type' => 'transaction',
      'bundle' => 'transaction',
      'settings' => array(),
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'worth_field',
          'weight' => 0,
          'module' => 'mcapi'
        ),
      ),
      'widget' => array(
        'type' => 'worth_widget',
        'module' => 'mcapi',
        'settings' => array()
      ),
    );
    _update_7000_field_create_instance($field, $instance);
  }
}

function _mcapi_module_weights() {
  //here we set all the module weights together
  //the main module must be heavier than contact module, because it needs to modify after contact_form_alter
  //could all these be done in one query?
  $weights = array(
    -1 => array('mcapi'),//before ctools
    1 => array('mcapi_forms', 'mcapi_limits', 'intertrading'),
    2 => array('mcapi_signatures', 'mcapi_sms'),
    3 => array('mcapi_index_views', 'mcapi_sms')
  );
  foreach ($weights as $weight => $modules) {
    db_update('system')->fields(array('weight' => $weight))->condition('name', $modules)->execute();
  }
}

function mcapi_controller_options_form_ajax($form, $form_state) {
  $form['master_slave']['mcapi_db_read']['#options'] = array_filter($form_state['values']['mcapi_db_write']);
  return $form;
}

function mcapi_modules_enabled($modules) {
  if (in_array('text', $modules)) {
    _allow_text_on_transaction();
  }
}

function _allow_text_on_transaction() {
  $data = unserialize(db_query("SELECT data from {field_config} where field_name = 'body'")->fetchField());
  if (is_array($data['entity_types']) && !in_array('transaction', $data['entity_types'])) {
    $data['entity_types'][] = 'transaction';
    $data_col = serialize($data);
    db_update('field_config')->fields(array('data' => $data_col))->condition('field_name', 'body')->execute();
  }
}

/**
 * Implements hook_field_schema().
 */
function mcapi_field_schema($field) {
  if ($field['type'] == 'worth_field') {
    return array(
      'columns' => array(
        'currcode' => array(
          'description' => 'The currency ID',
          'type' => 'varchar',
          'length' => '8',
        ),
        'quantity' => array(
          'description' => 'Price',
          'type' => 'numeric',
          'size' => 'normal',
          'precision' => 8,
          'scale' => 2
        )
      )
    );
  }
}

/**
 * Implements hook_update_dependencies().
 */
function mcapi_update_dependencies() {
  $dependencies = array(
    'mcapi' => array(
      '7000' => array(//needs the text module already installed.
        'system' => 7027,
        'filter' => 7000,
        'token' => 7000,
      ),
      '7001' => array(
        'system' => 7034
      )
    )
  );
  return $dependencies;
}

/**
 * implements hook_update_n
 * create new tables and enable new modules
 */
function mcapi_update_7000() {
  _mcapi_module_weights();
  $tables = mcapi_schema();
  db_create_table('mcapi_currencies', $tables['mcapi_currencies']);
  db_create_table('mcapi_transactions', $tables['mcapi_transactions']);
  module_enable(array('token', 'mcapi_limits', 'accountant_ui', 'mcapi_forms'), TRUE);
}

/**
 * copy the currency definitions into the new variable, or the new table
 */
function mcapi_update_7001() {
  module_load_include('mcapicurrencies_default.inc', 'mcapi');
  module_load_include('inc', 'mcapi', 'currencies');
  //make the tables declared in this module

  //first of all we need to tweak the currency objects, which used to be nodes and now are ctools objects.
  $old_currencies = db_query("SELECT * FROM {mc_currencies} c LEFT JOIN {node} n ON c.nid = n.nid ORDER BY c.nid")->fetchAllAssoc('nid');
  $currency = current(mcapi_mcapicurrencies_default())->data;
  foreach ($old_currencies as $nid => $old_currency) {
    foreach (unserialize($old_currency->data) as $key => $val) {
      $old_currency->$key = $val;
    }
    //get the default currency for this module, and populate with the old default currency
    //the first currency is called def_drup
    $currcode = @$default ? strtolower(str_replace(' ', '_', substr($old_currency->title, 0, 8))) : 'def_drup';
    $currcodes[$nid] = $currcode;//use this later
    $default = TRUE;
    $currency->info['currcode'] = $currcode;
    $currency->human_name = $old_currency->title;
    $currency->uid = $old_currency->uid;
    $currency->display = array(
      'format' => str_replace(array('[', ']', '@icon'), array('@', '', ''), $old_currency->symbol),
      'divisions' => $old_currency->divisions ? CURRENCY_DIVISION_MODE_CUSTOM : $old_currency->sub,
      'divisions_setting' => trim($old_currency->divisions)
    );
    //there are 3 possible modes for old limits callbacks - none, user or global
    //we're going to assume for upgrading, that user limits was enabled, since there's no way of knowing
    $currency->limits['limits_callback'] = 'limits_personal';
    $currency->limits['limits_personal']['min'] = $old_currency->min;
    $currency->limits['limits_personal']['max'] = $old_currency->max;
    module_load('mcapi_signatures');//makes available the constant TRANSACTION_STATE_PENDING
    $currency->transaction_access[TRANSACTION_STATE_PENDING] = array(
      'transaction_access_participants' => 'transaction_access_participants',
      'transaction_access_accountant' => 'transaction_access_accountant'
    );
    //update the users' balance limits
    $uids = db_select('users', 'u')->fields('u', array('uid'))->execute()->fetchCol();
    $accounts = user_load_multiple($uids);
    foreach ($accounts as $account) {
      if (isset($account->mc_limits[$old_currency->nid])) {
        $edit['limits_personal'][$currcode] = $account->mc_limits[$old_currency->nid];
        user_save($account, $edit);
      }
    }
    $row = array(
      'currcode' => $currcode,
      'data' => $currency
    );
    drupal_write_record('mcapi_currencies', $row);
  }

  db_query("DELETE FROM {node_type} WHERE module = 'mcapi'");
  $instances = field_info_instances('node', 'exchange');
  foreach ($instances as $instance) {
    foreach (array('data', 'revision') as $x) {
      $table_name = 'field_'. $x .'_'. $instance['field_name'];
      db_query("UPDATE {$table_name} SET entity_type = 'transaction', bundle = 'transaction' WHERE bundle = 'exchange'");
    }
  }
  db_query("UPDATE {field_config_instance} SET entity_type = 'transaction', bundle = 'transaction'
    WHERE entity_type = 'node' AND bundle = 'exchange'");
  drupal_set_message(t('@num currencies have been upgraded', array('@num' => count($old_currencies))));
}

/**
 * implements hook_update_n
 * create the new 'worth' field and attach it to the transaction entity
 */
function mcapi_update_7002() {
  variable_set('mcapi_controller_delete_mode', MCPI_CURRENCY_UNDO_ERASE);
  mcapi_check_fields();
  $fieldname = 'transaction_description';
  //add the description field, which was intrinsic in v2
  $field = array(
    'entity_types' => array(
      'transaction',
    ),
    'settings' => array(
      'max_length' => 255
    ),
    'field_name' => $fieldname,
    'type' => 'text',
    'module' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
    'columns' => array(
      'value' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'summary' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'bundles' => array(
      'transaction' => array(
        'transaction',
      ),
    ),
  );
  _update_7000_field_create_field($field);
  $instance = array(
    'field_name' => $fieldname,
    'label' => t('Description'),
    'description' => '',
    'entity_type' => 'transaction',
    'bundle' => 'transaction',
    'settings' => array(),
    'required' => TRUE,
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'widget' => array(
      'weight' => '3',
      'type' => 'text_textfield',
      'settings' => array(
        'rows' => '1'
      )
    )
  );
  _update_7000_field_create_instance($field, $instance);

  variable_set('transaction_description_field', $fieldname);
  //field_delete_instance(field_info_instance('transaction', 'body', 'transaction'));
  
  //we also need to update any taxonomy terms
  foreach (db_query("SELECT field_name FROM {field_config} WHERE field_name != 'taxonomyextra'")->fetchCol() as $fieldname) {
    db_query("UPDATE {field_data_$fieldname} SET entity_type = 'transaction', bundle = 'transaction' WHERE entity_type = 'node' AND bundle = 'exchange'");
    db_query("UPDATE {field_revision_$fieldname} SET entity_type = 'transaction', bundle = 'transaction' WHERE entity_type = 'node' AND bundle = 'exchange'");
  }

  //update the field definitions
  db_query("DELETE FROM {field_config_instance} WHERE entity_type = 'node' AND bundle = 'currency'");

  //sort out the field definitions
  db_query("UPDATE {field_config_instance}
    SET entity_type = 'transaction', bundle = 'transaction'
    WHERE entity_type = 'node' AND bundle = 'exchange'"
  );
  //cleanup
  variable_del('mc_tabs_css');
}

/**
 * convert the exchange nodes to transaction entities
 */
function mcapi_update_7003() {
  //now migrate the transactions...
  module_load_include('module', 'mcapi');//for the transaction_state definitions
  module_load_install('field_sql_storage');//for the field saving function
  $states = array(
    -1 => MCPI_CURRENCY_UNDO_ERASE,
    0 => TRANSACTION_STATE_FINISHED,
  );
  _mcapi_update_pending($states);

  $currs = db_query("SELECT nid, title FROM {node} where type = 'currency' ORDER BY nid ASC")->fetchAllKeyed();
  $types = array(
    'outgoing signed' => '1stparty',
    'incoming signed' => '1stparty',
    'outgoing direct' => '1stparty',
    'incoming direct' => '1stparty',
    'onetomany' => 'one2many',
    'onetoall' => 'one2many',
    'manytoone' => 'one2many',
    'alltoone' => 'one2many',
  );

  //convert each old transaction into a transaction object
  $transactions = db_query("SELECT * FROM {mc_exchanges} x
    RIGHT JOIN {node} n on n.nid = x.nid
    LEFT JOIN {node_revision} v on n.vid = v.vid
    WHERE x.state > -1
    ORDER BY n.created"
  )->fetchAllAssoc('nid');
  $serial = 1;

  mcapi_init();//ensure the currencies are loaded up
  $currencies = &drupal_static('currencies');
  $currcodes = array_keys($currencies);
  debug('check that the field_data_worth table has a value for currcode', $old->cid);
  debug('transaction conversion may need to be done in batches');
  foreach ($transactions as $xid => $old) {
    //bypasses the transaction controller
    $transaction = array(
      'xid' => $xid,
      'serial' => $serial,
      'payer' => $old->payer_uid,
      'payee' => $old->payee_uid,
      'state' => $states[$old->state],
      'created' => $old->created,
      'creator' => $old->uid,
      'type' => isset($types[$old->exchange_type]) ? $types[$old->exchange_type] : '3rdparty',
      'data' => array(),
    );
    drupal_write_record('mcapi_transactions', $transaction);
    $worth_field = array(
      LANGUAGE_NONE => array(
        0 => array(
          'quantity' => $old->quantity,
          'currcode' => $currcodes[$old->cid] ? $currcodes[$old->cid] : 'def_drup'
        )
      )
    );
    _update_7000_field_sql_storage_write('transaction', 'transaction', $xid, $xid, 'worth', $worth_field);
    $description_field = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $old->title
        )
      )
    );

    if ($description_field_name = variable_get('transaction_description_field', '')) {
      _update_7000_field_sql_storage_write('transaction', 'transaction', $xid, $xid, $description_field_name, $description_field);
    }
    //tidy up
    if ($transaction->state == TRANSACTION_STATE_PENDING) $pending = TRUE;
    $serial++;
  }
  if (empty($pending)) {
    module_disable(array('mcapi_signatures'));
  }
  foreach (db_query("SELECT nid FROM {node} WHERE type = 'currency'")->fetchCol() as $nid) {
    node_delete($nid);
  }
  db_query("DELETE FROM {menu_links} WHERE link_path = 'exchange/add'");
  return t('Migrated currencies and transactions');

}

/*
 * implements hook_user_presave
 * we can user this hook in the module upgrade because it's not used anywhere else in the module
 */
function mcapi_user_presave(&$edit, $account, $category) {
  unset($edit['mc_limits'], $edit['mc_notification_throttle']);
}

function _mcapi_update_pending(&$states) {
  //replace the old module with the new, so as to retain the version number, and keeping it installed
  db_delete('system')->condition('name', 'mcapi_signatures')->execute();
  db_update('system')->fields(array('name' => 'mcapi_signatures'))->condition('name', 'mc_signatures')->execute();

  //rename and update the table
  if(db_query("SHOW TABLES LIKE 'mc_unsigned'")->fetchfield()) {//this prevents an error if we try to do it twice or if the module isn't installed
    db_rename_table('mc_unsigned', 'mcapi_signatures');
    module_load_install('mcapi_signatures');
    $tables = mcapi_signatures_schema();
    db_change_field('mcapi_signatures', 'nid', 'serial', $tables['mcapi_signatures']['fields']['serial']);
    db_add_field('mcapi_signatures', 'pending', $tables['mcapi_signatures']['fields']['pending']);
  }
  //having made the structural changes,
  if (db_query("SELECT schema_version FROM {system} WHERE name = 'mc_signatures'")->fetchField()) return;//the module was never installed

  $states[TRANSACTION_STATE_PENDING] = TRANSACTION_STATE_PENDING;

  $d6tokens = array('!username', '!site', '!uri', '!date', '!login_url', '!creator', '!exchange_uri', '!summary');
  $d7tokens = array('[transaction:creator]', '[site:name]', '[transaction:uri]', '[transaction:created]', '[site:login-url]', '[transaction:creator]', '[transaction:uri]', '[transaction:summary]');
  variable_set('mcapi_sign_notify_template', array(
    'subject' => str_replace($d6tokens, $d7tokens, variable_get('mc_signatures_notification_subject')),
    'body' => str_replace($d6tokens, $d7tokens, variable_get('mc_signatures_notification_body')),
  ));
  variable_set('mcapi_signed_off_notify_template', array(
    'subject' => str_replace($d6tokens, $d7tokens, variable_get('mc_signatures_signoff_subject')),
    'body' => str_replace($d6tokens, $d7tokens, variable_get('mc_signatures_signoff_body')),
  ));

  variable_del('mc_signatures_sure');
  variable_del('mc_subtypes');
  variable_del('mc_signatures_signoff_subject');
  variable_del('mc_signatures_signoff_body');
  variable_del('mc_signatures_notification_subject');
  variable_del('mc_signatures_notification_body');
  variable_del('mc_notification_update_body');
  variable_del('mc_notification_update_subject');
}


/**
 * attempts to make blocks equivalent between d6 and d7
 */
function mcapi_update_7004() {
  db_query("UPDATE {block} SET pages = REPLACE(pages, 'exchange', 'transaction')");
  db_query("UPDATE {block} SET module = 'mcapi_forms' WHERE module = 'mcapi_webforms'");
  //work with the default webforms
  db_query("UPDATE {block} SET delta = '3rdparty' WHERE delta = 'mc_webform_3rdparty_form'");
  db_query("UPDATE {block} SET delta = '1stparty' WHERE delta = 'start_exchange'");

  //blocks from the mc_display view, user_rankings
  db_query("UPDATE {block} SET module = 'views', delta = 'user_rankings-block_promiscuity' WHERE delta = 'user_rankings-block_1'");
  db_query("UPDATE {block} SET module = 'views', delta = 'user_rankings-block_volumes' WHERE delta = 'user_rankings-block_2'");
  db_query("UPDATE {block} SET module = 'views', delta = 'user_rankings-block_trades' WHERE delta = 'user_rankings-block_3'");
  db_query("UPDATE {block} SET module = 'views', delta = 'user_rankings-block_incomes' WHERE delta = 'user_rankings-block_4'");
  db_query("UPDATE {block} SET module = 'views', delta = 'user_rankings-block_expenditures' WHERE delta = 'user_rankings-block_5'");

  //delete blocks issued by mcapi v3 so we can upgrade the v2 block names
  db_query("DELETE FROM {block} WHERE delta IN ('transactions-who_paid_whom', 'balances')");

  db_query("UPDATE {block} SET module = 'mcapi', delta = 'balances' WHERE delta = 'mc_balances'");
  db_query("UPDATE {block} SET module = 'views', delta = 'running_balance-block_run_bal' WHERE delta = 'mc_balance_history'");
  db_query("UPDATE {block} SET module = 'views', delta = 'running_balance-block_user_sum' WHERE delta = 'balance_ometer'");
  db_query("UPDATE {block} SET module = 'views', delta = 'transactions-who_paid_whom' WHERE delta = 'mc_exchanges_all-block_1'");//who gave to whom?
  db_query("UPDATE {block} SET module = 'views', delta = 'mcapi_pending-my_pending' WHERE delta = 'mc_exchanges_pending-block_1'");//I must sign
  db_query("UPDATE {block} SET module = 'views', delta = 'mcapi_pending-user_pending' WHERE delta = 'mc_exchanges_pending-block_2'");//user must sign
  
  db_query("DELETE FROM {block} WHERE module = 'mcapi_limits' AND delta = 'balance_limits'");
  db_query("UPDATE {block} SET module = 'mcapi_limits' WHERE delta = 'balance_limits'");

  db_query("UPDATE {block} SET module = 'webforms' WHERE module LIKE '%c_webform%'");


  db_delete('block')->condition('delta', array(
    'mc_exchanges_all-block_2',//description field is no longer part of this module
    'mc_exchanges_pending-block_3',//statement is no longer available in a block
    'mc_statement' //statement is no longer available in a block
  ))->execute();
}

/**
 * implements hook_update_n
 * updates the permissions from D6
 */
function mcapi_update_7005() {
  $map = array(
    'exchange' => 'transact',
    'edit all exchanges' => 'manage all exchanges',
    'configure currencies' => 'configure all currencies',
  );
  foreach ($map as $from => $to) {
    db_query("UPDATE {role_permission} SET permission = :to WHERE permission = :from", array(':from' => $from, ':to' => $to));
  }
  db_query("DELETE FROM {role_permission} WHERE permission IN ('view all exchanges', 'edit own finished exchanges', 'view all balances')");
}
/**
 * update the transaction notification handling
 */
function mcapi_update_7006() {
  $actions = mcapi_action_info();
  $form = mcapi_transaction_mail_action_form();
  //special exception for mail_all_signatories_action
  if (isset($form['mail'])) $form = $form['mail'];
  //this is tricky but we're getting the default values out of the action form
  foreach (element_children($form) as $fieldname) {
    $params[$fieldname] = $form[$fieldname]['#default_value'];
  }
  if (variable_get('mc_notification_subject', '')) {
    $params['subject'] = variable_get('mc_notification_subject', '');
    $params['body'] = variable_get('mc_notification_body', '');
  }
  include_once('includes/actions.inc');
  $aid = actions_save('mcapi_transaction_mail_action', 'transaction', $params, $actions['mcapi_transaction_mail_action']['label']);
  // Borrowed from trigger_assign_form_submit
  db_insert('trigger_assignments')->fields(
    array(
      'hook' => 'transactions_state',
      'aid' => $aid,
      'weight' => 0,
    )
  )->execute();

  variable_del('mc_notification_subject');
  variable_del('mc_notification_body');
}

/**
 * Cleanup
 */
function mcapi_update_7009() {
  $tables = mcapi_schema();
  //in case the following doesn't work properly
  db_query("update {system} SET weight = 2 where name = 'mcapi_signatures'");
  if (module_exists('mcapi_pending')) {
    db_query("DELETE FROM {system} WHERE name = 'mcapi_signatures'");
    db_query("UPDATE {system} set name = 'mcapi_signatures' WHERE name = 'mcapi_pending'");
    drupal_set_message("Best delete the mcapi_pending module, which has been replaced by mcapi_signatures");
  }
  else {
    db_query("DELETE FROM {system} WHERE name = 'mcapi_pending'");
  }
  module_enable(array('mcapi_index_views'), TRUE);
  $nids = db_query("SELECT nid FROM {node} where type = 'exchange'")->fetchCol();
  node_delete_multiple($nids);
  db_create_table('mcapi_submitted', $tables['mcapi_submitted']);

  db_drop_table('mc_currencies');
  db_drop_table('mc_cache');
  db_drop_table('mc_exchanges');
}
