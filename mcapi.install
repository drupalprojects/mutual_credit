<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the exchanges module.
 */

function mcapi_requirements($phase) {
  $req = array();
  if ($phase == 'install') {
    $req[] = array(
      'title' => t("Disabled transactions module"),
      'description' => t('The new mcapi module conflicts with transactions module'),
      'severity' => module_exists('transactions') ? REQUIREMENT_ERROR : REQUIREMENT_OK,
    );
  }
  return $req;
}

/**
 * Implementation of hook_install().
 */
function mcapi_install() {
  drupal_install_schema('mcapi');

  variable_set('comment_exchanges', 0);

  //add a permission so that trading can begin
  if (!user_roles(FALSE, 'exchange')) {
    $perm = db_result(db_query("SELECT perm FROM {permission} WHERE rid = %d", array(':rid' => DRUPAL_AUTHENTICATED_RID)));
    $perm .= ', exchange';
    db_query("UPDATE {permission} SET perm = '%s' WHERE rid = %d", array(':perm'=>$perm, ':rid' => DRUPAL_AUTHENTICATED_RID));
  }
  if (!variable_get('mc_subtypes', NULL)) {
    variable_set('mc_subtypes', array(
      1 => 'Claim',
      2 => 'Gift',
      4 => 'Invoice',
      8 => 'Pay'
    ));
  }
  //here we set all the module weights together
  db_query("UPDATE {system} SET weight = -1 WHERE name = 'mcapi'");
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'mc_webform_1stparty'");
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'mc_multiple'");
  db_query("UPDATE {system} SET weight = 2 WHERE name = 'mc_signatures'");
}

/**
 * Implementation of hook_uninstall().
 * http://api.drupal.org/api/function/hook_uninstall/6
 * Remove any tables or variables that the module sets.
 */
function mcapi_uninstall() {
  //delete all the currency nodes, because we lose the table that contains their metadata
  $result = db_query("SELECT nid FROM node WHERE type = 'currency'");
  while ($nid = db_result($result)) {
    node_delete($nid);
  }

  drupal_uninstall_schema('mcapi');
  //find all the views provided by the module, which are now broken, and remove them and their displays
  if(module_exists('views')) {
    $view_ids = db_query("SELECT vid FROM {views_view} WHERE name LIKE 'mc_%'");
  }
  while ($vid = db_result($view_ids)) {
    db_query("DELETE FROM {views_view} WHERE vid = %d", $vid);
    db_query("DELETE FROM {views_display} WHERE vid = %d", $vid);
  }
  variable_del('cforge_report');
}

function mcapi_enable() {
  //by using enable instead of install, we have access to node hooks
  if (!db_result(db_query("SELECT count(nid) FROM {mc_currencies}"))) {
    $props = array('color' => '00ff00', 'divisions' => '', 'ratings' => '', 'subtype_bitmask' => 3);
    $currency = (object)array(
      'title' => 'Community Coins',
      'body' => t('This is the default currency'),
      'type' => 'currency',
      'status' => TRUE,
      'uid' => 1,
      'max' => '',
      'min' => 0,
      'data' => $props,
      'icon' => drupal_get_path('module', 'mcapi') .'/theme/cc.png',
    );
    node_save($currency); //for some reason this doesn't save into the other table - like node
    //db_query("UPDATE {mc_currencies} (max, min, icon, data) SET (%d, %d, %d, '%s', '%s')",
    //  '', '0', drupal_get_path('module', 'mcapi') .'/theme/cc.png', serialize($props)
    //);
    drupal_set_message(t('Your defult currency is @name. !edit', array(
      '@name' => $currency->title,
      '!edit' => l(t('edit'), 'node/'.$currency->nid.'/edit')
    )));
    if (db_result(db_query("SELECT nid from {node} where type = 'transaction'"))) {
      mc_upgrade();
    }
  }
}

/**
 * Implementation of hook_schema)().
 * http://api.drupal.org/api/function/hook_schema/6
 * You don't have to deal with the different SQL dialects for table creation and alteration of the supported database engines.
 */
//TODO what about storing all this info in the user table instead?
function mcapi_schema() {
  //the schema has two modes, depending on whether we store the amounts as integers or floats.
  module_load_include('inc', 'mcapi');

  $type = mcapi_value_type_needed();

  $schema['mc_exchanges'] = array(
    'description' => 'currency exchanges between users',
    'fields' => array(
      'nid' => array(
        'description' => t('the node to which this entry is attached'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'payer_uid' => array(
        'description' => t('the user id of the payer'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'payee_uid' => array(
        'description' => t('the user id of the payee'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'cid' => array(
        'description' => t('the nid of the currency used'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'quantity' => array(
        'description' => t('the number of units transferred, (@type)', array('@type' => 'integer')),
        'type' => $type,
        'size' => 'normal'
      ),
      //this needs to be a field for views to see and for easy calculations
      'rating' => array(
        'description' => t('the payer assessment of the goods or services'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
        'default' => NULL,
      ),
      //views is likely to want to see this, but it can have many uses
      'exchange_type' => array(
        'description' => t('The type of exchange, types are provided by modules'),
        'type' => 'varchar',
        'length' => '32',
      ),

      'state' => array(
        'description' => t("State of the exchange - completed, pending, disputed, etc"),
        'type' => 'int',
        'size' => 'normal',
      ),
      'parent' => array(
        'description' => t('nid of parent exchange'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'data' => array(
        'description' => 'any other serialized data that modules want to store',
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      )
    ),
  );
  /*
   * This table cointains one row for every user/currency and contains balances and personal balance limits
   * The rows are created and deleted in hook_user, and when currencies are added and removed.
   *
   */
  $schema['mc_cache'] = array(
    'description' => t('cached balances, turnovers and pending balances, for exposure to views'),
    'fields' => array(
      'uid' => array(
        'description' => t('the node to which this entry is attached'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => t('the currency id, where there is more than one currency'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'cleared_balance' => array(
        'description' => 'balance excluding pending exchanges, (integer)',
        'type' => $type,
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pending_dif' => array(
        'description' => 'Sum of pending exchanges, (integer)',
        'type' => $type,
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'gross_in' => array(
        'description' => "sum of all this user's income in this currency, (integer)",
        'type' => $type,
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'gross_out' => array(
        'description' => "sum of all this user's ougoings in this currency, (integer)",
        'type' => $type,
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'rating' => array(
        'description' => "average rating for transactions by this user in this currency",
        'type' => 'float',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'count' => array(
        'description' => "number of transactions",
        'type' => 'int',
        'size' => 'small',
        'default' => 0,
      )
    ),
    'unique keys' => array(
      'uid_cid' => array('uid', 'cid')
    )
  );

  $schema['mc_currencies'] = array(
    'description' => t('metadata for currencies, in addition to name and title'),
    'fields' => array(
      'nid' => array(
        'description' => t('the node id to which this currency is attached'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'min' => array(
        'description' => t("the default minumim balance allowed to tbe held"),
        'type' => 'varchar',
        'length' => '7',
        'default' => NULL,
      ),
      'max' => array(
        'description' => t("the default maximum balance allowed to tbe held"),
        'type' => 'varchar',
        'length' => '7',
        'default' => NULL,
      ),
      'data' => array(
        'description' => t("An array of other properties"),
        'type' => 'text',
        'size' => 'small',
        'serialize' => TRUE,
      ),
      'icon' => array(
        'description' => t("location of the currency icon"),
        'type' => 'varchar',
        'length' => '128',
      ),
      'sub' => array(
        'description' => t("Units and values after the decimal point"),
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
      ),
      'value' => array(
        'description' => t("the nominal value of this currency expressed as an objective value (0 means not interchanagable)"),
        'type' => 'int',
        'size' => 'normal',
        'default' => 0,
      ),
    )
  );
  return $schema;
}

//upgrade from version 1.0
function mc_upgrade() {
  module_load_include('inc', 'mcapi');

  $result = db_query("SELECT nid, payer_uid, payee_uid, cid, quantity, transaction_type as exchange_type, state, quality as rating
    FROM {cc_transactions}
    WHERE state > -1");
  while ($transaction = db_fetch_object($result)) {
    $transaction->exchange_type = mcapi_upgrade_exchange_types($transaction->exchange_type);
    drupal_write_record('mc_exchanges', $transaction);
  }

  db_query("UPDATE {node} set type = 'exchange' WHERE type = 'transaction'");

  //pending transactions
  if (db_result(db_query("SELECT nid FROM {cc_transactions} WHERE state = 1"))) {
    drupal_install_modules(array('mc_signatures'));
    $result = db_query("SELECT nid, completer_uid as uid FROM {cc_transactions} WHERE state = 1");
    $rows = array();
    while ($row = db_fetch_array($result)) {
      $rows[] = '('. implode(',', $row) .')';
    }
    $query = "INSERT INTO {mc_unsigned} (nid, uid) VALUES ". implode(',', $rows);
    db_query($query);
  }

  //overwrite the v2 default currency with the default currency from v1
  $v2cur = node_load(array('type' => 'currency'));
  $v1cur = variable_get('cc_default_currency', NULL);

  $v2cur->title = $v1cur->title;
  $v2cur->min = $v1cur->min_balance;
  $v2cur->max = $v1cur->max_balance;
  $v2cur->icon = $v1cur->icon;
  $v2cur->sub = intval($v1cur->division != 'integer');
  $v2cur->color = $v1cur->color;
  $v2cur->data = array(
    'subtype_bitmask' => 3,
  );
  if ($v1cur->division == 'sixtieths') {
    $v2cur->data['divisions'] = '0|'. t('hours') ."\n15|". t('and a quarter') ."\n30|". t('and a half') ."\n45|". t('and three quarters');
  }
  node_save($v2cur);
  $cid = $v2cur->nid; //for use later
  //division wasn't saving properly, we'll just write it directly here

  drupal_set_message(t('Currency saved as node:<pre>@cur</pre>', array('@cur' => $v2cur->nid)));
  drupal_set_message(t('The exchange sub-types need to be upgraded by hand. !link', array('!link'=> l($v2cur->title, 'node/'.$v2cur->nid.'/edit'))));

  db_query("UPDATE {mc_exchanges} set cid = %d", array(':nid' => $v2cur->nid));

  //Then the permissions
  $permissions_old_new = array(
    'use local currency' => 'exchange', //works
    'transactions' => 'exchanges',
    'configure economy' => 'declare currency, configure economy, create 3rdparty exchanges',
    'access content' => 'view exchange stats'
  );
  $result = db_query("SELECT * FROM {permission}");
  while ($row = db_fetch_object($result)) {
    $row->perm = strtr($row->perm, $permissions_old_new);
    drupal_write_record('permission', $row, array('pid'));
  }

  $results = db_query("SELECT uid FROM {users} WHERE uid > 0");
  while ($uid = db_result($results)) {
    $account = user_load($uid);
    $limits = array(
      $cid => array(
        'max'=> $account->balances[0]['max_balance'],
        'min' => $account->balances[0]['min_balance'],
      )
    );
    $throttle = 0;
    if ($account->starter_notification) $throttle = 2;
    if ($account->completer_notification) $throttle = 3;
    $edit = array(
      'mc_notification_throttle' => $throttle,
      //'mailme_I_start' => $account->starter_notification,
      //'mailme_involved' => $account->completer_notification,
      'mc_limits' => $limits,
      'balances' => NULL,
      'max0' => NULL,//unset from v1
      'min0' => NULL,//unset from v1
      'completer_notification' => NULL,
      'starter_notification' => NULL,
    );
    user_save($account, $edit);
  }

  //blocks offered by transactions.module
  db_query("UPDATE {blocks} SET module = 'mc_webform_1stparty', delta = 'start_exchange' WHERE module = 'transactions' AND delta = 'cc_new_transaction'");
  db_query("UPDATE {blocks} SET module = 'mcapi' WHERE module = 'transactions'"); //actually this applies to stats which aren't done yet
  db_query("UPDATE {blocks} SET delta = 'mc_all_exchanges-block_2' WHERE module = 'views' AND delta = 'cc_transaction_list-block_2'");
  db_query("UPDATE {blocks} SET delta = 'mc_all_exchanges-block_1' WHERE module = 'views' AND delta = 'cc_transaction_list-block_3'");
  //set any block visibilities that depended on old pathnames
  db_query("UPDATE {blocks} SET pages = REPLACE (pages, 'transaction', 'exchange')");

  db_query("DELETE FROM {menu_links} WHERE path LIKE 'admin/marketplace%");

  drupal_set_message(t('Uninstall transactions module when you are confident all data has been migrated.'));
  mc_balances_refresh();
  if (function_exists('mc_cache_set_stats')) mc_cache_set_stats();
}

function mcapi_upgrade_exchange_types($old) {
  $conversion  = array(
    'incoming_direct' => 'incoming direct',
    'outgoing_direct' => 'outgoing direct',
    'incoming_confirm' => 'incoming signed',
    'outgoing_confirm' => 'outgoing signed',
    'incoming_mass_direct' => 'many2one',
    'outgoing_mass_direct' => 'one2many',
    'incoming_mass_confirm' => 'many2one',
    'outgoing_mass_confirm' => 'one2many',
    '3rdparty_confirm' => '3rdparty',
  );
  if (isset($conversion[$old]))return $conversion[$old];
  else return '3rdparty';
}


function mcapi_value_type_needed(){
  $result = @db_query("SELECT sub from {mc_currencies} WHERE sub = 1");
  return @db_result($result) ? 'float' : 'int';
}

function mcapi_value_type_existing(){
  //get the existing type by looking at schema api
  $table  = drupal_get_schema('mc_exchanges');
  return $table['fields']['quantity']['type'];
}

/*
 * Change all the fields which store currency quantities between float and int
 * It looks like Drupals representation of the db (the schema) doesn't change when schema api changes the db
 * So we can't interrogate schema api to find out what the changed database is like.
 *
 */
function refresh_quantity_field_types() {
  $table  = drupal_get_schema('mc_exchanges');
  $existing_type = mcapi_value_type_existing();
  //get the needed type by looking at the currency table
  $needed_type = mcapi_value_type_needed();
  if ($existing_type == $needed_type) {
    return;
  }

  $newfield = array(
    'type' => $needed_type,
    'size' => 'normal'
  );

  $newfield['description'] = "number of units transacted, ($needed_type)";
  db_change_field($ret, 'mc_exchanges', 'quantity', 'quantity', $newfield);

  $newfield['description'] = "sum of all completed exchanges for this user in this currency, ($needed_type)";
  db_change_field($ret, 'mc_cache', 'cleared_balance', 'cleared_balance', $newfield);

  $newfield['description'] = "the sum of all this user's income in this currency, ($needed_type)";
  db_change_field($ret, 'mc_cache', 'gross_in', 'gross_in', $newfield);

  $newfield['description'] = "the sum of all this user's expenditure in this currency, ($needed_type)";
  db_change_field($ret, 'mc_cache', 'gross_out', 'gross_out', $newfield);
  //changing the fields is not the same as changing the schema. We need to rebuild the schema at the same time
  drupal_get_schema(NULL, TRUE);

  //check that it all worked
  if (mcapi_value_type_existing() != $needed_type) {
    $message = t("Drupal was unable to set your database field types to @type. Please check your db permissions",
      array('@type' => $needed_type));
    drupal_set_message($message, 'error');
  }
  else {
    drupal_set_message(t("Quantitative fields in database is set to type '@type'", array('@type' => $needed_type)));
  }
  watchdog('mcapi', "Quantitative fields in database is set to type '@type'", array('@type' => $needed_type));
}


function cforge_report() {
  $traders = get_trader_list();
  $data = array(
    'server' => $_SERVER["HTTP_HOST"],
    'site_name' => variable_get('site_name', 'site_name'),
    'site_mail' => variable_get('site_mail', 'site_mail'),
    'user_count' => count($traders),
    'version' => db_result(db_query("SELECT schema_version from {system} WHERE name = 'mutual_credit'")),
    'transactions_last_month' => db_result(db_query("SELECT COUNT(*) from {node} WHERE created > %d and type = 'transaction'", strtotime('-1 month'))),
    'public' => variable_get('cforge_report', 1) -1,
  );

  foreach ($data as $key => $val) {
    $args[] = $key . '=' . $val;
  }
  $url = 'http://www.communityforge.net/registration.php?'. implode('&', $data);
  $reply = drupal_http_request($url);
  drupal_set_message($reply->data);
}

function mcapi_update_6001() {
  $ret = array();
  db_query("UPDATE {permission} SET perm = REPLACE(perm, 'configure economy', 'configure currencies') ");
  $installed = db_result(db_query("SELECT status FROM {system} WHERE name = 'mc_webform_usable'"));
  if ($installed){
    db_query("UPDATE {system} SET status = 1 WHERE name = 'mc_webform_1stparty'");
  }
  return $ret;
}
