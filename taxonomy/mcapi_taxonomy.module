<?php

function mcapi_taxonomy_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // We maintain a denormalized table of term/transaction relationships, containing
  // only data for current, published transactions.
  if ($field['storage']['type'] == 'field_sql_storage' && $entity_type == 'transaction') {
    $query = db_insert('taxonomy_index_mcapi')->fields(array('xid', 'tid'));
    foreach ($items as $item) {
      $query->values(array(
        'xid' => $entity->xid, 
        'tid' => $item['tid'], 
      ));
    }
    $query->execute();
  }
}

function mcapi_taxonomy_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if ($item['tid'] == 'autocreate') {
      $term = (object) $item;
      unset($term->tid);
      taxonomy_term_save($term);
      $items[$delta]['tid'] = $term->tid;
    }
  }
}
function mcapi_taxonomy_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['storage']['type'] == 'field_sql_storage' && $entity_type == 'transaction') {
    $first_call = &drupal_static(__FUNCTION__, array());

    // We don't maintain data for old revisions, so clear all previous values
    // from the table. Since this hook runs once per field, per object, make
    // sure we only wipe values once.
    if (!isset($first_call[$entity->xid])) {
      $first_call[$entity->xid] = FALSE;
      db_delete('taxonomy_index_mcapi')->condition('xid', $entity->xid)->execute();
    }
    // Only save data to the table if the transaction is published.
    if ($entity->status) {
      $query = db_insert('taxonomy_index_mcapi')->fields(array('xid', 'tid'));
      foreach ($items as $item) {
        $query->values(array(
          'xid' => $entity->xid, 
          'tid' => $item['tid'],
        ));
      }
      $query->execute();
    }
  }
}
function mcapi_taxonomy_transaction_delete($transaction) {
  // Clean up the {taxonomy_index_mcapi} table when transactions are deleted.
  db_delete('taxonomy_index_mcapi')->condition('xid', $transaction->xid)->execute();
}
function mcapi_taxonomy_taxonomy_term_delete($term) {
  // Clean up the {taxonomy_index_mcapi} table when terms are deleted.
  db_delete('taxonomy_index_mcapi')->condition('tid', $term->tid)->execute();
}


/*
 * Needed for the views 2 module
 */
function mcapi_taxonomy_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'mcapi_taxonomy').'/views',
  );
}
