<?php 
// $Id: 


/*
 * Implements hook_action_info
 */
function mcapi_actions_action_info() {
  module_load_include('inc', 'mcapi');
  return array(
    'record_exchange_action' => array(
      'type' => 'node',
      'label' => t('Record Exchange'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    )
  );
}
/*
 * Callback for action config
 * odd that form_state isn't passed
 * this means we can't do form_load_include
 */
function record_exchange_action_form($context) {
  //make a new_transaction(), and fill in from the defaults
  $values = array('values' => $context);
  $transaction_form = transaction_form(array(), $values, new_transaction());
  unset($transaction_form['buttons']);
  $form['template'] = array(
    '#type' => 'fieldset',
    '#title' => t('transaction template'),
    'transaction' => $transaction_form
  );

  //I just can't figure out how to handle attached fields here
  //it seems to rely on the form_state, which might mean invoking transaction_form in a different way
  //unset($form['template']['transaction']['buttons']);
  //these need to be set
  $form['template']['transaction']['worth']['#required'] = TRUE;
  $form['template']['transaction']['#description'] = TRUE;

  //this form should really have a validation function to ensure that at least one participant is provided
  return $form;
}
/*
 * submit callback for action config
 */
function record_exchange_action_submit($form, $form_state) {
  return $form_state['values'];
}
/*
 * callback to execute the action
 */
function record_exchange_action($node, $context) {
  $transaction = new_transaction();
  $transaction->currcode = $context['currcode'];
  $transaction->worth = $context['worth'];
  $transaction->payer = $context['payer'];
  $transaction->payee = $context['payee'];
  $transaction->state = TRANSACTION_STATE_FINISHED; //NEED TO GET RID OF UNSET STATE

    if (empty($transaction->payer)) {
      $transaction->payer = $node->uid;
    }
    elseif (empty($transaction->payee)) {
      $transaction->payee = $node->uid;
    }
  transaction_save($transaction);
}
/*
 * implements hook_trigger_info
 */
function mcapi_actions_trigger_info() {
  return array(
    'mcapi' => array(
      'transaction_record' => array(
        'label' => t('Record a new_transaction() in the database.'),
      ),
      'transaction_modify' => array(
        'label' => t('Editing a transaction which already exists.'),
      ),
      'transaction_erase' => array(
        'label' => t('Erase or delete a transaction.'),
      ),
    ),
  );
}
