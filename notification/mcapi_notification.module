<?php



/*
  //run some checks
  if (!variable_get('mcapi_notification_subject', 0) || !variable_get('mcapi_notification_body', 0)) {
    drupal_set_message(t('Mail notification templates need to be written: !link', array('!link' => l('admin/accounting/notification', 'admin/accounting/notification'))), 'warning');
  }
*/

function mcapi_notifications_help($path) {
  switch($path) {
    case 'admin/accounting/notification':
      return t('When composing your mails below, use some of the following tokens: ') .
      '!username, !site, !uri, !uri_brief, !mailto, !date, !login_uri, !edit_uri, !login_url, !creator, !transaction_uri, !summary';
  }
}

function mcapi_notifications_menu() {

  $items['admin/accounting/notification'] = array(
    'title' => 'Mail notification template',
    'description' => 'Compose the notification emails',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcapi_notification_options'),
    'access arguments' => array('administer site configuration'),
    'file' => 'mcapi.inc',
    'weight' => 3
  );
}

/*
 * implementation of mcapi hook after_transactions
 * sends the mail
 */
function mcapi_after_transaction($op, $transactions) {
  //decide whether to send mail, according to system and user settings.
  //for now we'll just mention the first transaction, but we'll need a theme callback to show how one transaction triggered the derivatives
  $transaction = array_shift($transactions);
  foreach (array(user_load($transaction->payer_uid), user_load($transaction->payee_uid)) as $account) {
    //first need to deterine whether to send
    //this depends on each user's threshhold but also on whether the mcapi_signatures module is installed.
    $message = drupal_mail(
      'mcapimail',
      'notify',
      $account->mail,
      user_preferred_language($account),
      array(
        'recipient' => $account,
        'transaction' => $transaction,
        'send' => FALSE
      ),
      NULL, //defualts to site_mail
      FALSE //don't send it
    );
    if ($message['params']['send']) {
      drupal_mail_send($message);
      //drupal_set_message('mailed '. $account->name .' with mail throttle setting '. $account->mcapi_notification_throttle);
    }
    else {
      //drupal_set_message("Didn't mail ". $account->name .' with mail throttle setting '. $account->mcapi_notification_throttle);
    }
  }
}


/*
 * Returns a form API item for choosing the intensity of transaction notifications
 */
function notification_throttle() {
  return array(
    '#title' => t('When to notify about transactions via email'),
    '#description' => t('Set the default frequency of notifications'),
    '#type' => 'radios',
    '#options' => array(
      0 => t("Never"),
      1 => t("Only when action is needed"),
      2 => t('When affected by another user'),
      3 => t('For all events'),
    ),
  );
}
/*
 * Define a form foro the admin to set the system-wide notification options.
 */
function mcapi_notification_options() {
  $form['mcapi_notification_throttle_default'] = notification_throttle();
  $form['mcapi_notification_throttle_default']['#weight'] = -6;
  $form['mcapi_notification_throttle_default']['#default_value'] = variable_get('mcapi_notification_throttle_default', 2);
  $form['mcapi_notification_option'] = array(
    '#title' => t('Allow user to choose notification frequency'),
    '#description' => t('Users will see the throttle below on user/%/edit page'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('mcapi_notification_option', TRUE),
    '#weight' => -5
  );

  $form['mcapi_notification_wrapper'] = array(
    '#title' => t('Newly recorded transactions template'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -4
  );
  $form['mcapi_notification_wrapper']['mcapi_notification_subject'] = array(
    '#title' => t('Mail subject'),
    '#description' => t('Tokens may be used'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mcapi_notification_subject', 'Notification from !site'),
    '#weight' => 1,
    '#required' => TRUE
  );
  $form['mcapi_notification_wrapper']['mcapi_notification_body'] = array(
    '#title' => t('Mail body'),
    '#description' => t('Sent to payer or payee whenever an transaction is first recorded.') . ' ' . t('Tokens may be used.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('mcapi_notification_body', "Dear !username,\n\nA new transaction has been recorded."),
    '#weight' => 2,
    '#required' => TRUE
  );
  //this might only appear if editing transactions is allowed.
  $form['mcapi_notification_update_wrapper'] = array(
    '#title' => t('Updated transactions template'),
    '#description' => t('(Not required for many use cases.)'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -3
  );
  $form['mcapi_notification_update_wrapper']['mcapi_notification_update_subject'] = array(
    '#title' => t('Mail subject'),
    '#description' => t('Tokens may be used'),
    '#type' => 'textfield',
    '#default_value' => variable_get('mcapi_notification_update_subject', t('Notification from !site')),
    '#weight' => 1,
    '#required' => TRUE
  );
  $form['mcapi_notification_update_wrapper']['mcapi_notification_update_body'] = array(
    '#title' => t('Mail body'),
    '#description' => t('Sent to payer or payee whenever an transaction is changed.') .' '. t('Tokens may be used.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('mcapi_notification_update_body', t("Dear !username,") . "\n\n" . t("An transaction involving you has been edited")),
    '#weight' => 2,
    '#required' => TRUE
  );

  $form['mcapi_notification_footer'] = array(
    '#title' => t('Mail footer'),
    '#description' => t('Sign off for all transaction notifications.') .' '. t('Tokens may be used'),
    '#type' => 'textarea',
    '#default_value' => variable_get('mcapi_notification_footer', t('From the team at !site')),
    '#required' => TRUE,
    '#weight' => -1
  );
  return system_settings_form($form);
}

function mcapimail_mail($key, &$message, $params) {
  $variables = mcapi_mail_tokens($params['recipient'], $message['language'], $params['transaction']);
  //the only $key possible is 'notify', so we don't need to switch($key)
  $subject = variable_get('mcapi_notification_subject', '');
  $message['subject'] = strtr($subject, $variables);
  $message['body']['main'] = strtr(variable_get('mcapi_notification_body', ''), $variables);
  $message['body']['footer'] = strtr(variable_get('mcapi_notification_footer', ''), $variables);
  $throttle = $message['params']['recipient']->mcapi_notification_throttle;
  //Setting of 2 means users don't want to be notified of their own activity.
  if ($message['params']['recipient']->uid == $GLOBALS['user']->uid) {
    $throttle--;
  }
  if ($throttle > 1) {
    $message['params']['send'] = TRUE;
  }
  debug($message);
}

function mcapi_mail_tokens($account, $language, $transaction) {
  //$account is the recipient of the mail
  $tokens = user_mail_tokens($account, $language);
  $creator = user_load($transaction->uid);
  $tokens['!transaction_uri'] = url('transaction/' . $transaction->nid, array('absolute' => TRUE));
  if (module_exists('mimemail')) {
    return $tokens + array(
      '!creator' => theme('username', array('account' => $creator)),
      '!summary' => theme('transaction', $transaction, TRUE, FALSE),
    );
  }
  else {
    return $tokens + array(
      '!creator' => $creator->name,
      '!summary' => strip_tags(theme('transaction', $transaction, TRUE, FALSE)),
    );
  }
}