<?php
// $Id$: transactions.module,v 1.1.2.4 2009/10/14 10:03:54 matslats Exp $

/*
 * @file
 * Transactions are entered via a form, stored in the database and balances and stats are cached.
 * Permitted users can initiate transactions as another user.
 * Buyers can rates the transaction if ratings are configured.
 * There are 4 transaction types, incoming_confirmed, outoing_confirmed, incoming_direct, outgoing_direct
 * Transaction types are named in config rather than creating a new po file for every community.
 * Many blocks, actions and views are provided
 *
 * This .module file contains only the hooks and functions which might be needed by other modules
 * The inc file contains functions needed to view transactions
 * the admin.inc is needed for processing transactions and changing settings
 * 
 * NOTES ON THE TRANSACTION QUANTITY
 * Quantity is stored as a decimal in the DB for easy calculation
 * The transaction object stores the amount as a decimal fraction
 * In preprocessing  an hour currency the decimal is multiplied by 0.6 to become hours:minutes, 
 * The theme_money function then attaches the icon or currency name
 *
 * if the multiple currencies module is not installed, the default currency id ('cid') is 0
 */
define (TRANSACTION_STATE_COMPLETED, 0);
define (TRANSACTION_STATE_PENDING, 1);
define (TRANSACTION_STATE_ERASED, -1);

/** 
 * http://api.drupal.org/api/function/hook_help/6
 */
function transactions_help($section) {
  switch ($section) {
    case 'admin/help#transaction':
      return t('Defines a contentType called transactions, manages them and does the accounting.');
  }
}
/** 
 * http://api.drupal.org/api/function/hook_init/6
 *
 */
function transactions_cron() {
  //this is for the voluntary reporting function
  if (variable_get('cforge_report', 1)) {
    module_load_include('admin.inc', 'transactions');
    cforge_report();
  }
}

/** 
 * http://api.drupal.org/api/function/hook_init/6
 */
function transactions_init() {
  drupal_add_css(drupal_get_path('module', 'transactions') .'/theme/transaction.css');
}

/**
 * http://api.drupal.org/api/function/hook_node_info/6
 * This hook is required for modules to define one or more node types.
 */
function transactions_node_info() {
  return array(
    'transaction' => array(
      'name' => t('transaction'),
      'module' => 'transactions',
      'description' => t('A movement of a quantity of a currency between two users.'),
      'has_title' => TRUE,
      'title_label' => t('Description of entity traded'),
      'has_body' => FALSE,
    )
  );
}

/*
 * Needed for the views 2 module
 */
function transactions_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'transactions') .'/views',
  );
}

/** 
 * http://api.drupal.org/api/function/hook_menu/6
 */
function transactions_menu() {
  module_load_include('inc', 'transactions');
  $items['admin/marketplace'] = array(
    'title' => 'Complementary Currencies',
    'description' => 'General complementary currency options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cc_options'),
    'access callback' => 'user_access',
    'access arguments' => array('configure economy'),
    'file' => 'transactions.admin.inc',
  );
  $items['admin/marketplace/currency'] = array(
    'title' => 'Default Currency',
    'description' => 'Default currency, transaction ratings and directory settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('default_currency_config'),
    'access arguments' => array('configure economy'),
    'file' => 'transactions.admin.inc',
  );
  $items['admin/marketplace/ratings'] = array(
    'title' => 'Transaction ratings',
    'description' => 'Transaction satisfaction ratings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transaction_quality_config'),
    'access arguments' => array('configure economy'),
    'file' => 'transactions.admin.inc',
  );
  $items['marketplace/report'] = array(
    'page callback' => 'marketplace_report',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'transactions.admin.inc',
  );
  $items['transaction/%/complete'] = array(
    'title' => 'Sign this transaction to finalise it',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transaction_complete_form', 1),
    'access callback' => 'transactions_access',
    'access arguments' => array('complete', 1),
    'type' => MENU_CALLBACK,
    'file' => 'transactions.inc',
  );

  $items['user/%/bureau'] = array(
    'title' => 'Bureau',
    'description' => "All transaction information for this user",
    'page callback' => 'transactions_bureau',
    'page arguments' => array(1),
    'access callback' => 'transactions_access',
    'access arguments' => array('bureau', 'transaction', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'transactions.inc',
  );
  $items['transaction'] = array(
    'title' => 'Create transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transaction_start_form', NULL, 'starter_completer'),
    'access arguments' => array('use local currency'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'transactions.inc',
    'weight' => 20,
  );
  $items['transaction/start'] = array(
    'title' => 'Standard',
    'access arguments' => array('use local currency'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['transaction/3rdparty'] = array(
    'title' => '3rd party',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transaction_start_form', NULL, 'payer_payee'),
    'access callback' => 'user_access',
    'access arguments' => array('edit all transactions'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'transactions.inc',
  );
  //we're providing tabs for each stat period, but we should also provide another level of tabs for each currency
  //this setup only works for the default, or first currency
  $periods = variable_get('cc_stats_periods', array("1 month", "1 year"));
  $period = array_shift($periods);
  $firstcurrency = currency_load();
  $items['economy'] = array(
    'title' => 'Economic analysis',
    'description' => 'All available metrics',
    'page callback' => 'show_stats',
    'page arguments' => array($period, 'page'), //this will take a final $cid argument
    'access arguments' => array('view all balances'),
    'type' => MENU_NORMAL_ITEM, 
    'file' => 'transactions.inc',
    'weight' => 20, 
  );
  $items["economy/" . str_replace(' ', '_', $period)] = array(
    'title' => '@period',
    'title arguments' => array('@period' => $period),
    'type' => MENU_DEFAULT_LOCAL_TASK, 
    'weight' => -20, 
  );
  foreach ($periods as $period) {
    $items["economy/" . str_replace(' ', '_', $period)] = array(
      'title' => '@period',
      'title arguments' => array('@period' => $period),
      'page arguments' => array($period, 'page'),
      'access arguments' => array('view all balances'),
      'type' => MENU_LOCAL_TASK, 
    ); 
  }
  return $items;
}

function transactions_menu_alter(&$items) {
  //because we use the custom form transaction/add
  $items['node/add/transaction']['type'] = MENU_CALLBACK;
}

/** 
 * http://api.drupal.org/api/function/hook_access/6
 * this function is called by node_access, and others in this module
 */
function transactions_access($op, $nid=NULL, $account=NULL, $transaction=NULL) {
  global $user;
  if (user_access('edit all transactions')) {
    return TRUE;
  }
  $uid = $account->uid or $uid = $account or $uid = $user->uid;

  if (!$transaction)$transaction = node_load(arg(1));//only used in node/%/edit
  switch ($op) {
    case 'view'://users can always view their own pages
      return user_access('view all transactions') 
      || $uid == $transaction->payee_uid //transactions the present user was involved in
      || $uid == $transaction->payer_uid;
    case 'create':
      return user_access('use local currency');
    case 'update': //this is the permission used by node_access
    case 'edit':
      return $uid == $transaction->starter_uid && $transaction->state == TRANSACTION_STATE_PENDING;
    case 'complete':
      return $uid == $transaction->completer_uid;
    case 'delete':
      return $uid == $transaction->starter_uid && $transaction->state == TRANSACTION_STATE_PENDING;
    case 'bureau': 
      return user_access('use local currency') && ($user->uid == $uid || user_access('view all balances'));
    default:
      drupal_set_message('transaction_access given unknown op: '. $op);
  }
}

/** 
 * http://api.drupal.org/api/function/hook_perm/6
 * This hook can supply permissions that the module defines,
 */
function transactions_perm() {
  return array(
    'use local currency',
    'view all transactions',
    'view all balances',
    'edit all transactions',
    'configure economy'
  );
}

/** 
 * http://api.drupal.org/api/function/hook_load/6
 */
function transactions_load($node) {
  module_load_include('inc', 'transactions');
  $result = db_query(
    'SELECT payer_uid, payee_uid, starter_uid, completer_uid, cid, quantity, transaction_type, quality, n.title, t.state
      FROM {cc_transactions} AS t
      LEFT JOIN {node} AS n ON n.nid = t.nid
      WHERE n.nid = %d',
    array(':nid' => $node->nid)
  );
  //join the passed node with the transaction fields
  foreach (db_fetch_array($result) as $key => $value) {
    $node->{$key} = $value;
  }
  return $node;
}


/** 
 * http://api.drupal.org/api/function/hook_block/6
 */
function transactions_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      //context sensitive to user being displayed
      $blocks['cc_new_transaction']= array(
        'info' => 'Cc '. t('Start transaction'),
        'visibility' => 0,
        'pages' => "transaction*\nadmin*",
      );
      foreach (variable_get('cc_stats_periods', array("1 month")) as $period) {
        $prd=str_replace(' ', '_', $period);
        $blocks["economy-$prd"] = array(
          'info' => 'Cc '. t("@period economy", array('@period' => $period)),
          'cache' => BLOCK_CACHE_GLOBAL,
        );
      }
      return $blocks;
    case 'view':
      module_load_include('inc', 'transactions');
      global $user;
      switch ($delta) {
        case 'cc_user_balances':
          if (user_access('view all transactions') && arg(0) == 'user' && $uid = arg(1)) {
            $account = user_load($uid);
            return array(
              'subject' => t("@user's balances", array('@user' => theme('username', $account))),
              'content' => transactions_user_balances($account->uid),
            );
          }
          break;
        case 'cc_new_transaction':
          if (transactions_access('create')) {
            $subject = t("Start transaction");
            $transaction = (object)array('starter_uid' => $user->uid);
            if (arg(0) == 'user' && arg(1) && $user->uid != arg(1)) {
              $otherperson = user_load(arg(1));
              $subject = t('Start transaction with @name', array('@name' => strip_tags(theme('username', $otherperson))));
              $subject = str_replace ('&amp;', '&', $subject);//hack for SEL coup de pouce
              $transaction->completer_uid = $otherperson->uid;
            }
            return array(
              'subject' => $subject,
              'content' => drupal_get_form('transaction_start_form', $transaction, 'starter_completer'),
            );
          }
          break;
          break;
        default:
          $period = str_replace('_', ' ', substr($delta, 8));
          return array(
            'subject' => t("@period economy", array('@period' => $period)),
            'content' => show_stats($period, 'block'),
          );
      }
  }
}

/** 
 * http://api.drupal.org/api/function/hook_form/6
 * Because we have a special multistep form creating the transactions, this hook_form is only editing
 */
function transactions_form(&$node, $form_state) {
  module_load_include('inc', 'transactions');
  //reload the whole transaction, which will include all the other fields
  $transaction=node_load($node->nid);
  switch ($_POST['op']) {
    default:
    case t('Change') ://typically from the 'full edit' link
      drupal_set_title(t('Editing transaction'));
      $form=transaction_base_form($transaction, 'edit');   
      break;
  }

  return $form;
}

/** 
 * http://api.drupal.org/api/function/hook_form_alter/6
 */
function transactions_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_admin_perm':
      $form['#submit'][] = 'menu_rebuild';
      break;
    case 'node_delete_confirm':
      if ($form['#parameters'][2]->type == 'transaction') {
        drupal_set_title(t('Are you sure you want to delete this transaction?'));
        $form['#prefix'] ='<blockquote>'. $form['#parameters'][2]->title .'</blockquote>';
        if ($form['#parameters'][2]->state == TRANSACTION_STATE_PENDING) {
          $form['description']['#value'] = t('The transation had not been confirmed');
        }
        elseif ($form['#parameters'][2]->state == TRANSACTION_STATE_COMPLETED) {
          $form['description']['#value'] = t('This transaction was confirmed, so the balances of both users will be affected');
        }
      }
      $form['#redirect'] = 'user';
      break;
    case 'cc_options':
      //this is here because it must go after the system_settings_form submit handler
      $form['#submit'][] = 'menu_rebuild';
      $form['#submit'][] = 'views_invalidate_cache';
      break;
  } 
}

/** 
 * http://api.drupal.org/api/function/hook_insert/6
 */
function transactions_insert($node) {
  $result = db_query('INSERT INTO {cc_transactions} (
    nid, payer_uid, payee_uid, starter_uid, completer_uid, quantity, cid, transaction_type, quality, state, depends_on
  ) VALUES (%d, %d, %d, %d, %d, %f, %d, "%s", %d, %d, %d)',
    $node->nid, $node->payer_uid, $node->payee_uid, $node->starter_uid, $node->completer_uid, $node->quantity, $node->cid, $node->transaction_type, $node->quality, $node->state, 0);
}

/** 
 * http://api.drupal.org/api/function/hook_update/6
 */
function transactions_update($node) {
  db_query("UPDATE {cc_transactions} SET
    payer_uid = '%d', payee_uid = '%d', starter_uid = '%d', completer_uid = '%d', quantity = '%f', cid = '%d', transaction_type = '%s', quality = '%d', state = %d, depends_on = '%d' WHERE nid = '%d' ",
    $node->payer_uid, $node->payee_uid, $node->starter_uid, $node->completer_uid, $node->quantity, $node->cid, $node->transaction_type, $node->quality, $node->state, 0, $node->nid
  );
}

/** 
 * http://api.drupal.org/api/function/hook_delete/6
 */
function transactions_delete($node) {
  module_load_include('admin.inc', 'transactions');
  //the node is deleted, but it leaves this trace in the cc_transactions table
  db_query("UPDATE {cc_transactions} set state  = %d WHERE nid = %d", TRANSACTION_STATE_ERASED, $node->nid);
  
  //can this go in nodeapi?
  _recalculate_balances(array($node->payer_uid, $node->payee_uid), $node->cid);
}

function transactions_view($node, $teaser = FALSE, $page = FALSE) {
  $node->content['body'] = array(
    '#value' => theme('transaction', $node, $teaser, TRUE),
  );
  return $node;
} 


/** 
 * http://api.drupal.org/api/function/hook_user/6
 * This hook is required for modules to define one or more node types.
 */
function transactions_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'categories') return;  //because $account = NULL which causes an error
  if (!user_access('use local currency', $account) && $op!='insert') return;
  //load all the currencies this user has access to
  $currencies = currencies_load(array('uids' => array($account->uid)));
  
  switch ($op) {
    case 'load':
      //put the user stats into the user object, where the theming layer can see them
      $result = db_query("SELECT cid, cleared_balance, pending_difference, pending_balance, gross_income, gross_expenditure, quality_mean, limit_max, limit_min
          FROM {cc_balance_cache} WHERE uid = %d",
        array(':uid' => $account->uid)
      );
      while($balance = db_fetch_array($result)) {
        $cid = array_shift($balance);
        $account->balances[$cid] = $balance;
      }
      //let the currency limits override the personal limits, if personal limits are not set
      foreach ($currencies as $currency) {
        $cid = $currency->cid;
        if (is_null($account->balances[$cid]['limit_min'])) {
          $account->balances[$cid]['limit_min'] = $currencies[$cid]->min_balance;
        }
        if (is_null($account->balances[$cid]['limit_max'])) {
          $account->balances[$cid]['limit_max'] = $currencies[$cid]->max_balance;
        }
      }
      break;
    case 'form':
      if ($category != 'account') return;
      if (!module_exists('contact')) { //buggers up if the fieldset is declared twice
        $form['contact']['#type'] = 'fieldset';
        $form['contact']['#title'] = t('Contact preferences');
      }
      $form['contact']['completer_notification'] = array(
        '#type' => 'radios',
        '#prefix' => '<a name="notifications"></a>',
        '#title' => t('Receive email notification when someone initiates a transaction with you'),
        '#default_value' => intval($account->completer_notification),
        '#options' => array(0 => t('no'), 1 => t('yes')),
        '#weight' => 2,
      );
      $form['contact']['starter_notification'] = array(
        '#type' => 'radios',
        '#prefix' => '<a name="notifications"></a>',
        '#title' => t('Receive email notification when you start a transaction'),
        '#default_value' => intval($account->starter_notification),
        '#options' => array(0 => t('no'), 1 => t('yes')),
        '#weight' => 2,
      );
      //fields for individual balance limits
      if (user_access('edit all transactions')) {
        $form['balance_limits'] = array(
          '#type' => 'fieldset',
          '#title' => t('Personal balance limits (accountant only)'),
          '#description' => t('The default values are inherited from the currency.'),
          '#weight' => -5,
        );
        foreach ($currencies as $cid => $currency) {
          $form['balance_limits']['currency'. $cid] = array(
            '#type' => 'fieldset',
            '#title' => $currency->title,
            '#weight' => $cid,
          );
          $form['balance_limits']['currency'. $cid]['max'. $cid] = array(
            '#type' => 'textfield',
            '#title' => t('max limit'),
            '#default_value' => db_result(db_query("SELECT limit_max from {cc_balance_cache} WHERE uid = %d AND cid = %d", array(':uid' => $account->uid, ':cid' => $cid))),
          );
          $form['balance_limits']['currency'. $cid]['min'. $cid] = array(
            '#type' => 'textfield',
            '#title' => t('min limit'),
            '#default_value' => db_result(db_query("SELECT limit_min from {cc_balance_cache} WHERE uid = %d AND cid = %d", array(':uid' => $account->uid, ':cid' => $cid))),
          );
        }
      }
      return $form;
      
    case 'validate':
      if (user_access('edit all transactions')) {
        foreach ($currencies as $cid => $currency) {
          if ($edit['min'. $cid]=='' && $edit['max'. $cid]=='') continue;
          module_load_include('admin.inc', 'transactions');
          validate_limits(array(
            'min'. $cid => $edit['min'. $cid],
            'max'. $cid => $edit['max'. $cid],
          ), FALSE); 
        }
      }
      break;
      
    case 'update':
      if (user_access('edit all transactions')) {
        $min = 'NULL';
        $max = 'NULL';
        foreach ($currencies as $cid => $currency) {
          if ($edit['min'. $cid] !='') $min = $edit['min'. $cid];
          if ($edit['max'. $cid] !='') $max = $edit['max'. $cid];
          db_query("UPDATE cc_balance_cache SET limit_max = $max, limit_min = $min WHERE uid = %d AND cid = %d", 
            array(':uid' => $account->uid, ':cid' => $cid));
        }
      }
      break;
      
    case 'insert':
      module_load_include('admin.inc', 'transactions');
      //user preference to be sent emails about pending transactions
      $edit['starter_notification'] = TRUE; 
      $edit['completer_notification'] = TRUE; 
      //this creates an empty row in {cc_balance_cache} for the first currency on the system //not necessary, I think.
      $def_cur = currency_load();
      _recalculate_balances(array($edit['uid']), $def_cur->nid);
      break;
      
    case 'view':// put all the pending transactions on the user's front page, where they can be seen by the other participants in them
      if (isset($account->balances) && user_access('view all balances')) {
        module_load_include('inc', 'transactions');
        $account->content['mutual_credit'] = array(
          '#type' => user_profile_category,
          '#title' => t('Transactions'),
          'pending' => array(
            '#type' => 'user_profile_item',
            '#title' => t('Pending Transactions'), 
            '#value' => transactions_pending($account->uid),
            '#weight' => 5,
          )
        );
        foreach ($account->balances as $currency) {
          $account->content['mutual_credit']['limits'][$currency->cid] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Balance limits'),  
            '#value' => theme('balance_limits', $account, $cid)
          );
        }
      }
  }
}

/** 
 * http://api.drupal.org/api/function/hook_action_info/6
 * This hook is required for modules to define one or more node types.
 */
function transactions_action_info() {
  module_load_include('inc', 'transactions');
  $actions['transactions_email_completer_action'] = array(
    'description' => t('Send email to transaction completer.') .' '. t('Triggers automatically'),
    'type' => 'node',
    'configurable' => TRUE,
    'hooks' => array(
      'nodeapi' => array('presave'),
    )
  );
  $actions['transactions_email_starter_action'] = array(
    'description' => t('Send email to transaction starter.') .' '. t('Triggers automatically'),
    'type' => 'node',
    'configurable' => TRUE,
    'hooks' => array(
      'nodeapi' => array('presave'),
    )
  );
  return $actions;
}

function transactions_email_completer_action_form($context) {
  return transaction_email_form_template($context);
}
function transactions_email_starter_action_form($context) {
  return transaction_email_form_template($context);
}
function transaction_email_form_template($context){
  $template = $context['template'] ? $context['template'] : t('');
  $vars = _transaction_email_replacements();
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Message subject'),
    '#default_value' => $context['subject'] ? $context['subject'] : t('Transaction notification'),
    '#description' => t('Tokens cannot be used here'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Email template'),
    '#default_value' => $context['template'] ? $context['template'] : t('This is an automated notification.') ."\n\n".
      t('%starter has started a transaction with %completer') ."\n\n".
      t('The transaction was for: %reason') .' '.
      t('You can confirm the transaction from your profile page: %profile_url') ."\n\n".
      t("You can change your mail notification settings by clicking 'edit' on your profile"),
    '#description' => t("This email will be sent to members when someone initiates a transaction with them which needs confirming. ") . 
    t("Don't forget to enable the trigger module and set up the trigger at !url. ", array('!url' => l('admin/build/trigger', 'admin/build/trigger'))) .
    t("You can use the following strings as variables:")
  );
  if (module_exists('mime_mail')) {
    $form['message']['#description'] .= t('You can use html in your message.');
  }
  else {
    $form['message']['#description'] .= t('Use only plain text ');
  }
  foreach ($vars as $var => $exp) {
    $form['message']['#description'] .= "\n<br /><strong>$var</strong>: $exp";
  }
  return $form;
}

function transactions_email_completer_action_validate($form, &$form_state) {
  transactions_email_action_validate($form_state);
}
function transactions_email_starter_action_validate($form, &$form_state) {
  transactions_email_action_validate($form_state);
}
function transactions_email_action_validate($form_state) {
  if (!strlen ($form_state['values']['message'])) {
    form_set_error('message', t("You can't send an empty email"));
  }
  if (!strlen ($form_state['values']['subject'])) {
    form_set_error('subject', t("Your mail must have a subject"));
  }
}
function transactions_email_completer_action_submit($form, &$form_state) {
  return array(
    'template' => $form_state['values']['message'],
    'subject' => $form_state['values']['subject']
  );
}
function transactions_email_starter_action_submit($form, &$form_state) {
  return array(
    'template' => $form_state['values']['message'],
    'subject' => $form_state['values']['subject']
  );
}

/** 
 * http://api.drupal.org/api/function/hook_theme/6
 * This hook is required for modules to define one or more node types.
 */
function transactions_theme($existing, $type, $theme, $path) {
  $templates_dir = drupal_get_path('module', 'transactions') .'/theme';
  //we load the inc so it's aware of the preprocess functions
  module_load_include('inc', 'transactions');
  return array(
    'transaction' => array(
      'template' => 'transaction',
      'path' => $templates_dir,
      'arguments' => array(
        'transaction' => NULL,
        'teaser' => FALSE,
        'rich_text' => TRUE,
      )
    ),
    'bureau' => array(
      'template' => 'bureau',
      'path' => $templates_dir,
      'arguments' => array(
        'account' => NULL,
        'balances' => NULL,
        'pending' => NULL,
        'history' => NULL,
      )
    ),
    'pending' => array(
      'template' => 'pending',
      'path' => $templates_dir,
      'arguments' => array(
        'account' => NULL,
        'waiting_on_user' => array(),
        'waiting_on_other' => array(),
      )
    ),
    'money' => array(
      'template' => 'money',
      'path' => $templates_dir,
      'arguments' => array(
        'quantity' => 0,
        'cid' => 0
      )
    ),
    'balances' => array(
      'template' => 'balances',
      'path' => $templates_dir,
      'arguments' => array(
        'balances' => array(),
        'currencies' => array(),
      )
    ),
    'stats_block' => array(
      'arguments' => array(
        'stats' => array(),
      )
    ),
    'stats_page' => array(
      'arguments' => array(
        'stats' => array(),
      )
    ),
    'statement' => array(
      'template' => 'statement',
      'path' => $templates_dir,
      'arguments' => array(
        'account' => NULL,
        'transactions' => array(),
      )
    ),
    'rating' => array(
      'arguments' => array(
        'quality' => NULL,
        'cid' => array(),
      )
    ),
    'balance_history' => array(
      'template' => 'balance_history',
      'path' => $templates_dir,
      'arguments' => array(
        'account' => NULL,
        'options' => array(),
      )
    ),
    'balance_limits' => array(
      'template' => 'balance_limits',
      'path' => $templates_dir,
      'arguments' => array(
        'account' => NULL,
        'cid' => 0,
      )
    ),
    'period_volumes' => array(
      'template' => 'period_volumes',
      'path' => $templates_dir,
      'arguments' => array(
        'account' => NULL,
        'cid' => 0,
      )
    ),
    'transaction_start_form' => array(
      'template' => 'transaction-start-form',
      'path' => $templates_dir,
      'arguments' => array(
        'form' => NULL,
      ),
    ),
  );
}


//theming for Views fields
//This function is named after phptemplate because it doesn't work when called as a theme_ function
//this is ok as long as these theme callbacks don't clash with core
function phptemplate_views_view_field__quantity($view, $field, $row) {
  return theme('money', $row->cc_transactions_quantity, $row->cc_transactions_cid);
}
function phptemplate_views_view_field__cleared_balance($view, $field, $row) {
  return theme('money', $row->cc_balance_cache_cleared_balance, $row->cc_transactions_cid);
}
function phptemplate_views_view_field__pending_difference($view, $field, $row) {
  return theme('money', $row->cc_balance_cache_pending_difference, $row->cc_transactions_cid);
}
function phptemplate_views_view_field__pending_balance($view, $field, $row) {
  return theme('money', $row->cc_balance_cache_pending_balance, $row->cc_transactions_cid);
}
function phptemplate_views_view_field__gross_income($view, $field, $row) {
  return theme('money', $row->cc_balance_cache_gross_income, $row->cc_transactions_cid);
}
function phptemplate_views_view_field__gross_expenditure($view, $field, $row) {
  return theme('money', $row->cc_balance_cache_gross_expenditure, $row->cc_transactions_cid);
}

//returns the specified, first, or default currency object
function currency_load($cid=NULL) {
  if (module_exists('cc_currencies')) {
    $all_currencies = get_currencies();
    if ($cid) {
      return $all_currencies[$cid];
    }
    else {
      return array_shift($all_currencies);
    }
  }
  return variable_get('cc_default_currency', NULL);
}

//always returns an array 
function currencies_load($options=array()) {
  if (module_exists('cc_currencies')) {
    return get_currencies($options);
  }
  return array(0 => variable_get('cc_default_currency', NULL));
}


/*
 * This validates both the default currency and subsequent ones in the cc_multiple module
 */
function currency_validate($form, &$form_state) {
  $currency = (object)$form_state['values'];
  //check that the title is unique amongst currencies
  
  //check that the objective value is blank or numeric
  if ($currency->objective_value != NULL && !is_numeric ($currency->objective_value)) {
    form_set_error('objective_value', t("This must be a number: @value", array('@value' => $currency->objective_value)));
  }
  else $form_state_['values']['objective_value'] = intval($currency->objective_value); //sets blank to zero
  
  $divisions = array('integer', 'sixtieths', 'decimal');
  if (!in_array($currency->division, $divisions)) {
    form_set_error('division', t("", array('@value' => $currency->division)));
  }
  
  if ($currency->zero_offset != NULL && !is_numeric($currency->zero_offset)) {
    form_set_error('zero_offset', t("This must be an integer: @value", array('@value' => $currency->zero_offset)));
  } 
  else $form_state_['values']['zero_offset'] = intval($currency->zero_offset); //sets blank to zero
  
  module_load_include('admin.inc', 'transactions');
  validate_limits(array(
    'min_balance' => $currency->min_balance, 
    'max_balance' => $currency->max_balance,
  ), TRUE);
  
  if (strlen($currency->color)<6)form_set_error('color', t('Color field must be 6 hex characters'));
  
  //check the icon upload
  //does this mean the file is known to the files table? I think not
  $dest = file_directory_path() .'/currencies';
  file_check_directory($dest, TRUE, 'icon_upload');
  if ($file = file_save_upload('icon_upload', NULL, $dest, FALSE)) {
    if ($err = array_pop (file_validate_is_image($file))) {
      form_set_error('icon_upload', $err);
    }
    file_validate_image_resolution($file, "16x16", "12x12");
    //save using the original filename, in case of duplicate
    $form_state['values']['icon'] = $file->filepath;
  }
  
  //if any currency on the system is float then the db fields should be floats too.
  //if the division of this currency has changed...
  $all_currencies = currencies_load();
  if ($currency->division != $all_currencies[$currency->{nid}]->division) {
    //check to see if any currencies are floats and set the db fields accordingly
    $all_currencies[$currency->{nid}] = $currency; //because the settings haven't been saved yet
    $div = 'int';
    foreach ($all_currencies as $curr) {
      //three possible values for division, the last two require float fields. integer, hours, decimal
      if ($curr->division != 'integer') $div='float';
    }
    module_load_include('admin.inc', 'transactions');
    alter_quantity_field_types($div);
    drupal_set_message(t("Quantitative fields in database is set to type '@type'", array('@type' => $div)));
  }
}

function template_preprocess_money(&$vars) {
  $currency = currency_load($vars['cid']);
  if (is_numeric($vars['quantity'])) {
    //seperate the sign, positive or negative
    $vars['quantity'] = $vars['quantity']+0;
    if ($vars['quantity'] <0) {
      $vars['sign'] = '-';
      $vars['quantity'] = abs($vars['quantity']);
    }
    //convert the division to something presentable
    if ($currency->division == 'sixtieths') {
      $quant = intval($vars['quantity']);
      $remainder = 60*($vars['quantity'] - $quant);
      $vars['quantity'] = sprintf('%d:%02d', $quant, $remainder);
    }
  }
  if (strlen($currency->icon)) {
    if (module_exists('cc_currencies')) {
      $vars['icon'] = l(theme_image($currency->icon), 'node/'. $currency->nid, array('html' => TRUE, 'attributes' => array('title' => $currency->title .' - '. $currency->body, 'alt' => $currency->title)));
    }
    else {
      $vars['icon'] = theme_image($currency->icon, t('Currency Icon'), $currency->title);
    }
  }
  $vars['name'] = $currency->title;
}

/*
 * Returns an array of transaction_types belonging to this module which have been named
 */
function _named_transaction_types() {
  $names = variable_get('cc_transaction_types', array());
  $types = $names['transactions'];
  if (!count($types)) {
    drupal_set_message(t('There are no transaction types declared on the system. Please go to admin/marketplace and name some transaction types')); 
  } 
  return $types;
}