<?php
// $Id:
//retrieves the max and min limits from the mcapi_cache table
function limits_get($currcode, $uid){
  $currency = currency_load($currcode);
  if (isset($currency->limits['limits_callback']) && function_exists($currency->limits['limits_callback'])) {
    $callback = $currency->limits['limits_callback'];
    return $callback($currency, $uid);
  }
}

/*
 * Implements hook mcapi_currency_form
 */
function mcapi_limits_form_mcapi_currency_form_alter(&$form, &$form_state) {
  $limits_callback = isset($form['#currency']->limits['limits_callback']) ? $form['#currency']->limits['limits_callback'] : 'limits_none';
  //limits could be managed by drupal OR the entity controller. Drupal offers more flexibility
  $form['limits'] = array(
    '#title' => t('Balance limits'),
    '#description' => t('Transactions will be rejected which take accounts beyond these limits.') .' '. t('Choose which method to use, and configure it.'),
    '#type' => 'fieldset',
    '#weight' => 20,
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => isset($form['#currency']->limits_callback),
    //'#group' => 'additional_settings',
    'limits_callback' => array(
      '#title' => t('Method'),
      '#description' => t('How will the limits be determined?'),
      '#type' => 'select',
      '#options' => array(
        'limits_none' => t('No limits'),
        'limits_global' => t('Everyone has the same limits, stated below'),
        'limits_personal' => t('Fields on the user profile can override limits stated below.'),
      ),
      '#default_value' => isset($form_state['values']['limits_callback']) ?
        $form_state['values']['limits_callback'] :
        $limits_callback,
      '#weight' => -1,
      '#ajax' => array(
        'callback' => 'limits_settings_subform',
        'wrapper' => 'limits-settings',
      )
    )
  );
  limits_settings_subform($form, $form_state, $form['#currency']);
  //we are relying in the inserted fields to validate themselves individually, so there is no validation added at the form level
  return $form;
}

/*
 * callback for the currency edit form
 * when building the initial page, the $currency is passed, AJAX builds use form_state
 * When called via AJAX, the $settings_form should contain '#value' not '#default_value', not sure why
 */
function limits_settings_subform(&$form, $form_state, $currency) {
  //I'm not very happy about the way the ajax loads are populated by the previous value,
  //but I've been a couple of hours fumbling and we can live with it.
  //the default values are correct even in the form_alter, but on processing,
  //the min/maxfields seem to be populated with their previous value, regardless of the #default_value
  if (isset($form_state['values']['limits']['limits_callback'])) {
    $limits_callback = $form_state['values']['limits']['limits_callback'];
    $defaults = array();
  }
  elseif(isset($currency->limits['limits_callback'])) {
    $limits_callback = $currency->limits['limits_callback'];
    $defaults = isset($currency->limits[$limits_callback]) ? $currency->limits[$limits_callback] : array();
  }
  else {
    $limits_callback = 'limits_none';
    $defaults = array();
  }
  $form_callback = $limits_callback .'_form';
  if (!function_exists($form_callback)) {
    drupal_set_message('Unknown limits settings callback: '.$form_callback);
    return array();
  }
  if (empty($form['limits'][$limits_callback])) {
    $form['limits'][$limits_callback] = array();
  }
  //get the fields
  $form['limits'][$limits_callback] += $form_callback($currency, $defaults);

  $form['limits'][$limits_callback] += array(
    '#prefix' => '<div id="limits-settings">',
    '#suffix' => '</div>',
  );
  //we return the array for the ajax callback but the main form builder has been altered by reference
  return $form['limits'][$limits_callback];
}


/*
 * NO LIMITS
 */
function limits_none($currency, $uid) {
  return array(
    'max' => NULL,
    'min' => NULL,
  );
}
function limits_none_form($currency, array $defaults) {
  return array();
}


/*
 * GLOBAL LIMITS
 */

//limits callback - returns the min an max limits for that currency for that user
function limits_global($currency, $uid) {
  return $currency->limits['limits_settings'];
}
function limits_global_form($currency, array $defaults) {
  if (isset($currency->limits['limits_global'])) {
    $defaults += array_filter($currency->limits['limits_global']);
  }
  return min_max_fields($defaults);
}
function min_max_fields($defaults) {
  return array(
    'min' => array(
      '#title' => t('Optional minimum balance'),
      '#description' => t('Must be less than or equal to zero'),
      '#type' => 'textfield',
      '#default_value' => isset($defaults['min']) ? $defaults['min'] : '-',
      '#element_validate' => array('mcapi_limits_validate_minmax'),
      '#size' => 7,
      '#maxlength' => 7,
      '#attributes' => array('style' => 'width:inherit;')
     ),
     'max' => array(
      '#title' => t('Optional maximum balance'),
      '#description' => t('Must be greater than 0.'),
      '#type' => 'textfield',
      '#default_value' => isset($defaults['max']) ? $defaults['max'] : '',
      '#element_validate' => array('mcapi_limits_validate_minmax'),
      '#size' => 6,
      '#maxlength' => 6,
      '#weight' => 1,
      '#attributes' => array('style' => 'width:inherit;'),
    )
  );
}

/*
 * PERSONAL LIMITS
 */
function limits_personal($currency, $uid) {
  $account = user_load($uid);
  $currcode = $currency->info['currcode'];
  $personal = array();
  if (isset($account->data['limits_personal'][$currcode]) && is_array($account->data['limits_personal'][$currcode])) {
    $personal = $account->data['limits_personal'][$currcode];
  }
  return $personal + $currency->limits['limits_personal'];
}
/*
 * the sub form for setting the default user limits on the currency form
 */
function limits_personal_form($currency, array $defaults) {
  $saved = empty($currency->limits['limits_personal']) ? array('min' => NULL, 'max' => NULL) : $currency->limits['limits_personal'];
  $personal_form = min_max_fields($saved);
  $personal_form['#description'] = t("Users with permission to manage all transactions can edit the users' personal limits.");
  $personal_form['min']['#title'] = t('Default minimum balance.');
  $personal_form['max']['#title'] = t('Default maximum balance.');
  return $personal_form;
}

//put the fields on the user form
function mcapi_limits_form_user_profile_form_alter(&$form, &$form_state) {
  if (!user_access('manage all transactions')) return;
  //get all the currencies with personal limits, so as to display config fields on the user profile form
  $currencies = currencies_load($form['#user']);
  foreach ($currencies as $currcode => $currency) {
    if (isset($currency->limits['limits_personal'])){
      $form['limits_personal'][$currcode] = array(
         '#type' => 'fieldset',
         '#title' => $currency->name,
         '#attributes' => array('style' => 'float:left;')
      );
      $fields = min_max_fields(limits_get($currcode, $form['#user']->uid));
      $form['limits_personal'][$currcode]['min-'.$currcode] = $fields['min'];
      $form['limits_personal'][$currcode]['max-'.$currcode] = $fields['max'];
      //by creating this key, we enable the values to be saved. See user_profile_form_submit in modules/user/user.pages.inc
      $form_state['user']->limits_personal = TRUE;
    }
  }
  //add a containing fieldset if needed
  if (isset($form['limits_personal'])) {
    $form['limits_personal'] += array(
      '#title' => t('Personal balance limits, set manually'),
      '#type' => 'fieldset',
      '#weight' => 2
    );
  }
}
/*
 * implements hook_user_update
 */
function mcapi_limits_user_presave(&$edit, $account, $category) {
  if ($category != 'account') return;
  $currencies = currencies_load($account->uid);
  foreach($currencies as $currcode => $currency) {
    if (isset($currency->limits['limits_callback']) && $currency->limits['limits_callback'] == 'limits_personal') {
      if (isset($edit['min-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['min'] = $edit['min-'.$currcode];
      }
      if (isset($edit['max-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['max'] = $edit['max-'.$currcode];
      }
    }
  }
}


//validate callback for the min and max values on the currency form
//this could be done in javascript also, on the form
//values have already been validated as numeric
function mcapi_limits_validate_minmax(&$element, $form_state) {
  if (strlen($element['#value']) && !is_numeric($element['#value'])) {
    form_error($element, t('Limits must be numeric: @value', array('@value' => $element['#value'])));
  }
  if ($element['#name'] == 'min' && strlen($element['#value'])){
    if ($element['#value'] > 0) {
      form_error($element, t('Minimum balance must not be larger than 0'));
    }
  }
  elseif ($element['#name'] == 'max' && strlen($element['#value'])){
    if ($element['#value'] <= 0) {
      form_error($element, t('Maximum balance must be larger than 0'));
    }
  }
}

/*
 * inject the limit checker function into the transaction form
 */
function mcapi_limits_form_transaction_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'limits_transaction_form_validate';
}

/*
 * validate callback which checks that the transaction doesn't take anyone beyond their limits
 */
function limits_transaction_form_validate(&$form, $form_state) {
  //fortunately the $form_state already contains a $transaction object
  try {
    mcapi_limit_check($form_state['#transaction'], $form_state['#transaction']->state);
  }
  catch (Exception $e) {
    form_set_error('quantity', $e->getMessage());
  }
}

/*
 * limit checker
 * checks a transaction to see if the proposed payment will push participant beyond balance limits
 * $transaction = A transaction object
 * $state = Whether to compare with finished or pending balances.
 * This is a drupal function, but the checking could just as easily be done through the entity controller.
 */
function mcapi_limit_check($transaction) {
  foreach ($transaction->worth['und'] as $flow) {
    $currcode = $flow['currcode'];
    $difference = $flow['quantity'];
    $payer = $transaction->payer;
    $payee = $transaction->payee;
    $messages = array();

    //check that the payee isn't going over their max limit
    $limits = limits_get($currcode, $payee);
    if (is_numeric($limits['max'])) {
      $balance = entity_get_controller('transaction')
        ->balance($payee, $currcode, $states = array(TRANSACTION_STATE_FINISHED));
      $payee_projected = $balance + $difference;
      $surplus = $payee_projected - $limits['max'];
      if ($surplus > 0) {
        $messages[] .= t('Transaction would take @username !quant above the maximum balance of !max.',
          array(
            '@username' => strip_tags(format_username(user_load($payee))),
            '!quant' => theme('worth_field', array('quantity' => $surplus, 'currcode' => $currcode)),
            '!max' => theme('worth_field', array('quantity' => $limits['max'], 'currcode' => $currcode))
          )
        );
      }
    }
    //check that the payer isn't going below their min limit
    $limits = limits_get($currcode, $payer);
    if (is_numeric($limits['min'])) {
      $balance = entity_get_controller('transaction')
        ->balance($payer, $currcode, $states = array(TRANSACTION_STATE_FINISHED));
      $payer_projected = $balance - $difference;
      $deficit = $limits['min'] - $payer_projected;
      if ($deficit > 0) {
        $messages[] .= t('Transaction would take @username !quant below the minimum balance of !min.',
          array(
            '@username' => strip_tags(format_username(user_load($payer))),
            '!quant' => theme('worth_field', array('currcode' => $currcode, 'quantity' => $deficit)),
            '!min' => theme('worth_field', array('currcode' => $currcode, 'quantity' => $limits['min'])),
          )
        );
      }
    }
  }
  if (count($messages)) {
    throw new Exception(implode(' ', $messages));
  }
}

/*
 * Implements views hook_views_api
 */
function mcapi_limits_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_limits').'/views',
  );
}

/*
 * display limits (as a google-o-meter)
 * NB google-o-meter is technically obselete
 * and is no longer documented on the charts API
 */

/*
 * callback to return themed balance limits
 */
function show_balance_limits($account, $currcode) {
  $balance = entity_get_controller('transaction')
    ->balance($account->uid, $currcode, $states = array(TRANSACTION_STATE_FINISHED));
  $limits = limits_get($currcode, $account->uid);
  //this chart makes no sense if there isn't a max (or min) limit
  if (!is_numeric($limits['max']) || !is_numeric($limits['min'])) {
    drupal_set_message(t('Balance limits requires minimum and maximum balances for currency: !link', array('!link' => l('admin/accounting/currency', 'admin/accounting/currency'))));
    return;
  }
  return array(
    '#theme' => 'balance_limits',
    '#currency' => currency_load($currcode),
    '#min' => $limits['min'],
    '#balance' => $balance,
    '#max' => $limits['max']
  );
}
/*
 * Implements views hook_block_list
 */
function mcapi_limits_block_info() {
  $blocks['balance_limits'] = array(
    'info' => 'MC '. t("Balance limits")
  );
  return $blocks;
}

/*
 * Implements views hook_block_view
 */
function mcapi_limits_block_view($delta) {
  if (arg(0) != 'user') return;
  $account = user_uid_optional_load(arg(1));
  if (!user_access('view all balances') && !$account->uid == $GLOBALS['user']->uid) return;
  module_load_include('admin.inc', 'mcapi', 'currencies');
  $values = variable_get('block_'.$delta, array());
  if (!isset($values['currcodes']) || !count($values['currcodes'])) {
    $values['currcodes'] = array_keys(currencies_load());
  }
  $output = '';
  foreach ($values['currcodes'] as $currcode) {
    $output[] = show_balance_limits($account, $currcode);
  }
  return array(
    'subject' => t("@user's limits", array('@user' => strip_tags(format_username($account)))),
    'content' => $output
  );
  break;
}


/*
 * Implements views hook_block_configure
 */
function mcapi_limits_block_configure($edit) {
  if (module_exists('mcapi_currencies')) {
    return currency_picker_element($edit['currcodes']);
  }
}
function mcapi_limits_block_save($delta, $values) {
  variable_set('block_'.$delta, $values);
}

/*
 * Implements views hook_theme
 */
function mcapi_limits_theme($existing, $type, $theme, $path){
  return array(
    //similar to balance limits, but only shows one currency
    'balance_limits' => array(
      'template' => 'balance_limits',
      'variables' => array(
        'currency' => '',
        'min' => 0,
        'balance' => 0,
        'max' => 0,
      )
    )
  );
}



//this was in case we wanted to do form level validation using ['limits_callback'].'_form_validate'
//the name of this validate function would need to be included in mcapi_limits_form_currency_form_alter
//$form['#validate'][] = 'limits_subform_validate'
/*
function limits_subform_validate($form, &$form_state) {
  if ($form_state['values']['limits_callback']) {
    $form_callback = $form_state['values']['limits_callback'].'_form_validate';
    if (function_exists($form_callback)) {
      $form_callback($form_state);
    }
  }
}
 */
