<?php
// $Id:

//Because i don't know how to pass args into an exception, the limit checker throws coded exceptions, not straight messages
//if a transaction fails becuase the payee would exceed the max limit, it throws
//new exception($difference, '>', $limit)
//and vice versa

//retrieves the max and min limits from the mcapi_cache table
function limits_get($currcode, $uid){
  module_load_include('inc', 'mcapi_limits');
  $currency = currency_load($currcode);
  if (isset($currency->limits['limits_callback']) && function_exists($currency->limits['limits_callback'])) {
    $callback = $currency->limits['limits_callback'];
    return $callback($currency, $uid);
  }
}

/*
 * limit checker
 * checks a transaction to see if the proposed payment will push participant beyond balance limits
 * $transaction = A transaction object
 * $state = Whether to compare with finished or pending balances.
 * This is a drupal function, but the checking could just as easily be done through the entity controller.
 */
function mcapi_limit_check($transaction) {
  reset($transaction->worth);
  $flows = current($transaction->worth);
  foreach ($flows as $delta => $flow) {
    $currcode = $flow['currcode'];
    $difference = $flow['quantity'];
    $payer = $transaction->payer;
    $payee = $transaction->payee;
    $messages = array();
    if ($transaction->state == TRANSACTION_STATE_FINISHED) {
      //the difference is between this value and the saved one
      $saved_flow = current(transaction_load($transaction->xid))->worth;
      $difference -= $saved_flow[$delta]['quantity'];
    }
    //check that the payee isn't going over their max limit
    $limits = limits_get($currcode, $payee);
    if (is_numeric($limits['max'])) {
      $balance = entity_get_controller('transaction')
        ->balance($payee, $currcode, $states = array(TRANSACTION_STATE_FINISHED));
      $payee_projected = $balance + $difference;
      $surplus = $payee_projected - $limits['max'];
      if ($surplus > 0) {
        throw new Exception($surplus .'>'.$limits['max']. '>' .$currcode);
      }
    }
    //check that the payer isn't going below their min limit
    $limits = limits_get($currcode, $payer);
    if (is_numeric($limits['min'])) {
      $balance = entity_get_controller('transaction')
        ->balance($payer, $currcode, $states = array(TRANSACTION_STATE_FINISHED));
      $payer_projected = $balance - $difference;
      $deficit = $limits['min'] - $payer_projected;
      if ($deficit > 0) {
        throw new Exception($deficit .'<'.$limits['min']. '<' .$currcode);
      }
    }
  }
}

/*
 * implements hook_currency_form_alter
 */
function mcapi_limits_currency_innerform_alter(&$form, &$form_state) {
  if (!isset($form['#currency'])) return;
  form_load_include($form_state, 'inc', 'mcapi_limits');
  $limits_callback = isset($form['#currency']->limits['limits_callback']) ? $form['#currency']->limits['limits_callback'] : 'limits_none';
  //limits could be managed by drupal OR the entity controller. Drupal offers more flexibility
  $form['limits'] = array(
    '#title' => t('Balance limits'),
    '#description' => t('Transactions will be rejected which take accounts beyond these limits.') .' '. t('Choose which method to use, and configure it.'),
    '#type' => 'fieldset',
    '#weight' => 20,
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => isset($form['#currency']->limits_callback),
    //'#group' => 'additional_settings',
    'limits_callback' => array(
      '#title' => t('Method'),
      '#description' => t('How will the limits be determined?'),
      '#type' => 'select',
      '#options' => array(
        'limits_none' => t('No limits'),
        'limits_global' => t('Everyone has the same limits, stated below'),
        'limits_personal' => t('Fields on the user profile can override limits stated below.'),
        'limits_equations' => t('Calculate the limits using an equation and tokens.'),
      ),
      '#default_value' => isset($form_state['values']['limits_callback']) ?
        $form_state['values']['limits_callback'] :
        $limits_callback,
      '#weight' => -1,
      '#ajax' => array(
        'callback' => 'limits_settings_subform',
        'wrapper' => 'limits-settings',
      )
    )
  );
  limits_settings_subform($form, $form_state);
  //we are relying in the inserted fields to validate themselves individually, so there is no validation added at the form level
}


//put the fields on the user form
function mcapi_limits_form_user_profile_form_alter(&$form, &$form_state) {
  if (!user_access('manage all transactions')) return;
  module_load_include('inc', 'mcapi_limits');
  //get all the currencies with personal limits, so as to display config fields on the user profile form
  $currencies = currencies_load($form['#user']);
  foreach ($currencies as $currcode => $currency) {
    if (isset($currency->limits['limits_personal'])){
      $form['limits_personal'][$currcode] = array(
         '#type' => 'fieldset',
         '#title' => $currency->name,
         '#attributes' => array('style' => 'float:left;')
      );
      $fields = min_max_fields(limits_get($currcode, $form['#user']->uid));
      $form['limits_personal'][$currcode]['min-'.$currcode] = $fields['min'];
      $form['limits_personal'][$currcode]['max-'.$currcode] = $fields['max'];
      //by creating this key, we enable the values to be saved. See user_profile_form_submit in modules/user/user.pages.inc
      $form_state['user']->limits_personal = TRUE;
    }
  }
  //add a containing fieldset if needed
  if (isset($form['limits_personal'])) {
    $form['limits_personal'] += array(
      '#title' => t('Personal balance limits, set manually'),
      '#type' => 'fieldset',
      '#weight' => 2
    );
  }
}
/*
 * implements hook_user_presave
 */
function mcapi_limits_user_presave(&$edit, $account, $category) {
  if ($category != 'account') return;
  $currencies = currencies_load($account->uid);
  foreach($currencies as $currcode => $currency) {
    if (isset($currency->limits['limits_callback']) && $currency->limits['limits_callback'] == 'limits_personal') {
      if (isset($edit['min-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['min'] = $edit['min-'.$currcode];
      }
      if (isset($edit['max-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['max'] = $edit['max-'.$currcode];
      }
    }
  }
}


/*
 * Implements views hook_views_api
 */
function mcapi_limits_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_limits').'/views',
  );
}

/*
 * display limits (as a google-o-meter)
 * NB google-o-meter is technically obselete
 * and is no longer documented on the charts API
 */

/*
 * callback to return themed balance limits
 */
function show_balance_limits($account, $currcode, $adjust = 0) {
  module_load_include('inc', 'mcapi_limits');
  $limits = limits_get($currcode, $account->uid);

  //this chart makes no sense if there isn't a max (or min) limit
  if (!is_numeric($limits['max']) || !is_numeric($limits['min'])) {
    return array();
  }
  $sums = transaction_totals($account->uid, $currcode);
  return array(
    '#theme' => 'balance_limits',
    '#currency' => currency_load($currcode),
    '#min' => $limits['min'] + $adjust,
    '#max' => $limits['max'] + $adjust,
    '#balance' => $sums['balance'],
  );
}

/*
 * Implements views hook_block_list
 */
function mcapi_limits_block_info() {
  $blocks['balance_limits'] = array(
    'info' => 'MC '. t("Balance limits")
  );
  return $blocks;
}

/*
 * Implements views hook_block_view
 */
function mcapi_limits_block_view($delta) {
  $account = arg(0) == 'user' ? user_uid_optional_load(arg(1)) : $GLOBALS['user'];

  if (!user_access('view all balances') && !$account->uid == $GLOBALS['user']->uid) return;
  module_load_include('admin.inc', 'mcapi', 'currencies');
  $settings = mcapi_limits_block_settings('block_'.$delta);
  if (empty($settings['currcodes'])) {
    $settings['currcodes'] = array_keys(currencies_load());
  }
  foreach ($settings['currcodes'] as $currcode) {
    $output[] = show_balance_limits($account, $currcode, $settings['adjust']);
  }
  return array(
    'subject' => t("@user's limits", array('@user' => strip_tags(format_username($account)))),
    'content' => $output
  );
}


/*
 * Implements views hook_block_configure
 */
function mcapi_limits_block_configure($delta) {
  $settings = mcapi_limits_block_settings('block_'.$delta);
  if (module_exists('mcapi_currencies')) {
    $form['currcodes'] = currency_picker_element($settings['currcodes'], TRUE);
  }
  $form['adjust'] = array(
    '#title' => t('Take account of balance'),
    '#description' => t('add the balance to the limits, showing the available limits'),
    '#type' => 'checkbox',
    '#default_value' => $settings['adjust']
  );
  return $form;
}

/*
 * Implements views hook_block_save
 */
function mcapi_limits_block_save($delta, $values) {
  variable_set(
    'block_'. $delta,
    array(
      'currcodes' => $values['currcodes'],
      'adjust' => $values['adjust']
    )
  );
}
function mcapi_limits_block_settings($delta) {
  $settings = variable_get($delta, array());
  return $settings ? $settings : array('currcodes' => array_keys(currencies_load()), 'adjust' => FALSE);
}

/*
 * Implements hook_theme
 */
function mcapi_limits_theme($existing, $type, $theme, $path){
  return array(
    //similar to balance limits, but only shows one currency
    'balance_limits' => array(
      'template' => 'balance_limits',
      'variables' => array(
        'currency' => '',
        'min' => 0,
        'balance' => 0,
        'max' => 0
      )
    )
  );
}

/*
 * Implements variable module's hook_variable_info
 * only block settings really
 */
function mcapi_limits_variable_info() {
  foreach (mcapi_limits_block_info() as $varname -> $info) {
    $vars[$varname] = array(
      'type' => 'array',
      'title' => $info['info'],
      'default' => array(),
      'description' => t('Block settings'),
      'required' => FALSE,
    );
  }
  return $vars;
}
