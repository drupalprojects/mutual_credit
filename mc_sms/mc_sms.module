<?php

/*
 *
 *
 * sms_send($number, $message, $options = array());
 * sms_incoming($number, $message, $options = array());
 */

/**
 * http://api.drupal.org/api/function/hook_help/6
 */
function mc_sms_help($path) {
  switch($path) {
    case 'admin/mc/sms':
      return t('');
  }
}

/**
 * http://api.drupal.org/api/function/hook_menu/6
 */
function mc_sms_menu() {
  $items['admin/mc/sms'] = array(
    'title' => t('SMS'),
    'description' => t('Define the SMS syntax for recording exchanges'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mc_sms_settings'),
    'access arguments' => array('configure currencies'),
    'weight' => 5
  );
  return $items;
}

function mc_sms_settings(){
  $form['syntax'] = array(
    '#title' => t('Syntax'),
    '#description' => t('Define the form of the text messages'),
    '#type' => 'fieldset',
  );
  if (module_exists('mc_webform_1stparty')) {
    $form['syntax']['mc_sms_record_exchange'] = array(
      '#title' => t('Expressions for creating a new exchange'),
      '#description' => t('One per line.') .' '.
        theme('item_list', array('%user', '%type', '%amount', '%description (optional)')),
      '#type' => 'textarea',
      '#default_value' => variable_get('mc_sms_record_exchange', ''),
    );
  }
  else {
    $form['syntax']['mc_sms_record_exchange_incoming'] = array(
      '#title' => t('Expressions for creating a new exchange'),
      '#description' => t('One per line.') .' '.
        theme('item_list', array('%user', '%type', '%amount', '%description (optional)')),
      '#type' => 'textfield',
      '#default_value' => variable_get('mc_sms_record_exchange_incoming', ''),
    );
    $form['syntax']['mc_sms_record_exchange_outgoing'] = array(
      '#title' => t('Expressions for creating a new exchange'),
      '#description' => t('One per line.') .' '.
        theme('item_list', array('%user', '%type', '%amount', '%description (optional)')),
      '#type' => 'textfield',
      '#default_value' => variable_get('mc_sms_record_exchange_outgoing', ''),
    );
  }
  return system_settings_form($form);
}

/*
 * implementation of hook 'sms_incoming'
 * $op = 'pre process', 'process', 'post process'
 */
function mc_sms_sms_incoming($op, $number, $message) {
  switch ($op) {
    case 'process':
      if ($exchange = mc_parse_sms($message, $number) ) {
        mc_api_add_exchanges(array($exchange));
      }
  }
}

function mc_parse_sms($message, $number) {
  //get the permissable transaction names

  $translations = array(
    '%amount' => '([0-9]*)',
    '%user' => '([^ ]*)',
    '%description' =>  '(.*)',
  );
  if (module_exists('mc_webform_1stparty')) {
    $syntax = variable_get('mc_sms_record_exchange', '');
    $expressions = explode("\n", $syntax);
    $translations['%type'] = '('. implode('|', variable_get('mc_subtypes', array())) .')';
  }
  else {
    $expressions[] = variable_get('mc_sms_record_exchange_incoming', '');
    $expressions[] = variable_get('mc_sms_record_exchange_outgoing', '');
  }

  foreach ($expressions as $expression) {
    //check if the sms matches the expression.
    $pattern = '/'.strtr($expression, $translations) .'/i';
    preg_match($pattern, $message, $values);
    if (count($values)) {
      //now we find out which value corresponds to which token
      preg_match_all("/%[^ ]*/", $expression, $keys);
      $matches = array_combine($keys[0], array_slice($values, 1));
      break;
    }
  }
  $uid = sms_user_get_uid($number);
  /*
  $matches now equals array(
    [%user] => 1
    [%amount] => 1
    [%description] => test)
   */
}

//%type %user %amount for %description
//pay %user %amount for %description

//preg_match_all("/%[^ ]*/", "pay %user %amount for %description", $keys);
