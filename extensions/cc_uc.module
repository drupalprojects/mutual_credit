<?php



/**
 * Implementation of hook_init().
 */
function fwm_init() {
  global $conf;
  $conf['i18n_variables'][] = 'fwm_method_title';
  $conf['i18n_variables'][] = 'fwm_credit_purchase_button';
}


/**
 * Implementation of hook_payment_method().
 *
 * @see uc_payment_method_fwm()
 */
function fwm_payment_method() {
  $img = theme('img', path_to_theme().silver-01.jpg);
  $methods[] = array(
    'id' => 'fwm_pay',
    'name' => t('FWM transaction'),
    'title' => variable_get('fwm_method_title', t('Silver account:')) . $img,
    'review' => variable_get('fwm_method_title', t('Silver exchange:')),
    'desc' => t('Silver transfer.'),
    'callback' => 'uc_payment_method_fwm',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => FALSE,
  );
  return $methods;
}



/**
 * Implementation of hook_payment_gateway().
 */
function fwm_payment_gateway() {
  $gateways[] = array(
    'id' => 'fwm_pay',
    'title' => t('FWM gateway'),
    'description' => t('Process transactions through internal 'silver' accounting system'),
    'fwm_pay' => 'fwm_transact',
    );
  return $gateways;
}

// conduct the payment, making separate payments to the owners of each product
function fwm_transact($order_id, $amount, $data) {
  global $user;
  $result = false;
  if (($order = uc_order_load($order_id)){
  	print_r($order);
  	drupal_set_message('mutual_credit needs to do payment here for $amount');
  	print_r($data);

    foreach ($order->products as $product) {
      $owner_uid = db_result(db_query('SELECT uid FROM {node} WHERE nid = %d', $product->nid));
      $ticket[$owner]['amount'] += uc_price(
        array( 'price' => $product->price, 'qty' => $product->qty ),
        array( 'revision' => 'original')
      );
      $ticket[$owner]['description'] .= $product->model .':'. $product->qty .',';
    }

    // Different payment foreach product
    //would be good if these could be grouped by vendor
    foreach ($ticket as $owner => $detail) {
      $message = 'transaction failed';
      //MAKE THE PAYMENTS HERE
      
      if ($node = generate_transaction_node(
        $detail['description'],
        $user->uid, 
        $owner_uid, 
        $detail['amount'], 
        $options = array('transaction_type' => 'ubercart', state => TRANSACTION_TYPE_COMPLETED),
      ) {
        $message = "Transaction successful.";
        $_SESSION['cyclos_pay'] = true;
	    watchdog('fwm', 'Cyclos xfer complete: @message', array( '@message' => $order->order_id ), WATCHDOG_NOTICE);
	  }
      uc_order_comment_save($order->order_id, 0, $message, 'admin');
	}
	return $result;
  
	/*  don't know if we really need this result object or how important the formatting is.
	//maybe ubercart requires it just so.
	  $result = array(
	    'success' => $status['success'],
	    'comment' => t($status['result']),
	    'message' => t($message),
	    'uid' => $user->uid,
	    'log_payment' => !$status['fatal'],
	  );
	*/ 
  }
  else {
    drupal_set_message('Your order could not be identified, #id:'.$order_id);
  }
}

/**
 * Implementation of hook_order().
 */
function fwm_order($op, &$arg1, $arg2) {print_r(func_get_args());
  switch ($op) {
    case 'submit':
    if ($arg1->payment_method == 'cyclos') {
      // Clear out that session variable denoting paid order.
      unset($_SESSION['cyclos_pay']);
      $pass = uc_payment_process($arg1->payment_method, $arg1->order_id, $arg1->order_total, $arg2, TRUE, NULL, FALSE);
      if (!$pass) {
        $message = variable_get('fwm_fail_message', t('We were unable to process your transaction.'));
        return array(array('pass' => FALSE, 'message' => $message));
      }
    }
  }
}


/**
 * @see fwm_payment_method()
 */
function uc_payment_method_fwm($op, &$arg1) { drupal_set_message('is this even needed at all since we know that mutual_credit is installed');
  global $user; 
  echo $op.' in uc_payment_method_fwm';
  switch ($op) {
    case 'cart-process':
      $_SESSION['pay_method'] = $_POST['pay_method'];
      $details = '<div class="form-item"><b>'. t('Purchase more credits: ').
          '</b>'.url(variable_get('fwm_external_credit_site', t('http://silverbartermoney.com'))). '<br/><b>balance:</b>' . $user->account_balance.'</div>';
      return $details;
    case 'settings':
      $form['fwm_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#default_value' => variable_get('fwm_method_title', t('Silver exchange:')),
      );
      $form['fwm_database_url'] = array(
        '#type' => 'textfield',
        '#title' => t('DSN to the Cyclos database'),
        '#description' => t('The DSN is needed to push users from Drupal to Cyclos.'),
        '#default_value' => variable_get('fwm_database_url', t('mysql:host=localhost;dbname=cyclos')),
      );
      $form['fwm_external_credit_site'] = array(
        '#type' => 'textfield',
        '#title' => t('Add credits to the account'),
        '#description' => t('The URL providing a place where customers can purchase credits to increase their balance.'),
        '#default_value' => variable_get('fwm_external_credit_site', t('http://silverbartermoney.com')),
      );
      $form['fwm_credit_purchase_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Credit purchase button text'),
        '#description' => t('Provide specific text for the purchase credit button on the order review page.'),
        '#default_value' => variable_get('fwm_credit_purchase_button', t('Purchase Credit')),
      );
      return $form;
    case 'order-view':
    case 'customer-view':
      // Fetch the description for the payment entered by the administrator.
      if ($description = db_result(db_query("SELECT description FROM {uc_payment_other} WHERE order_id = %d", $arg1->order_id))) {
        return t('Description: @desc', array('@desc' => $description));
      }
      break;

    case 'order-details':
      $details = drupal_get_form('uc_payment_method_other_form', $arg1);
      return uc_strip_form($details);

    case 'edit-process':
      $changes['payment_details']['pm_other_description'] = check_plain($_POST['pm_other_description']);
      return $changes;

    case 'order-load':
      if ($description = db_result(db_query("SELECT description FROM {uc_payment_other} WHERE order_id = %d", $arg1->order_id))) {
        $arg1->payment_details['description'] = $description;
      }
      break;

    case 'order-save':
      db_query("DELETE FROM {uc_payment_other} WHERE order_id = %d", $arg1->order_id);
      if (!empty($arg1->payment_details['pm_other_description'])) {
        db_query("INSERT INTO {uc_payment_other} (order_id, description) VALUES (%d, '%s')", $arg1->order_id, $arg1->payment_details['pm_other_description']);
      }
      break;
  }
}


/**
 * Form provides customer with option to purchase account credits.
 */
function fwm_checkout_review_form($form_state) { drupal_set_message(fwm_checkout_review_form);
    global $user;
    $form['#method'] = 'get';
    $form['#action'] = url(variable_get('fwm_external_credit_site', t('http://silverbartermoney.com')));
    //what are all these hidden fields for?
    $data = array(
      'account_id' => $user->name,
      'x_receipt_link_url' => url('cart/checkout/review', array('absolute' => TRUE)),
      'x_id' => time,
      'signature' => time,
    );

    foreach ($data as $name => $value) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => variable_get('fwm_credit_purchase_button', t('Purchase Credit')),
    );
  return $form;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function fwm_form_uc_cart_checkout_review_form_alter(&$form, &$form_state) {
  drupal_set_message('wierd hook hook_form_FORM_ID_alter is running');

  global $user;
  if (isset($_REQUEST['account_id'])) {
      fwm_credits_purchased($user->name, $_REQUEST['value'], $_REQUEST['x_id'], $_REQUEST['signature']);
  }
  drupal_set_message('need to get balance for user ' . $user->uid);
  $elements = '<td><b>'.t("Account Balance: ").'</b>' . uc_currency_format($user->balances[0]['cleared_balance']).
      '</td><td>' . drupal_get_form('fwm_checkout_review_form');

  $form['#prefix'] = '<table id="two-checkout-review-table"><tr><td>';
  $form['#suffix'] = '</td></tr><tr>'.$elements.'</td></tr></table>';

  if (($order_id = intval($_SESSION['cart_order'])) > 0 &&  ($order = uc_order_load($order_id)) == TRUE &&  $order->order_total > $user->account_balance) {
    $form['submit']['#disabled'] = TRUE;
  }
}

function fwm_credits_purchased($identifier, $value, $transaction_id, $hash) {
  $md5hash = md5($auth['cpg_salt1'].$identifier.':'.$value.':'.$transaction_id.$auth['cpg_salt2']);
  if (isset($hash)) {
    // Verify that this is a good credit purchase.
    if ($md5hash == $hash) {
      $exists = db_result(db_query('SELECT signature FROM {fwm_external_transactions} WHERE signature = %s', $hash));
      if ($exists) {
        watchdog('fwm_main', 'Bad signature while adding credits name: @name amount: @value xid: @transaction_id sig: @hash', array( '@name' => $identifier, '@value' => $value, '@transaction_id' => $transaction_id, '@hash' => $hash ), WATCHDOG_WARNING);
       } else {
         drupal_set_message('time to use the mutual_credit API');
       }
     }
  }
}


/*
 * Transfer credits from system to member
 */
function _fwm_credit_member($member, $amount, $transaction_id) { print_r($func_get_args);
  drupal_set_message('this needs to made like _fwm_doBulkPayment');
  global $user;

  // Setup the payment parameters
  $params = new stdclass();
  $params->amount = $amount;
  $params->description = 'credit purchase: ' . $transaction_id;
  $params->toMember = $member;
  $params->fromMember = $systemName;

  $params->fromSystem = true;
  $params->toSystem = false;

  $param_list[] = $params;

  //$status = $cyclos->doBulkPayment($param_list);
  drupal_set_message('Purchase of $amount credits for mutual_credit module');

  if ($status['success']) {
      $message = "Transaction successful.";
      $_SESSION['cyclos_pay'] = true;
      watchdog('uc_cyclos', 'Cyclos xfer complete: @message', array( '@message' => $order->order_id ), WATCHDOG_NOTICE);
  } else {
      $message = "Transaction failed: " . $status['result'];
      if ($status['fatal']) {
          drupal_set_message("$message: " . $status['result'], 'error');
          uc_order_update_status($order->order_id, 'cancelled');
          drupal_set_message("Error detected, notifying administrator.", 'error');
      } else {
          drupal_set_message("Transaction failure: " . $status['result'], 'error');
      }
  }

  uc_order_comment_save($order->order_id, 0, $status['result'], 'admin');

  $result = array(
      'success' => $status['success'],
      'comment' => t($status['result']),
      'message' => t($message),
      'uid' => $user->uid,
      'log_payment' => !$status['fatal'],
      );

  return $result;
}
