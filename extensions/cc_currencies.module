<?php

/*
 * the transactions module can handle multiple currencies but comes with an admin config page for one default
 * This module removes that config page and provides and interface so permitted users can create, join and trade with more than one currency
*/
function cc_currencies_menu() {

}

/** 
 * Implementation of hook_menu.
 * http://api.drupal.org/api/function/hook_menu/6
 */
function cc_currencies_menu_alter(&$items) {
  //overriding the transaction module
  $items['admin/marketplace/currency'] = array (
    'title' => 'Configure Currencies',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('configure_currencies'),
    'access arguments' => array('configure economy'),
  );
  $items['user/%/transactions']['page arguments']['theme'] = 'statement_multi';
}

/**
 * Implementation of hook_perm.
 * http://api.drupal.org/api/function/hook_perm/6
 */
function cc_currencies_perm(){
  return array('create meme currencies', 'create global currencies');
}

/*
 * Needed for the views 2 module
 */
function cc_currencies_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'transactions') .'/views',
  );
}

/**
 * Implementation of hook_node_info.
 * http://api.drupal.org/api/function/hook_node_info/6
 */
function cc_currencies_node_info(){
  return array(
    'currency' => array(
      'name' => 'currency',
      'module' => 'cc_currencies',
      'description' => t('A complementary currency'),
      'has_title' => TRUE,
      'title_label' => t('Currency Name'),
      'has_body' => TRUE,
      'body_label' => t('Currency purpose, ethos, values and rules'),
      'min_word_count' => 10,
      'status' => TRUE,
      'sticky' => FALSE,
    )
  );
}

function cc_currencies_access($op, $node, $account) {
  switch ($op) {
    case 'update':
      return $GLOBALS['user']->uid == $node->uid;
    case 'create':
      return user_access('create global currencies');
  }
}

function configure_currencies() {
  return array('#prefix'=>"
  No options yet for multiple currencies.
  The idea is that there will be universal currencies, which all users can see and trade in, and 'meme' currencies, which are spread from the creator outwards.
  There will be two permissions, to create universal and create meme currencies.
  ");
}

/**
 * Implementation of hook_form.
 * http://api.drupal.org/api/function/hook_node_info/6
 */
function cc_currencies_form(&$node, $form_state) {
  require_once(drupal_get_path('module', 'transactions').'/transactions.admin.inc');
  $type = node_get_types('type', $node);
  $form = currency_form_fields($node);
  $form['title'] = array (
    '#type' => 'textfield',
    '#title' => t('Currency name'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => t("Write the full title, like this: 'Loaves,bread' or 'pounds, sterling silver' or 'chickens'"),
    '#weight' => '-5',
  );
  $form['body'] = array (
    '#type' => 'textarea',
    '#title' => t('Currency purpose, ethos, values and rules'),
    '#default_value' => $node->body,
    '#required' => FALSE,
    '#description' => t('Write about the purpose and value of your currency. ') . 
      t('If your currency is "hearts", what is a heart for, how would I earn or spend one? In particular, is it intended to be redeemable or is it purely a unit of account? That means would you redeem 5 virtual loaves of bread for real ones or tell me to go back online where I came from?') . 
      t('Remember you may not be able to edit your currency once someone has traded in it.'),
    '#weight' => '-3',
  );
  $form['#validate'][] = 'currency_validate';
  return $form;
}

function cc_currencies_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'currency_node_form':
      //this cleans up the form - might not be necessary
      $form['menu']['access'] = FALSE;
      $form['revision_information']['access'] = FALSE;
      $form['options']['access'] = FALSE;
      //we use the sticky node property to universlaise the currency
      if (user_access('configure economy')){
        $form['sticky'] = $form['options']['sticky'];
        unset($form['options']['sticky']);
        $form['sticky']['#title'] = t('visible to all');
        $form['sticky']['#access'] = user_access('create viral currencies') && user_access('create global currencies');
        if (!$form['sticky']['#access']) {
          $form['sticky']['#default_value'] = user_access('create global currencies'); 
        }
        $form['sticky']['#weight'] = -4;
      }
      $form['comment_settings']['#type']='value';
      unset($form['buttons']['preview']);
      //until the currency form can can show or hide the quarters of an our field according to currency selection, with ajax
      unset ($form['division']['#options']['quarters']);
      break;
    case 'transaction_start_form':
    case 'transaction_node_form':
    case 'many2one_form':
    case 'one2many_form':
      $currencies = get_currencies(array('uids'=>array($GLOBALS['user']->uid))); //name only
      foreach($currencies as $nid=>$values) {
        $currency_names[$nid] = $values->title;
      }
      $cid = $form_state['values']['cid'] or $cid = array_shift(array_keys($currencies));
      $form['cid'] = array (
        '#type' => 'select',
        '#title' => t('Currency'),
        '#default_value' => $cid,
        '#type' => 'select',
        '#options' => $currency_names,
      );
      unset($form['quantity']['#field_suffix']);
      if ($form['quantity']['#type']=='hidden')$form['cid']['#type']='hidden';
      break;
  }
}

/** 
 * http://api.drupal.org/api/function/hook_insert/6
 */
function cc_currencies_insert(&$node) {
  db_query("INSERT INTO {cc_multiple} (
    nid, comparative_value, zero_offset, division, min_balance, max_balance, color
    ) VALUES (%d, %d, %d, '%s', %d, %d, '%s' )",
    $node->nid, $node->comparative_value, $node->zero_offset, $node->division, $node->min_balance, $node->max_balance, $node->color
  );
  if ($node->icon) {
    db_query("UPDATE {cc_multiple} SET icon ='%s' WHERE nid = %d", $node->icon, $node->nid);
  }
}

/** 
 * http://api.drupal.org/api/function/hook_update/6
 */
function cc_currencies_update(&$node) {
  db_query("UPDATE {cc_multiple} SET
    comparative_value = '%d', zero_offset = '%d', division = '%s', min_balance = '%d', max_balance = '%d', color = '%s'
    WHERE nid = '%d' ",
    $node->comparative_value, $node->zero_offset, $node->division, $node->min_balance, $node->max_balance, $node->color, $node->nid
  );
  if ($node->icon){
    db_query(" UPDATE {cc_multiple} SET icon ='%s' WHERE nid = %d ", $node->icon, $node->nid);
  }
}

/** 
 * http://api.drupal.org/api/function/hook_delete/6
 */
function cc_currencies_delete(&$node) {
  require_once(drupal_get_path('module', 'transactions').'/transactions.admin.inc');
  drupal_set_message('deleting');
  db_query("DELETE FROM {cc_multiple} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {cc_balance_cache} WHERE cid = %d", $node->nid);
  db_query("UPDATE {cc_transactions} SET state = -1 WHERE cid = %d", $node->nid);
  cc_balances_refresh();
  //also retrive the icon filename and delete that file.
}

/** 
 * http://api.drupal.org/api/function/hook_load/6
 */
function cc_currencies_load(&$node) {
  $result = db_fetch_array(db_query("SELECT nid as cid, comparative_value, zero_offset, division, min_balance, max_balance, color, icon
    FROM {cc_multiple} WHERE nid = %d ",  $node->nid
  ));
  foreach ($result as $key=>$value) {
    $node->$key = $value;
  }
}

/** 
 * http://api.drupal.org/api/function/hook_theme/6
 * This hook is required for modules to define one or more node types.
 */
function cc_currencies_theme($existing, $type, $theme, $path) {
  return array(
    'statement_multi' => array(
      'function' => 'theme_statement_multi',
      'arguments' => array(
        'transactions' => NULL,
        'uid' => NULL,
        'month' => NULL,
      ),
    ),
  );
}

//this variation on the statement table is to remove the running balance column, which with multiple currencies, would be more an interwoven skipping balance.
function theme_statement_multi($transactions, $uid, $month) {
  if (!count($transactions)) return "\n<p>".t('This user has no completed transactions')."</p>\n" . _statement_month_pager();;
  global $user;
  $columns = array(
    'created' => t('Date'),
    'title' => t('Description'), 
    'notme' => t('With Whom?'),
    'income' => t('Income'),
    'outgoing' => t('Expenditure'),
    'actions' => t(''),
  );
  //put the given array into the columns declared to make a table
  foreach($transactions as $key => $transaction) {
    foreach ($columns as $field => $title){
      $rows[$key]['data'][$field] = $transaction->$field;
    }
  }
  //Put transactions into a multidimensional array, reformating many of the fields
  $currencies = get_currencies(array('uids'=>array($uid)));
  foreach($transactions as $key=>$transaction) {
    $cid = $transaction->cid;
    $rows[$key]['data']['title'] = l($transaction->title, 'node/' . $transaction->nid);
    $rows[$key]['data']['notme'] = theme('username', user_load($transaction->notme), 'profile');
    $rows[$key]['data']['created'] = date('d/m/y', $transaction->created);
    if ($transaction->quantity > 0) {
      $rows[$key]['data']['income'] = theme('money', $transaction->quantity, $currencies[$cid]);
    } else {
      $rows[$key]['data']['outgoing'] = theme('money', abs($transaction->quantity), $currencies[$cid]);
    }
    $actions = _transaction_get_buttons($transaction);
    
    if ($transaction->state == TRANSACTION_STATE_COMPLETED) {
      $actions[] = '<div style="font-size:2.5em;color:green">&#x2713;</div>';//tick
    }
    $rows[$key]['data']['actions'] = implode("\n",$actions);
        
    //style the row according to the running balance
    if ($transaction->balance < 0 ) {
      $rows[$key]['class'] = 'debit';
    } else {
      $rows[$key]['class'] = 'credit';
    }
  }
  $columns['created'] = date('M', $transaction->created);
  $that_user = user_load($uid);
  $username = $that_user->name;
  drupal_set_title (t("@username's statement for @month", array('@username'=> $username, '@month' => $month)));
  return theme('table', $columns, $rows) . "\n" . _statement_month_pager();;
}

function eliminate_transactions(){
  db_query("DELETE FROM {node} WHERE type = 'transaction'");
  db_query('TRUNCATE TABLE {cc_transactions}');
  cc_balances_refresh();
}


//identify and return some currency objects, filtered according to options $nids, $uids and names_only
//always returns an array
function get_currencies($options=array()) {
  extract ($options);
  if ($cid) {
    return array($cid => node_load($cid));
  }
  if ($uids) {
    $nids = identify_currencies($uids);
  } else {
    $results = db_query("SELECT nid FROM {node} WHERE type = 'currency' ORDER BY nid ASC");
    while ($result = db_result($results)) {
      $nids[] = $result; 
    }
  }
  if (count($nids)) {
    if ($default) {
     return node_load(array_shift($nids));
    break; 
    }
    foreach ($nids as $nid) {
      $currencies[$nid] = node_load($nid);
    }
  }
  return $currencies;
}


function identify_currencies($uids = array()) {
  $uids = array_values($uids);
  $ors1 = array('1=1');
  $ors2 = array('1=1');
  //need to get all the global (sticky) currencies, all these users created, all the ones they traded in.
  if (count($uids)) {
    $uid_string = '(' . implode(',',$uids) . ')';
    $ors1[] = " uid IN " . $uid_string;
    $ors2[] = " payer_uid IN $uid_string OR payee_uid IN $uid_string ";
  }
  $ors1 = implode(" OR ", $ors1);
  //gets all the universal currencies and the ones owed by named users
  $results = db_query("SELECT nid from {node} WHERE type = 'currency' AND (sticky = TRUE OR ( %s ))", $ors1);
  while ($result = db_result($results)) {
    $visible[]=$result;
  }
  //add the currencies which this user has traded in
  $results = db_query("SELECT cid FROM {cc_transactions} WHERE %s",  implode(" OR ", $ors2));
  while ($nid = db_result($results) ){
    $visible[] = $nid;
  }
  return array_unique($visible);
}
