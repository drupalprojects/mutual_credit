<?php

function cc_import_help($section) {
  switch ($section) {
    case 'admin/help#cc_import':
      return t('Provides advice and a simple text box to paste csv style data from your existing spreadsheets. ') .
        t('Assumes user 1 is the balancing account.');
    case 'admin/marketplace/import/balances': 
      return t("This page allows you to import users' balances and gross incomes for users already on the system. To import users, see the !import_user module.",
        array('!import_user'=>l('user_import', 'http://drupal.org/project/user_import')
      )
    );
    case 'admin/marketplace/import/offers':
    case 'admin/marketplace/import/wants':
      return t("This page allows you to import users' @type for users already on the system.",
          array('@type' => $type)
        ) . 
        t("There are other ways of doing this, but this is simple and maintained along with the rest of the marketplace module.") . '<br />' .
        t("Use a spreadsheet tool to prepare a list of user ids or names, and the description in each line.") . '<br />' .
        t("For aesthetic reasons, there is a @num character limit on each description.", 
          array('@num' => variable_get('cc_ow_max_title', 128))
        ) . '<br />' .
        t("Each line should look like this (you must include the header row): !code", 
          array('!code' => '<blockquote><strong>"UserID","Description"</strong></blockquote>')
        ) .
        t("Try importing one or two first!");
      break;
    case 'admin/marketplace/import/migrate':
      return t("This button will give you some drupal code containing all the transactions, offers and wants on the system.") . '<br />' .
        t("Copy the code and run it in the php box of the devel module on the target system");
  }
}

/**
 * Implementation of hook_menu)().
 * http://api.drupal.org/api/function/hook_menu/6
 */
function cc_import_menu() {
  $items['admin/marketplace/import'] = array (
    'title' => 'Import Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_balances_form'),
    'access arguments' => array('configure economy'),
    'weight' => 5
  );
  $items['admin/marketplace/import/balances'] = array(
    'title' => 'Import Balances',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/marketplace/import/offers'] = array(
    'title' => 'Import Offers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_offers_form'),
    'access arguments' => array('configure economy'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/marketplace/import/wants'] = array(
    'title' => 'Import Wants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_wants_form'),
    'access arguments' => array('configure economy'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/marketplace/import/migrate'] = array(
    'title' => 'Migrate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mutual_credit_migrate_form'),
    'access arguments' => array('view all transactions'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}


function import_balances_form(&$form_state) {
  //check that no transactions have already taken place
  if (db_result(db_query("SELECT nid FROM {cc_transactions} WHERE state <> %d LIMIT 0,1", TRANSACTION_STATE_ERASED))) {
    return array('#prefix' => 'You can only import "carried forward" balances before any transactions have been entered on the system.');
  }

  $form['#prefix'] .= "\n<p>".t("Paste paste 2 or 3 comma separated columns into the field below, the first column should be the uid or username, the second column the current balance, and optionally the third column should be the user's gross income until now (turnover).");
  $form['#prefix'] .= "\n<p>".t("This tools assumes there is only one currency in the system. The second column SHOULD add up to 0 for LETS and other zero balance systems, but this will not be checked." ) . '</p>';
  $form['#prefix'] .= "\n<p>".t("The first line of the field should read (third column is optional): !code", array('!code' => '<blockquote>"UserID","Balance","GrossIncome"</blockquote>"')) . '</p>';
  
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => $form_state['values']['data'],
    '#required' => TRUE  
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'user/'.variable_get('cc_balancing_account_num', NULL).'/statement';
  return $form;
}

function import_balances_form_validate($form, &$form_state) {
  if (!(variable_get('cc_balancing_account_num', NULL))) {
    form_set_error('', t('to import balances you need a balancing account. Specify the account number at !admin/marketplace', array('!admin/marketplace'=> l('admin/marketplace','admin/marketplace'))));
  }

  $rows = str_getcsv($form_state['values']['data'], ",", '"');
  check_users($rows);

  foreach ($rows as $rownum => $row) {
    $users[] = $row['UserID'];
    //check integrity of balances, the second field
    if (!intval($row['Balance'])) {
      form_set_error('data', t("balance (second item) on row @num is not an integer", array('@num'=>$key+1)));
    }
  
    //check integrity of gross income, the optional third field
    if (isset($row['GrossIncome'])){
      if (!intval($row['GrossIncome'])) {
        form_set_error('data', t("gross income (third item) on row @rownum must be a positive integer", array('@rownum'=>$rownum+1)));
      } elseif ($row['GrossIncome'] < 0) {
        form_set_error('data', t("gross income (third item) on row @rownum cannot be less than 0", array('@rownum'=>$rownum+1)));
      }
    }
  }
}

function import_balances_form_submit($form, &$form_state) {
  $rows = str_getcsv($form_state['values']['data']);

  foreach ($rows as $key=>$row) {
    $stats=explode(',',$row);
    $uid = $stats['UserID'];
    $balance = $stats['Balance'];
    if (isset($stats['GrossIncome'])) {
      $gross_income=$stats['GrossIncome'];
    }
    //if there is a gross income(turnover), we make two transactions, +turnover, then -turnover+balance
    cc_import_balances_member($uid, $balance, $gross_income);
  }
}
function cc_import_balances_member($uid, $balance, $gross_income=NULL) {
  module_load_include('admin.inc', 'transactions');
  $bal_acc = variable_get('cc_balancing_account_num', 1);
  $options = array(
    'transaction_type' => 'imported',
    'starter_uid' => $bal_acc,
  );
  if ($gross_income) {
    generate_transaction_node(t("Gross income"), $bal_acc,  $uid, $gross_income, $options, $cid);
    generate_transaction_node(t("Gross expenditure"), $uid, $bal_acc, $gross_income-$balance, $options, $cid);
    
  } else {//if there is only balance, we do one transaction, which is simply + balance
    if (intval($balance) > 0) {
      $payer_uid = $bal_acc;
      $payee_uid = $uid;
    }
    elseif (intval($balance) < 0) {
      $balance = abs($balance);
      $payee_uid = $bal_acc;
      $payer_uid = $uid;
    }
    $transaction=generate_transaction_node(t("Carried Forward"), $payer_uid,  $payee_uid, $balance, $options, $cid);
  }
}

function import_offers_form(&$form_state) {
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => $form_state['values']['data'],
    '#required' => TRUE  
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'directory/recent_offers';
  $form['#validate'][] = 'import_offers_wants_form_validate';
  return $form;
}

function import_offers_form_submit ($form, &$form_state) {
  $rows = str_getcsv($form_state['values']['data']);
  foreach ($rows as $row) {
    generate_offer_want_node('offer', $row['UserID'], $row['Description']);
  }
}

function import_wants_form(&$form_state) {
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => $form_state['values']['data'],
    '#required' => TRUE  
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'directory/recent_wants';
  $form['#validate'][] = 'import_offers_wants_form_validate';
  return $form;
}

function import_wants_form_submit ($form, &$form_state) {
  $rows = str_getcsv($form_state['values']['data']);
  foreach ($rows as $row) {
    generate_offer_want_node('want', $row['UserID'], $row['Description']);
  }
}

function import_offers_wants_form_validate($form, &$form_state) {
  $rows = str_getcsv($form_state['values']['data']);
  $max = variable_get('cc_ow_max_title', 128);
  foreach ($rows as $rownum => $row) {
    $users[] = $row['UserID'];
    //we've checked the users (field1) already, so now check the description
    if (strlen($row['Description'] > $max)) {
      $overlong[] = $rownum;
      //$row['Description'] = substr($row['Description'], 0, 255);
    }
    if (count($overlong)) {
      form_set_error('data', t('Descriptions on the following should be reduced to less than @num characters: @rows', array('@num' => $max, '@rows' => implode(',',$overlong))));
    }
    
    //now check the taxonomy term exists, and flag an error if it doesn't
    if (count($row > 2)) {
      drupal_set_message("Only the first two columns will be used", "warning");
    }
  }
  check_users($rows);
}

function check_users($rows) {
  foreach ($rows as $row) {
    $users[] = $row['UserID'];
  }
  foreach (array_unique($users) as $uid) {
    $account = user_load($uid);
    if (!$account->name) {
      $extinct[] = $uid;
    }
    if (count($extinct)) {
      form_set_error('data', t("The following UserIDs do not exist: @UserIDs", array('@UserIDs' => implode(', ', $extinct))));
    }
  }
}

/*
 * Helper Functions
*/

if (!function_exists('str_getcsv')) { 
function str_getcsv($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
  $rows = explode("\n", $input);
  $headers = explode($delimiter, array_shift($rows));
  $all = array();
  while ($row = array_shift($rows)){
    $entry=array();
    $values = explode($delimiter, $row);
    $i=0;
    foreach($values as $v){
      if ($i < count($headers)) $entry[trim($headers[$i], "\"\r")] = trim($v, "\"\r");
      $i++;
    }
    $data[] = $entry;
  }
  return $data;
}}

function mutual_credit_migrate_form() {
  $form['migrate_button'] = array (
    '#type' => 'submit',
    '#value' => 'Migrate',
  );
  return $form;
}
function mutual_credit_migrate_form_submit() {
  $output = array('module_load_include("admin.inc", "transactions");');
  $result = db_query("SELECT n.title, t.payer_uid, t.payee_uid, t.quantity, t.transaction_type, n.created, t.state
    FROM node n JOIN cc_transactions t ON n.nid = t.nid
    WHERE n.type = 'transaction'");
  while ($transaction = db_fetch_object($result)) {
    //print_r($transaction);
    $output[] = 'generate_transaction_node("'. trim($transaction->title) .'", "'. $transaction->payer_uid .'", "'. $transaction->payee_uid .'", "'. $transaction->quantity .'", array("transaction_type"=>"'. $transaction->transaction_type .'", "created"=>"'. $transaction->created .'", "state=>"'. $transaction->state .'"));';
  }
  $result = db_query("SELECT title, uid, type from node WHERE type = 'offer' OR type = 'want'");
  while ($ad = db_fetch_object($result)) {
    $output[] = 'generate_offer_want_node("'. $ad->type .'", "'. $ad->uid .'", "'. trim($ad->title) .'");';
  }
  print implode('<br>', $output);die();
}