<?php

/* Provides a form for administrators to create a set of transactions
 * Intended to tax members to the balancing account and pay salaries
 * Users cannot change their names (because I can't get around the Drupal duplicate name check)
 * Usernames are not unique in the Database
*/

function cc_mass_pay_menu() {
  $items['admin/marketplace/mass_payment'] = array (
    'title' => 'Mass Payments',
    'description' => 'Create mass transactions to and from one account',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['transaction/many2one'] = array (
    'title' => 'Many-to-one',
    'description' => 'collect an arbitrary amount from most accounts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('many2one_form'),
    'access arguments' => array('edit all transactions'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'transactions.inc',
    'file path' => drupal_get_path('module', 'transactions')
  );
  $items['transaction/one2many'] = array (
    'title' => 'One-to-many',
    'description' => 'payout an arbitary amount to a few people',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('one2many_form'),
    'access arguments' => array('edit all transactions'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'transactions.inc',
    'file path' => drupal_get_path('module', 'transactions')
  );
  return $items;
}



function cc_mass_pay_theme(){
  return array(
    'mass_payment_form' => array(
      'template' => 'mass_payment_form',
      'arguments' => array(
        'form' => NULL,
      )
    )
  );
}

//This form is built from transaction_base_form then modified
function cc_many2one_form() {
  //putting an empty object in there makes the transaction form show payer_uid and payee_uid instead of starter_uid and completer_uid
  $form = transaction_base_form((object)array(), 'init', 'payer_payee');
  unset($form['payer_uid']);
  unset($form['completer_uid']);
  unset($form['starter_uid']);
  unset($form['#after_build']);
  $payers = cache_get('cc_trader_list');
  if (!$payers) return;

  $form['non_payers'] = array (
    '#type' => 'select', 
    '#title' => t('Payer exceptions'),
    '#options' => $payers,
    '#default_value' => variable_get('cc_mass_pay_collect_nonpayers', NULL),
    '#multiple' => TRUE,
    '#description' => t("Select the accounts you DON'T want to be billed. Use CTRL click to select more than one."),
  );
  $form['payee_uid']['#description'] = t("Select the one account to which all the transactions will flow.");
  $form['quantity']['#description']  = t('How much should be taken from each account?');
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Generate transactions'),
    '#weight' => 10,
  );
  $form['#theme'] = 'mass_payment_form';
  return $form;
}

function many2one_form_validate($form, &$form_state) {
  $payers = array_diff(array_keys(cache_get('cc_trader_list')), $form_state['values']['non_payers'], array($form_state['values']['payee_uid']));
  if (!count($payers)) {
    form_set_error('non_payers', t("No payers have been selected. Have you selected all accounts as non-payers?")); 
  }
  else {
    cc_validate_trader('uid', $payers);
    cc_validate_trader('uid', $form_state['values']['payee_uid']);
    $form_state['payers'] = $payers;
  }
}

function many2one_form_submit($form, $form_state) {
  module_load_include('admin.inc', 'transactions');
  variable_set('cc_mass_pay_collect_nonpayers', $form_state['values']['non_payers']);
  $transaction = _infer_transaction_from_form($form_state['values']);
  $options = array(
    'transaction_type'=> ($transaction->state == TRANSACTION_STATE_COMPLETED) ? 'incoming_mass_direct' :  'incoming_mass_confirmed',
    'starter_uid' => $transaction->payee_uid,
    'uid' => $GLOBALS['user']->uid,
    'state' => $transaction->state,
  );
  // make the payments
  foreach ($form_state['payers'] as $payer_uid) {
    $options['completer_uid'] = $payer_uid;
    generate_transaction_node($transaction->title, $payer_uid, $transaction->payee_uid, $transaction->quantity, $options, $transaction->cid);
  }  
  cc_balances_refresh();
  $payee = user_load($transaction->payee_uid);
  $message = t("Many to @name mass payment of @amount for @description", 
    array(
    '@user' => $payee->name,
    '@amount' => $form_state['values']['quantity'] .' ' . $currency->title,
    '@description' => $form_state['values']['title']
    )
  );
  //this seems to be the only way to get translated strings to watchdog, as the the first 2 parameters must be literal strings
  watchdog('Mass Payments', '!message', array('!message' => $message));
  mass_pay_redirect($transaction->payee_uid);
}

function one2many_form() {
  //putting an empty object in there makes the transaction form show payer_uid and payee_uid instead of starter_uid and completer_uid
  $form = transaction_base_form((object)array(), 'init', 'payer_payee');
  unset($form ['payee_uid']);
  unset($form ['completer_uid']);
  unset($form ['starter_uid']);
  unset($form['#after_build']);
  $payees = cache_get('cc_trader_list');
  if (!$payees) return;

  $form['non_payees'] = array (
    '#type' => 'select', 
    '#title' => t('Payees'),
    '#options' => $payees,
    '#default_value' => variable_get('cc_mass_pay_non_payees', NULL),
    '#multiple' => TRUE,
    '#description' => t("Select the accounts you don't want to be paid. Use CTRL click to select more than one."),
  );
  $form['payer_uid']['title']['#description'] = t("Select the one account from which all the transactions will flow.");
  $form['quantity']['#description']  = t('How much should be paid into each account?');
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Generate transactions'),
    '#weight' => 10,
  );
  $form['#theme'] = 'mass_payment_form';
  $form['#redirect'] = 'admin/reports/dblog';
  return $form;
}

function one2many_form_validate($form, &$form_state) {
  $payees = array_diff(array_keys(cache_get('cc_trader_list')), $form_state['values']['non_payees'], array($form_state['values']['payer_uid']));
  if (!count($payees)) {
    form_set_error('non_payees', t("No payees have been selected. Have you selected all accounts as non-payees?")); 
  }
  else {
    cc_validate_trader('uid', $payees);
    cc_validate_trader('uid', $form_state['values']['payer_uid']);
    $form_state['payees'] = $payees;
  }
}

function one2many_form_submit($form, $form_state) {
  module_load_include('admin.inc', 'transactions');
  variable_set('cc_mass_pay_non_payees', $form_state['values']['payees']);
  $transaction = _infer_transaction_from_form($form_state['values']);
  
  $options = array(
    'transaction_type'=> ($transaction->state == TRANSACTION_STATE_COMPLETED) ? 'outgoing_mass_direct' :  'outgoing_mass_confirmed',
    'starter_uid' => $transaction->payer_uid,
    'uid' => $GLOBALS['user']->uid,
    'state' => $transaction->state,
  );
  //make payments one by one.
  foreach ($form_state['payees'] as $payee_uid) {
    $options['completer_uid'] = $payee_uid;
    generate_transaction_node($transaction->title, $transaction->payer_uid, $payee_uid, $transaction->quantity, $options, $transaction->cid);
  }
  cc_balances_refresh();
  $payer = user_load($transaction->payer_uid);
  $message = t("@user pays many @amount: @description", 
    array(
      '@user'=> $payer->name, 
      '@amount' => theme('money', $form_state['values']['quantity'], 'mass_payment', $cid),
      '@description' => $form_state['values']['title'],
    )
  );
  watchdog('Mass Payments', '!message', array('!message' => $message));
}

function template_preprocess_mass_payment_form(&$vars) {
  foreach ($vars['form'] as $key => $field) {
    if (strpos($key, '#') !== 0 && is_array($field)  && $key != 'form_token' ){
      if ($field['#type'] && $field['#type'] != 'hidden') {
        if ($field['#type'] != 'checkbox') {
          $vars['form'][$key]['#title'] = NULL;
          $vars['form'][$key]['#description'] = NULL;
        }
        $vars[$key] = drupal_render($vars['form'][$key]);
      }
    }
  }
  $vars['hidden_fields'] = drupal_render($vars['form']);
}

function mass_pay_redirect($uid) {
  if (module_exists('dblog')) {
    drupal_goto ('admin/reports/dblog');
  }
  else {
    drupal_goto('user/'.$uid);
  }
}