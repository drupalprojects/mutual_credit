<?php

use Drupal\Core\Session\AccountInterface;
use Drupal\mcapi\Exchange;
use Drupal\mcapi_1stparty\Entity\FirstPartyFormDesign;
use \Drupal\Core\Render\Element;

/**
 * implements hook_help().
 */
function mcapi_1stparty_help($route_name) {
  if ($route_name == 'mcapi.admin_1stparty_editform_list') {
    $help[] = t('Design your own forms for users to start transactions on their workflow paths.');
    $help[] = t('Each form has access control and can be presented as a block, page or panel.');
    $help[] = t('Each form can have presets and hidden fields.');
    return implode(' ', $help);
  }
}

/**
 * implements hook_entity_type_alter().
 *
 * adds one form controller to the transaction entity for every designed form
 */
function mcapi_1stparty_entity_type_alter(array &$entity_types) {
  //there's a recursive problem doing loadMultiple configEntities during entity_type_alter
  //So this is a direct db query
  $template = 'mcapi_1stparty.editform.';
  $ids = db_select('config', 'c')
    ->fields('c', ['name'])
    ->condition('name', $template.'%', 'LIKE')
    ->execute()->fetchCol();
  //foreach (FirstPartyFormDesign::loadMultiple() as $id => $configEntity) {
  foreach ($ids as $id) {
    $entity_types['mcapi_transaction']
      ->setFormClass(
        substr($id, strlen($template)),
        'Drupal\mcapi_1stparty\FirstPartyTransactionForm'
      );
  }
}

/**
 * implements hook_theme().
 */
function mcapi_1stparty_theme() {
  return array(
    '1stpartyform'=> array(
      'function' => 'theme_1stpartyform',//no template is possible here
      'render element' => 'element',
    ),
  );
}

/**
 * theme preprocessor
 */
function template_preprocess_1stpartyform(&$vars) {
  $form = &$vars['element'];
  //add the buttons at the end if they weren't in the twig template already
  if (strpos($form['#twig'], '{{ actions }}') === FALSE) {
    $form['#twig'] .= "\n{{ actions }}";
  }
  if (isset($form['direction']['#value']) && $form['direction']['#value'] == 'outgoing') {
    $replacements = [
      '{{ partner }}' => '{{ payee }}',
      '{{ mywallet }}' => '{{ payer }}',
    ];
  }
  else {
    $replacements = [
      '{{ partner }}' => '{{ payer }}',
      '{{ mywallet }}' => '{{ payee }}',
    ];
  }
  $form['#twig'] = strtr($form['#twig'], $replacements);
}

/**
 * theme implementation of callback 1stpartyform
 * this must be a function, because we are taking a twig string instead of using a template file
 * @todo put this in another file for performance reasons
 */
function theme_1stpartyform($vars) {
  $form = $vars['element'];
  $tokens = [];
  foreach (Element::children($form) as $fieldname) {
    if (strpos($form['#twig'], '{{ '.$fieldname.' }}') !== FALSE) {
      $tokens[$fieldname] = mcapi_render_stripped($form[$fieldname]);
    }
    else {
      if (@$form[$fieldname]['#default_value'] || @$form[$fieldname]['#value']) {
        $tokens['hidden_elements'][$fieldname] = $form[$fieldname];
      }
      elseif ($form[$fieldname]['#required']) {
        drupal_set_message(t('No default value for required hidden element @name', array('@name' => $fieldname)));
      }
    }
  }

  $last = key($tokens);
  //adjustments for intertrade mode
  if (array_key_exists('intertrade', $tokens)) {// && array_key_exists('partner_all', $form)) {
    $checkbox = mcapi_render_stripped($form['partner_all']);
    if (array_key_exists('partner', $tokens)) {
      $tokens['partner'] .= $checkbox;
    }
    else {
      $tokens[$last] .= $checkbox;
    }
  }
  //append everything not rendered onto the last rendered thing.
  //$tokens['hidden_elements'] = $form;
  $form['#twig'] .= '{{ hidden_elements }}';

  return \Drupal::service('twig')->renderInline(
    _filter_autop($form['#twig']),
    $tokens
  );
}

/**
 * callback to render form elements without their theme_wrappers
 * simply stripping the theme_wrappers is cleaner but prevents the #states from working.
 *
 * @param array $element
 *
 * @return string
 *   HTML
 *
 * @todo put this in another file for performance reasons
 */
function mcapi_render_stripped(&$element) {
  if (array_key_exists('#type',  $element)) {
    if (!in_array($element['#type'], array('checkbox', 'checkboxes', 'radios', 'actions', 'value'))) {
      $element['#prefix'] = '<span class = "form-item">';
      $element['#suffix'] = '</span>';
      unset($element['#theme_wrappers']);
    }
  }
  return \Drupal::service('renderer')->render($element);
}

/**
 * machine_name callback
 * @param unknown $id
 */
function mcapi_editform_load($id) {
  return FirstPartyFormDesign::load($id);
}

/**
 * get all the tokens which apply in the transaction form
 * @return array
 *   the token names, without the 'type:'
 */
function mcapi_1stparty_transaction_tokens() {
  $tokens = Exchange::transactionTokens(FALSE);

  unset($tokens[array_search('state', $tokens)]);
  unset($tokens[array_search('serial', $tokens)]);
  unset($tokens[array_search('creator', $tokens)]);
  unset($tokens[array_search('mcapi_exchange_og_ref', $tokens)]);
  //replace payer and payee with partner and direction
  $tokens[] = 'direction';
  return $tokens;
}

/**
 * return the visible field definitions for any transaction field API fields
 * according to the default transaction entity_form_display
 * including worth, or course
 *
 * @return array
 *   field definitions and widgets keyed by field name
 */
function mcapi_1stparty_fieldAPI() {
  return mcapi_default_display_fields();
}

function mcapi_1stparty_form_field_ui_form_display_overview_form_alter(&$form, $form_state) {
  $form['#suffix'] = t('N.B. Disabled fields may cause problems with the transaction form editor');
}

/**
 * implements hook_menu_links_discovered_alter().
 * adds menu links where the firstparty forms specify them
 *
 * @param unknown $definitions
 *
 * @note adding/Altering menu links, local tasks and local actions are all very different...
 *
 * @todo test this
 */
function mcapi_1stparty_menu_links_discovered_alter(&$definitions) {
  foreach (FirstPartyFormDesign::loadMultiple() as $id => $first_party_form) {
    if (empty($first_party_form->menu['menu_name'])) continue;
    $route_name = 'mcapi.1stparty.'.$id;

    $parent_path = substr($first_party_form->path, 0, strrpos($first_party_form->path, '/'));
    $definitions[$route_name.'.link'] = array(
      'title' => $first_party_form->title,
      'route_name' => $route_name,
      'provider' => 'mcapi_1stparty',
      //'parent' => '',// currently the entity doesn't support nested menu items
    );
  }
}

/**
 * implement hook_entity_base_field_info_alter().
 *
 * change the default date widget for the created field
 *
 * @todo make this work with the date_popup widget, but in what module
 */
function mcapi_1stparty_entity_base_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  $datewidget = \Drupal::moduleHandler()->moduleExists('datetime') ?
    'datetime_timestamp' :
    'datetime_timestamp';
  return;
  if ($entity_type->id() == 'mcapi_transaction') {
    $fields['created']->setDisplayOptions(
      'form',
      ['type' => $datewidget, 'weight' => 10]
    );
  }
}