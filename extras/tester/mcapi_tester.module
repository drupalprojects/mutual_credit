<?php

use Drupal\Core\Entity\EntityStorageException;
use Drupal\mcapi\McapiTransactionException;

/**
 * implements hook_menu().
 */
function mcapi_tester_menu() {
  return array(
  	'admin/accounting/generate' => array(
  	  'title' => 'Generate data',
  	  'description' => 'delete all data and create fresh',
  	  'route_name' => 'mcapi.generate'
    )
  );
}
/**
 * implements hook_permissions().
 */
function mcapi_tester_permissions() {
  return array(
    'exchange helper' => array(
      'title' => t('Helper within an exchange'),
      'description' => t("Enhanced access within one's own exchanges")
    )
  );
}

/**
 * implements hook_entity_extra_field_info()
 */
function mcapi_tester_entity_extra_field_info() {
  $extra['mcapi_exchange']['mcapi_exchange']['display']['transactions_link'] = array(
    'label' => t('List of transactions'),
    'weight' => 11,
  );
  return $extra;
}

/**
 * implements hook_mcapi_exchange_view()
 * adds the members link and transactions link to the exchanges view
 */
function mcapi_tester_mcapi_exchange_view(&$build, $entity, $mode, $language) {

  $count = db_select("user__exchanges", 'e')->fields('e', array('entity_id'))
  ->condition('exchanges_target_id', $entity->id())
  ->countQuery()->execute()->fetchField();
  $build['members_link'] = array(
    '#type' => 'item',
    '#title' => t('@count members', array('@count'=> $count)),
    'link' => array(
      '#type' => 'link',
      '#title' => t('Show members'),
      '#href' => 'exchange/'.$entity->id().'/members',
      //maybe instead put a view with the last five members here
      '#options' => array('attributes' => array('title' => "This view doesn't exist yet"))
    )
  );

  drupal_set_message('find a way to list the transactions of all wallets whose parents are in this exchange using the mcapi_wallet_exchanges_index table');
  $count = db_select("mcapi_transactions", 't')->fields('t', array('xid'))->distinct()
  ->countQuery()->execute()->fetchField();


  $build['transactions_link'] = array(
    '#type' => 'item',
    '#title' => t('@count members', array('@count'=> $count)),
    'link' => array(
      '#type' => 'link',
      '#title' => t('Show transactions'),
      '#href' => 'exchange/'.$entity->id().'/transactions',
      //maybe instead put a view with the last five members here
      '#options' => array('attributes' => array('title' => "This view doesn't exist yet"))
    )
  );
  if ($roles = user_role_names(TRUE, 'exchange helper')) {
    $helpernames = array();
    //get all the helper users in this exchange
    $query = db_select('users_roles', 'ur')->fields('ur', array('uid'));
    $query->join('user__exchanges', 'f', 'f.entity_id = ur.uid');
    $query->condition('ur.rid', array_keys($roles))
    ->condition('f.exchanges_target_id', $entity->id());

    foreach (entity_load_multiple('user', $query->execute()->fetchCol()) as $account) {
      $helpernames[] = $account->label();//what's the best way to make this a link?
    }
    if (empty($helpernames)) {
      $helpernames = array(t('None'));
    }
    $build['people']['helpers'] = array(
      '#prefix' => '<br />',
      '#markup' => t('Helpers: !names', array('!names' => implode(', ', $helpernames)))
    );
  }
}


function mcapi_tester_make_transactions($num, $inter = FALSE) {
  //pick a random wallet (not _intertrading);
  //quicker to access db directly than try to use the storage-neutral API
  $wallet_storage = \Drupal::EntityManager()->getStorage('mcapi_wallet');
  $all_wallet_ids = $wallet_storage->filter(array(), 0, 0, FALSE);

  //remove wallet 2, belonging to user 1, because of a caching problem - very uncomfortable hack
  $pos = array_search('2', $all_wallet_ids);
  unset($all_wallet_ids[$pos]);

  for ($i = 1; $i <= $num; $i++) {
    //get two random different wallets - the first one...
    $temp = $all_wallet_ids;
    shuffle($temp);
    $rand_wallet = entity_load('mcapi_wallet', array_pop($temp));
    //get another wallet either within or not necessarily within the same exchange.
    $exchanges = referenced_exchanges($rand_wallet->getOwner(), TRUE);//mcapi_tester settings will return 1 exchange
    if (empty(current($exchanges))) continue;//the random wallet was in a disabled exchange
    $conditions = array();
    if (!$inter && $exchanges) {
      $conditions['exchanges'] = array_keys($exchanges);
    }
    //remove the first wallet from the list of possible second wallets
    unset($temp[array_search($rand_wallet->id(), $temp)]);
    //re-key the list so its easy to get a random value
    $temp = array_values($temp);
    //choose a random second wallet
    $partner_wid = $temp[rand(0, count($temp)-1)];

    $transaction = entity_create('mcapi_transaction');
    $transaction->payer->setValue($rand_wallet->id());
    $transaction->payee->setValue($partner_wid);
    $transaction->type->setValue('test');
    $worth = array(
      array(
        'curr_id' => current($exchanges)->currencies->value,
        'value' => rand(5, 100)*10)
    );
    $transaction->worth->setValue($worth);
    $transaction->description->value = 'autogenerated';
    try {
      //there is no way to get the soft error messages out when a transaction is created in code.
      $transaction->save();
    }
    catch (McapiTransactionException $e) {
      mdump($e);
    }
    catch(EntityStorageException $e) {
      //all errors will be entityStorage exceptions because save() catches and rethrows them
      //random attempts at intertrading are bound to produce some errors.
      //otherwise we actually do have a problem
      if ($inter) continue;
      throw new Exception($e->getMessage);
    }
    if ($num == 1)drupal_set_message(l('Created transaction', $transaction->url('canonical')));
  }
}
