<?php


//TEMP until drupal works out installation dependencies
if (!module_exists('taxonomy')){
  \Drupal::moduleHandler()->install(array('taxonomy', 'help'));
}

function mcapi_tester_install() {
  //We have 3 example exchanges and 4 users in each exchange
  //each exchange has its own currency, one ladmin, one helper and 2 members
  $exchanges = array(
  	array(
  	  'name' => 'second exchange',
  	  'uid' => 6,
  	  'open' => 1,
  	  'visibility' => 'restricted',
  	  'langcode' => 'und',
  	  'field_currencies' => array(
         array('target_id' => 'second')
      )
    ),
  	array(
  	  'name' => 'third exchange',
  	  'uid' => 1,
  	  'open' => 1,
  	  'visibility' => 'private',
  	  'langcode' => 'und',
  	  'field_currencies' => array(
  		  array('target_id' => 'third')
      )
    )
  );
  $wallet = array('name' => 'Shared wallet', 'entity_type' => 'mcapi_exchange');
  foreach($exchanges as $values) {
    $exchange = entity_create('mcapi_exchange', $values);
    $exchange->save();
    $wallet['pid'] = $exchange->id();
    entity_create('mcapi_wallet', $wallet)->save();
  }

  $users = array(
    array(
      'name' => 'Ben Diego',
      'mail' => 'ben@matslats.net',
      'exchange' => 1,
      'roles' => array('ladmin'),
    ),
    array(
      'name' => 'Cath Arctic',
      'mail' => 'carrie@matslats.net',
      'exchange' => 1,
      'roles' => array('helper'),
    ),
    array(
      'name' => 'Don Eagle',
      'mail' => 'dan@matslats.net',
      'exchange' => 1,
      'roles' => array(),
    ),
    array(
      'name' => 'Esther Minate',
      'mail' => 'ed@matslats.net',
      'exchange' => 1,
      'roles' => array(),
    ),
    array(
      'name' => 'Fran Tastic',
      'mail' => 'fran@matslats.net',
      'exchange' => 2,
      'roles' => array('ladmin'),
    ),
    array(
      'name' => 'Gary Somatic',
      'mail' => 'gary@matslats.net',
      'exchange' => 2,
      'roles' => array('helper'),
    ),
    array(
      'name' => 'Harry Stockrat',
      'mail' => 'harry@matslats.net',
      'exchange' => 2,
      'roles' => array(),
    ),
    array(
      'name' => 'Ian Effible',
      'mail' => 'ian@matslats.net',
      'exchange' => 2,
      'roles' => array(),
    ),
    array(
      'name' => 'Jock Carter',
      'mail' => 'jock@matslats.net',
      'exchange' => 3,
      'roles' => array('ladmin'),
    ),
    array(
      'name' => 'Kerry Scene',
      'mail' => 'kerry@matslats.net',
      'exchange' => 3,
      'roles' => array('helper'),
    ),
    array(
      'name' => 'Larry Sistance',
      'mail' => 'larry@matslats.net',
      'exchange' => 3,
      'roles' => array(),
    ),
    array(
      'name' => 'Mel Bourne',
      'mail' => 'mel@matslats.net',
      'exchange' => 3,
      'roles' => array(),
    )
  );
  $d = 1;
  foreach ($users as $user) {
    $d++;
    $values = array(
      'name' => $user['name'],
      'mail' => $user['mail'],
      'roles' => array_merge(array('member'), $user['roles']),
      'created' => strtotime("-$d days"),
      'field_exchanges' => array(array('target_id' => $user['exchange']))
    );
    $account = entity_create('user', $values);
    $account->save();
    //if the user has ladmin role, make them owner of their exchange
    if (array_search('ladmin', $values['roles'])) {
       db_query("UPDATE {mcapi_exchanges} SET uid = :uid WHERE id = ".$values['field_exchanges'][0]['target_id'], array(':uid' => $account->id()));
    }
  }

  //each of these users will already have a wallet, according to the default settings,
  //so we can make some transactions
  foreach(entity_load_multiple('mcapi_exchange') as $exchange) {
    $wallets = db_query("SELECT wid FROM {mcapi_wallets} w
        JOIN {users} u ON w.pid = u.uid AND w.entity_type = 'user'
        JOIN {user__field_exchanges} e ON u.uid = e.entity_id AND e.field_exchanges_target_id = ".$exchange->id()
    )->fetchCol();
    //identify the currency of the exchange
    $ref = $exchange->get('field_currencies')->getValue();
    //get 2 random different wallet ids
   $secondsago = rand(1, 25*3600);
    for ($i = 0; $i < 12; $i++) {
      $secondsago = rand(1, 25*3600);
      shuffle($wallets);
      $t = array(
        'payer' => next($wallets),
        'payee' => next($wallets),
        'worths' => array(
          'credunit' => array(
            'currcode' => $ref[0]['target_id'],
            'value' => rand(100, 5000)
          )
        ),
        'description' => 'test transaction',
        'exchange' => $exchange->id(),
        'created' => REQUEST_TIME - $secondsago
      );
      entity_create('mcapi_transaction', $t)->save();
    }
  }

  $terms = array('Transport', 'Food', 'Care', 'Learning', 'Home', 'Leisure');
  foreach ($terms as $term) {
    entity_create('taxonomy_term', array(
      'vid' => 'categories',
      'name' => $term,
    ))->save();
  }
}

function mcapi_tester_uninstall() {
  foreach (entity_load_multiple('user') as $uid => $account) {
    if ($account->id() == 1)continue;
    db_query("DELETE FROM {mcapi_wallets} WHERE pid = $uid AND entity_type =  'user'");
    $account->delete();
  }

  foreach (entity_load_multiple('mcapi_exchange') as $id => $ex) {
     if ($ex->id() > 1)$ex->delete();
  }
  foreach (entity_load_multiple('mcapi_currency') as $id => $curr) {
     if ($curr->id() != 'credunit' && $curr->id() != 'escro')$curr->delete();
  }
  db_truncate('mcapi_transactions')->execute();
  db_truncate('mcapi_transactions_worths')->execute();
  db_truncate('mcapi_transactions_index')->execute();
}


