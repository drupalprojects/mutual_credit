<?php


use Drupal\user\Entity\User;
use Drupal\user\Entity\Role;
use Drupal\mcapi\Entity\Exchange;
use Drupal\mcapi\Entity\Transaction;
use Drupal\mcapi\Entity\Currency;
use Drupal\taxonomy\Entity\Term;
use Drupal\field\Entity\FieldInstanceConfig;

function mcapi_tester_install() {

  //clear the entity cache because for some reasont user 1 has lost the contents of the exchanges field
  //I don't know the best way to do this yet, or whether the entity cache or field cache is effected
  //or whether this is because of a bug in alpha 11
  //drupal_flush_all_caches();
  //has no effect so I have prevented wallet 2 from being used when transactions are made

  $terms = array('Transport', 'Food', 'Care', 'Learning', 'Home', 'Leisure');
  foreach ($terms as $term_name) {
    Term::create(array(
      'vid' => 'categories',
      'name' => $term_name,
    ))->save();
  }
  echo "Created taxonomy terms";
  $names = array(
    'Pluto' => 'Pluto Pesos',
    'Mars' => 'Martian Moolah',
    'Saturn' => 'Saturnine Schillings',
    'Jupiter' => 'Jovial Jewels'
  );
  $exchange_ids = mcapi_tester_make_exchanges($names);
  echo "\nCreated exchanges";
  //now
  mcapi_tester_make_users(26);//should make wallets as well
  echo "\nCreated users";
  //make some transactions within the exchanges.
  mcapi_tester_make_transactions(200);
  echo "\n200 transactions created";
  //make some intertrading transactions
  mcapi_tester_make_transactions(25, TRUE);
  echo "\n200 intertrading transactions created";

  //close the last exchange and disable its currency
  $last_exchange = Exchange::load(end($exchange_ids));
  drupal_set_message('Closing the last exchange: '.$last_exchange);
  $last_exchange->set('status', 0);
  $last_exchange->save();

}

/**
 * implements hook_uninstall().
 */
function mcapi_tester_uninstall() {
  //to delete properly we have to temporarily change the delete mode
  $misc_conf = \Drupal::config('mcapi.misc');
  $indelible = $misc_conf->get('indelible');
  $misc_conf->set('indelible', 0)->save();

  if ($instance = FieldInstanceConfig::load('mcapi_transaction.mcapi_transaction.field_categories')) {
    //$instance->delete();
  }

  //remove the categories
  //TODO why isn't taxonomy_term recognised as an entity type?
  //foreach (entity_load_multiple_by_properties('taxonomy_term', array('vid' => 'categories')) as $term) {
    //$term->delete();
  //}
  //delete test transactions
  $transaction_storage = \Drupal::EntityManager()->getStorage('mcapi_transaction');
  $xids = array_keys($transaction_storage->filter(array('type' => 'test')));
  if ($xids) {
    $transaction_storage->delete(Transaction::loadMultiple($xids));
  }
  //delete test users
  foreach (User::loadMultiple() as $user) {
    if ($user->id() < 2) continue;
    $user->delete();//all users' wallets are now 'unused' so will be deleted also
  }
  //delete all exchanges except the first
  foreach (Exchange::loadMultiple() as $exchange) {
    if ($exchange->id() == 1)continue;
    $exchange->status->setValue(FALSE);
    $exchange->save();
    $exchange->delete();//their intertrading wallets should go automatically
  }
  foreach (Currency::loadMultiple() as $currency) {
    if ($currency->weight > 3) {
      $currency->delete();
    }
  }
  $misc_conf->set('indelible', $indelible);
  field_purge_batch(5);
}

/**
 * create some exchanges with different names, each with ONE currency
 * each argument is the name of an exchange.
 * N.B. each exchange will have its own intertrading wallet
 *
 * @param string
 *   the name of the first exchange
 * @return array
 *   the ids of the newly created exchanges
 */
function mcapi_tester_make_exchanges($names) {

  $w = 4;//because 3 currencies are already provided
  //this is less code and less maintainance than providing config files
  foreach ($names as $exchange_name => $currname) {

    $first = substr($currname, 0, 1);
    $props = array(
    	'id' => strtoLower($first.$first),
      'name' => $currname,
      'zero' => rand(0, 1),
      'issuance' => CURRENCY_TYPE_EXCHANGE,
      'format' => array($first.$first, '000', ':', '99'),
      'weight' => $w,
      'ticks' => 10*rand(1, 6)
    );
    $c = Currency::create($props);
    $c->save();
    $w++;

    $props = array(
    	'name' => $exchange_name,
      'currencies' => array($c->id())
    );
    $e = Exchange::create($props);
    $e->save();

    //for the purposes of testing we put user 1 in every exchange
    $account = User::load(1);
    $vals = $account->exchanges->getValue(FALSE);
    $vals = array_merge($vals, array(array('target_id' => $e->id())));
    $account->set('exchanges', $vals);
    $account->save();
    $ids[] = $e->id();
  }
  return $ids;
}

/**
 * Create up to 26 users and put them EACH IN ONE exchange
 * Note that users will have a wallet created automatically according to the wallet settings
 *
 * @param integer $num
 *   the number of users to create, max 26
 * @param array $exchange_ids
 *   the ids of exchanges the new members can join.
 * @return array
 *   the $account->id()s created
 */
function mcapi_tester_make_users($num = 26) {
  $manager_role = Role::load('manager');
  $helper_role = Role::load('helper');
  $all_exchange_ids = array_keys(Exchange::loadMultiple());

  //create users
  $first = array('Alice', 'Bobby', 'Carry', 'Dave', 'Ebeneezer', 'Fanny', 'Garry', 'Harry', 'Isa', 'Josephine', 'Kerry', 'Larry', 'Mathieu', 'Nancy', 'Oliver', 'Perry', 'Quentin', 'Ruby', 'Sylvester', 'Trudy', 'Ursula', 'Veronica', 'William', 'Xanadu', 'Yuri', 'Zoe');
  $last = array('Arachnid', 'Boulder', 'Castaway', 'Deathwish', 'Emerald', 'Frogleg', 'Golden', 'Handiman', 'Indignado', 'Janitor', 'Kant', 'Landrover', 'Mandrake', 'Nakomoto', 'Orwell', 'Python', 'Quarkson', 'Rhodes', 'Smythe', 'Trenchfoot', 'Ustinov', 'Victor', 'Wellington', 'X', 'Ypres', 'Zenithson');
  shuffle($last);
  $usersperexchange = ceil(26/count(Exchange::loadMultiple()));
  for ($i = 0; $i < $num; $i++) {
    $props = array(
    	'name' => $first[$i] .' '. $last[$i],
      'mail' => strtolower($first[$i]).'@mutualcreditmodule.matslats.net',
      'pass' => 'a',
      'status' => 1
    );
    $u = User::create($props);
    //give the first user in each exchange the manager role and the second the helper
    $memnum = ($i+1) % $usersperexchange;
    if ($memnum == 0) $u->addRole($manager_role->id());
    elseif ($memnum == 1) $u->addRole($helper_role->id());
    //we'll put the users sequentially into the exchanges so that its easy to guess where they are
    //assume the exchange ids are sequential, starting at 1

    $exchange_id = $all_exchange_ids[intval(floor(($i)/$usersperexchange))];
    $u->get('exchanges')->setValue(array($exchange_id));
    $u->save();
    $uids[] = $u->id();

    if ($memnum == 1) {//tell the exchange that it is owned by the manager
      $exchange = Exchange::load($exchange_id);
      $exchange->uid->value = $u->id();
      $exchange->save();
    }
  }
  return $uids;
}


