<?php
define('TRANSACTION_STATE_FORCE_FAILED', -3);

/*
 * implements mcapi hook_info_types
 */
function mcapi_rules_mcapi_info_types() {
  return array('auto');
}

/*
 * implements mcapi hook_info_states
 */
function mcapi_rules_mcapi_info_states() {
  return array(
    TRANSACTION_STATE_FORCE_FAILED => array(
      'name' => t('Failed'),
      'description' => t('Failed validation but forced through by automated process'),
      'default_access_callbacks' => array('mcapi_access_accountant')
    ),
  );
}


/*
 * Implements hook_action_info
 * provides some simple actions, without conditions
 */
function ________mcapi_rules_action_info() {
  module_load_include('inc', 'mcapi');
  if (module_exists('mcapi_pending')) {//this could be moved
    $items['mcapi_transaction_add_signatory_action'] = array(
      'type' => 'transaction',
      'label' => t('Add signatory'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    );
  }
  return $items;
}


/*
 * wrapper around mcapi API function transactions_save
 * any transaction that fails validation goes into a special state
 */
function transaction_auto_save($transactions) {
  $errors = FALSE;
  try {
    transactions_insert($transactions, FALSE);
  }
  catch (Exception $e) {
    foreach ($transactions as $key => $transaction) {
      $transactions[$key]->state = TRANSACTION_STATE_FORCE_FAILED;
      $transactions[$key]->data['fail'] = $e->getMessage();
      $errors[] = $e->getMessage();
    }
  }
  if (!$errors || variable_get('mcapi_rules_error_force', FALSE)) {//this variable is not settable yet
    transactions_insert($transactions, TRUE);
  }
  else {
    drupal_set_message(t('Auto payment was prevented with following messages: !messages'),
      array('!messages' => implode('<br />', $errors)
    ));
    watchdog('mcapi auto', 'Auto payment was prevented with following messages: !messages',
      array('!messages' => implode('<br />', $errors),
      WATCHDOG_ALERT
    ));
  }
}

/*
 * implements hook_trigger_info
 */
function mcapi_rules_trigger_info() {
  return array(
    'mcapi' => array(
//      'transactions_alter' => array(
//        'label' => t('Modify a cluster of transactions (with the same serial number) before saving'),
//      ),
    ),
  );
}


//Need a block to bring forced transactions to attention of permitted user
