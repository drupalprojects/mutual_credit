<?php
//Id;

function mcapi_signatures_install() {
  $mcapi_signed_off_notify_template = array(
    'subject' =>  st('Transaction signed off'),
    'body' => st('The following transaction has been signed off: @token', array('@token' => '[transaction:uri]'))
  );
  variable_set('mcapi_signed_off_notify_template', $mcapi_signed_off_notify_template);
  $mcapi_sign_notify_template = array(
    'subject' =>  st('Your signature is required'),
    'body' => st('Your signature is required on @token', array('@token' => '[transaction:uri]'))
  );
  variable_set('mcapi_sign_notify_template', $mcapi_sign_notify_template);
  //signatures
  foreach (array_keys(mcapi_get_types()) as $type) {
    variable_set('mcapi_signatures_'.$type, array (
      'participants' => 1,
      'countersignatories' => array (),
      'complete' => 0,
    ));
  }
}
/*
 * implements hook_uninstall
 */
function mcapi_signatures_uninstall() {
  module_load_include('module', 'mcapi_pending');
  $actions = array_keys(mcapi_pending_action_info());
  $aids = db_select('actions', 'a')->fields('a', array('aid'))->condition('callback', $actions)->execute()->fetchCol();
  foreach ($aids as $aid) {
    actions_delete($aid);
  }
  if (module_exists('views')) {
    $view = views_get_view('signatures');
    if($view) {
      views_delete_view($view);
    }
  }
  //signatures
  //TODO implement hook_variable
  foreach (array_keys(mcapi_get_types()) as $type) {
    variable_del('mcapi_signatures_'.$type);
  }
}
/**
 * Implementation of hook_schema)().
 * creates a table for storing signatures needed on pending transactions
 */
function mcapi_signatures_schema() {
  $schema['mcapi_signatures'] = array(
    'description' => 'signatories needed on pending transactions',
    'fields' => array(
      'serial' => array(
        'description' => t('the transaction to which this entry is attached'),
        'type' => 'varchar',
        'length' => 16,
      ),
      'uid' => array(
        'description' => t('the uid of the signatory'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'pending' => array(
        'description' => t('whether it is awaiting a signature'),
        'type' => 'int',
        'size' => 'small',
      )
    ),
    'primary key' => array('serial', 'uid')
  );
  return $schema;
}
/**
 * rename the signature blocks following the renaming of the views displays
 */
function mcapi_signatures_update_7001() {
  db_query("UPDATE {block} SET delta = 'sig_blocks-my_sig_needed' WHERE delta = 'signature_blocks-block_1'");
  db_query("UPDATE {block} SET delta = 'sig_blocks-anybodys_sig_needed' WHERE delta = 'signature_blocks-block_2'");
  views_flush_caches();
}

/**
 * update email tokens from transaction:uri to transaction:uri
 */
function mcapi_signatures_update_7002() {
  foreach (array('mcapi_sign_notify_template', 'mcapi_signed_off_notify_template') as $var) {
    variable_set($var, str_replace('transaction:uri', 'transaction:url', variable_get($var)));
  }
}