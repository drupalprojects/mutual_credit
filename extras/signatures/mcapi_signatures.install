<?php
//Id;
module_load_include('module', 'mcapi_signatures');

function mcapi_signatures_install() {
  $mcapi_signed_off_notify_template = array(
    'subject' =>  t('Transaction signed off'),
    'body' => t('The following transaction has been signed off: @token', array('@token' => '[transaction:url]'))
  );
  variable_set('mcapi_signed_off_notify_template', $mcapi_signed_off_notify_template);
  $mcapi_sign_notify_template = array(
    'subject' =>  t('Your signature is required'),
    'body' => t('Your signature is required on @token', array('@token' => '[transaction:url:absolute]'))
  );
  variable_set('mcapi_sign_notify_template', $mcapi_sign_notify_template);
  //signatures
  foreach (array_keys(mcapi_get_types()) as $type) {
    variable_set('mcapi_signatures_'.$type, array (
      'participants' => 1,
      'countersignatories' => array (),
      'complete' => 0,
    ));
  }
  $sentence = variable_get('mcapi_sentence', '[transaction:payer] paid [transaction:payee] [transaction:worth]');
  $sentence .= ' [transaction:sign_link]';
  variable_set('mcapi_sentence', $sentence);
}
/*
 * implements hook_uninstall
 */
function mcapi_signatures_uninstall() {
  module_load_include('module', 'mcapi_pending');
  if (module_exists('views')) {
    $view = views_get_view('signatures');
    if($view) {
      views_delete_view($view);
    }
  }
  //signatures
  //TODO implement hook_variable
  foreach (array_keys(mcapi_get_types()) as $type) {
    variable_del('mcapi_signatures_'.$type);
  }
}
/**
 * Implementation of hook_schema)().
 * creates a table for storing signatures needed on pending transactions
 */
function mcapi_signatures_schema() {
  $schema['mcapi_signatures'] = array(
    'description' => 'signatories needed on pending transactions',
    'fields' => array(
      'serial' => array(
        'description' => t('the transaction to which this entry is attached'),
        'type' => 'varchar',
        'length' => 16,
      ),
      'uid' => array(
        'description' => t('the uid of the signatory'),
        'type' => 'int',
        'size' => 'normal',
      ),
      'pending' => array(
        'description' => t('whether it is awaiting a signature'),
        'type' => 'int',
        'size' => 'small',
      )
    ),
    'primary key' => array('serial', 'uid')
  );
  return $schema;
}
/**
 * rename the signature blocks following the renaming of the views displays
 */
function mcapi_signatures_update_7001() {
  db_delete('block')->condition('delta', array('sig_blocks-my_sig_needed', 'sig_blocks-anybodys_sig_needed'))->execute();
  db_query("UPDATE {block} SET delta = 'sig_blocks-my_sig_needed' WHERE delta = 'signature_blocks-block_1'");
  db_query("UPDATE {block} SET delta = 'sig_blocks-anybodys_sig_needed' WHERE delta = 'signature_blocks-block_2'");
  views_flush_caches();
}

/*
 * oops there was a bug which left transactions pending but without signatures
 * cleanest fix is to create signed signatures in the mcapi_signatures table
 */
function mcapi_signatures_7004() {
  $transactions = transactions_load(NULL, array('state' => -1));
  foreach (transactions_load(NULL, array('state' => -1)) as $transaction) {
    foreach (array('payer', 'payee') as $participant) {
      $pending = $transaction->creator != $transaction->$participant;
      db_query(
        "INSERT IGNORE INTO {mcapi_signatures} (serial, uid, pending) VALUES (:serial, :uid, :pending) ON DUPLICATE KEY DO NOTHING",
        array(':serial' => $transaction->serial, ':uid' => $transaction->$participant, ':pending' => $pending)
      );
    }
  }
  db_query("DELETE FROM {mcapi_signatures} WHERE uid = 0");
}


/**
 * update email tokens from transaction:uri to transaction:url:absolute
 */
function mcapi_signatures_update_7005() {
  foreach (array('mcapi_sign_notify_template', 'mcapi_signed_off_notify_template') as $var) {
    $string = variable_get($var);
    $string = str_replace('transaction:uri]', 'transaction:url:absolute]', $string);
    $string = str_replace('transaction:url]', 'transaction:url:absolute]', $string);
    variable_set($var, $string);
  }
}
/**
 * reset the default transaction sentence to include signature links
 */
function mcapi_signatures_update_7007() {
  variable_set('mcapi_sentence', '[transaction:payer] paid [transaction:payee] [transaction:worth] [transaction:sign_link]');
}

/**
 * check that signatures are congruent with transaction states
 */
function mcapi_signatures_update_7008() {
  //sell all pending transactions to completed, then reset them to pending if they have signatures
  db_update('mcapi_transactions')->fields(array('state' => 1))->condition('state', TRANSACTION_STATE_PENDING)->execute();
  $pending_serials = db_select('mcapi_signatures', 's')
    ->fields('s', array('serial'))
    ->condition('pending', 1)
    ->execute()->fetchCol();
  if (empty($pending_serials)) return;
  db_update('mcapi_transactions')
    ->fields(array('state' => TRANSACTION_STATE_PENDING))
    ->condition('serial', $pending_serials)
    ->execute();
}

