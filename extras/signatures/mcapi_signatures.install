<?php

Use \Drupal\Core\Url;

function mcapi_signatures_install() {
  module_set_weight('mcapi_signatures', 2);
}

function mcapi_signatures_modules_installed($modules) {
  if (in_array('mcapi_signatures', $modules) && !in_array('mcapi', $modules)) {
    drupal_set_message(t(
      "Workflow settings should be reviewed to take account of transaction signing. !link",
      ['!link' => \Drupal::l(
        'admin/accounting/workflow',
        Url::fromRoute('mcapi.admin.transactions')
      )]
    ));
  }
}

/*
 * implements hook_uninstall().
 * @todo ideally we would prevent this module from uninstalling if ANY transactions
 * were in pending state. Ideally any module providing a transaction state in use
 * would not be uninstallable.
 */
function mcapi_signatures_uninstall() {
  $p = db_select('mcapi_transaction', 't')
    ->fields('t')
    ->condition('state', 'pending')
    ->countQuery()
    ->execute()
    ->fetchfield();
  if ($p) {
    drupal_set_message("This uninstall shouldn't have been possible if any transactions are pending");
  }
  db_update('mcapi_transaction')
    ->fields(['state' => 'done'])
    ->condition('state', 'pending')
    ->execute();//this isn't actually tested
  \Drupal::entityManager()->getStorage('mcapi_transaction')
    ->indexRebuild();
  drupal_set_message("All pending transactions have been set to 'done'");
}

/**
 * Implementation of hook_schema().
 * creates a table for storing signatures needed on pending transactions
 */
function mcapi_signatures_schema() {
  $schema['mcapi_signatures'] = [
    'description' => 'signatories needed on pending transactions',
    'fields' => [
      'serial' => [
        'description' => t('the transaction to which this entry is attached'),
        'type' => 'varchar',
        'length' => 16,
      ],
      'uid' => [
        'description' => t('the uid of the signatory'),
        'type' => 'int',
        'size' => 'normal',
      ],
      'signed' => [
        'description' => t('when the signature was added'),
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
      ]
    ],
    'primary key' => ['serial', 'uid']
  ];
  return $schema;
}


//@todo migrate notification mails from d7
/*
 $mcapi_signed_off_notify_template = [
     'subject' =>  t('Transaction signed off'),
     'body' => t('The following transaction has been signed off: @token', ['@token' => '[transaction:url]'))
 );
variable_set('mcapi_signed_off_notify_template', $mcapi_signed_off_notify_template);
$mcapi_sign_notify_template = [
    'subject' =>  t('Your signature is required'),
    'body' => t('Your signature is required on @token', ['@token' => '[transaction:url]'))
);
variable_set('mcapi_sign_notify_template', $mcapi_sign_notify_template);
*/

/*
 * utility
 * only works with the default database schema
 * @todo make this into a drush command
 */
function signature_integrity_check($modify = FALSE) {
  //set all pending transactions to completed
  db_update('mcapi_transaction')
    ->fields(['state' => 1])
    ->condition('state', TRANSACTION_STATE_PENDING)->execute();
  //any transactions with pending signatures should be set back to pending state
  $pending_serials = db_select('mcapi_signatures', 's')
    ->fields('s', ['serial'])
    ->condition('pending', 1)
    ->execute()->fetchCol();
  if (empty($pending_serials)) return;
  db_update('mcapi_transaction')
    ->fields(['state' => TRANSACTION_STATE_PENDING])
    ->condition('serial', $pending_serials)
    ->execute();
}
