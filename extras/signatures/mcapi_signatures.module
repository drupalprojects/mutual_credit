<?php

use \Drupal\mcapi\Entity\Transaction;

define ('TRANSACTION_STATE_PENDING', 'pending');

function mcapi_signatures_help($route_name, $route_match) {
  switch ($route_name) {
    case 'mcapi.admin.signatures':
      return implode(' ', [
        t('Each transaction type determines the initial workflow state of the transaction.'),
        t('Any types here with at least one checkbox will override that state and put the transaction into pending state'),
        t("When all of the specified relatives have signed the transaction moves automatically into 'finished' state.")
      ]);
  }
}

/**
 * implements hook_ENTITY_TYPE_load().
 * alter the start_state of transaction types according to this module's settings
 */
function mcapi_signatures_mcapi_type_load($entities) {
  foreach($entities as $type_id => $entity) {
    $signatory_relatives = $entity
      ->getThirdPartySetting('mcapi_signatures', 'signatures');
    if(!empty($signatory_relatives)) {
      $entity->start_state = 'pending';
    }
  }
}

/**
 * implements hook_ENTITY_TYPE_presave().
 * add the signatures to a new transaction object and sign for the current user
 */
function mcapi_signatures_mcapi_transaction_presave($transaction) {
  //the start state has already been set in transaction::validate
  if ($transaction->state->target_id == 'pending' && $transaction->isNew()) {
    module_load_include('inc', 'mcapi_signatures');
    _mcapi_add_signatures($transaction);
  }
}

/**
 * implements hook_ENTITY_TYPE_load
 * put the signatories into the transaction entity
 */
function mcapi_signatures_mcapi_transaction_load($entities) {
  $serials = [];
  foreach ($entities as $xid => $e) {
    if ($e->parent->value == 0) {
      $serials[$e->serial->value] = $xid;
    }
  }
  //we load these regardless of settings, just in case settings have changed
  //leaving some transactions invisibly pending.
  //no matter everything will be cached
  $signatures = db_select('mcapi_signatures', 's')
    ->fields('s', ['serial', 'uid', 'signed'])
    ->condition('serial', array_keys($serials))
    ->execute()->fetchAll();
  foreach ($signatures as $sig) {
    $entities[$sig->serial]->signatures[$sig->uid] = $sig->signed;
    drupal_st_message('adding signature to loaded transaction '.$sig->serial);
  }
}

/**
 * implement mcapi hook_ENTITY_delete
 * this doesn't happen with the undo transition, which merely changes the state.
 * delete the signature data when a transaction is deleted
 */
function mcapi_signatures_mcapi_transaction_delete($transaction) {
  db_delete('mcapi_signatures')
    ->condition('serial', $transaction->serial->value)
    ->execute();
}

/**
 * implements hook_ENTITY_insert().
 * writes the signatures after the transaction is written
 */
function mcapi_signatures_mcapi_transaction_insert($transaction) {
  if (!isset($transaction->signatures)) return;
  if (empty($transaction->parent)) return;
  $uid = \Drupal::currentUser()->id();
  $q = db_insert('mcapi_signatures')
    ->fields(['serial', 'uid', 'signed']);

  foreach ($transaction->signatures as $uid => $signed_unixtime) {
    $q->values([$transaction->serial->value, $uid, $signed_unixtime]);
  }
  $q->execute();
}

/**
 * implements hook_ENTITY_update().
 * rewrites the signatures after the transaction is updated
 */
function mcapi_signatures_mcapi_transaction_update($transaction) {
  if (!isset($transaction->signatures)) return;
  if (empty($transaction->parent)) return;
  debug($transaction->signatures);
  foreach ($transaction->signatures as $uid => $signed) {
    $q = db_merge('mcapi_signatures')
      ->keys([
        'serial' => $transaction->serial->value,
        'uid' => $uid
      ])->fields([
        'signed' => $signed
      ])->execute();
  }
}

/**
 * implements hook_theme().
 */
function mcapi_signatures_theme() {
  $items['mcapi_signatures'] = [
    'template' => 'mcapi_signatures',
    'variables' => [
      'transaction' => NULL,
    ],
    'file' => 'mcapi_signatures.inc'
  ];
  return $items;
}

/**
 * implements hook_ENTITY_TYPE_view().
 * show the signatures on the transaction certificate.
 */
function mcapi_signatures_mcapi_transaction_view(array &$build, $transaction, $display, $view_mode, $langcode) {
  if ($view_mode == 'certificate' && isset($transaction->signatures) && in_array('mcapi_signatures', $display->getComponents())) {
    $build['mcapi_signatures'] = [
      '#theme' => 'mcapi_signatures',
      '#transaction' => $build['#mcapi_transaction'],
      '#attached' => [
        'css' => [drupal_get_path('module', 'mcapi_signatures') .'/templates/signatures.css']
      ]
    ];
    $build['watermark'] = t('Pending');
  }
}

/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_signatures_entity_extra_field_info() {
  return [
    'user' => [
      'user' => [
        'display' => [
          'mcapi_signatures' => [
            'label' => t('Pending transactions'),
            'description' => t('Transactions yet to be signed'),
            'weight' => 0,
          ],
        ]
      ]
    ],
    'mcapi_transaction' => [
      'mcapi_transaction' => [
        'display' => [
          'mcapi_signatures' => [
            'label' => t('Signatures'),
            'description' => t('List of signatures needed and obtained'),
            'weight' => 5,
          ]
        ]
      ]
    ]
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 * add the extraField
 */
function mcapi_signatures_user_view(array &$build, \Drupal\user\UserInterface $account, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($display->getComponent('mcapi_signatures')) {
    //@todo check if the extra field is visible
    module_load_include('inc', 'mcapi_signatures');
    $serials = list_pending($build['#user']);
    foreach (Transaction::loadBySerials($serials) as $transaction) {
      $build['mcapi_signatures'][] = entity_view($transaction, 'sentence');
    }
  }
}
