<?php

/**
 * Introduces a new transaction state, 'pending', and
 * modifies existing default transaction forms to create pending transactions
 * Pending transactions require at least one signature
 * Required signatures are stored in a db table with the date of signing
 * Its possible both to sign a transaction 'off' thus 'finishing' it
 * There is also a 'cancel' transition for pending transactions, permissions defined in the currency.
 */

define ('TRANSACTION_STATE_PENDING', 'pending');

use \Drupal\mcapi\Entity\TransactionInterface;

/**
 * implements hook_ENTITY_TYPE_load().
 * alter the start_state of transaction types according to this module's settings
 */
function mcapi_signatures_mcapi_type_load($entities) {
  foreach($entities as $transaction_type_id => $entity) {
    if ($override = _mcapi_signature_overrides($transaction_type_id)) {
      $entity->start_state = 'pending';
    }
  }
}

/**
 * implements hook_ENTITY_TYPE_presave
 * add the signatures to a new transaction
 */
function mcapi_signatures_mcapi_transaction_presave($transaction) {
  //the start state has already been set in transaction::validate
  if (!$transaction->isNew()) return;
  if ($transaction->state->target_id != 'pending') return;
  $override = _mcapi_signature_overrides($transaction->type->value);//should always return an array for pending transactions
  if (!$override) throw new \Exception('Pending state integrity problem');
  if ($override['both']) {
    $transaction->signatures[$transaction->payer->entity->user_id()] = 0;
    $transaction->signatures[$transaction->payee->entity->user_id()] = 0;
  }
  elseif($override['exman']) {
    //this will be max 2 $exchanges, for intertrades
    foreach ($transaction->exchanges() as $exchange) {
      $transaction->signatures[$exchange->getOwnerId()] = 0;
    }
  }
}

/**
 * implements hook_ENTITY_TYPE_load
 * put the signatories into the transaction entity
 */
function mcapi_signatures_mcapi_transaction_load($entities) {
  //as we put the signatures into the transaction objects, we check that each transaction is pending
  foreach ($entities as $key => $transaction) {
    if ($override = _mcapi_signature_overrides($transaction->type->value)) {
      $transaction->signatures = db_select('mcapi_signatures', 's')
        ->fields('s', array('uid', 'signed'))
        ->condition('serial', $transaction->serial->value)
        ->execute()->fetchAllKeyed(0);
    }
  }
}

/**
 * implement mcapi hook_ENTITY_delete
 * this doesn't happen with the undo transition, which merely changes the state.
 * delete the signature data when a transaction is deleted
 */
function mcapi_signatures_mcapi_transaction_delete($transaction) {
  if (\Drupal::config('mcapi.misc')->get('indelible')) return;
	db_delete('mcapi_signatures')
	->condition('serial', $transaction->serial->value)
	->execute();
}

/**
 * implements hook_ENTITY_insert
 * writes the signatures after the transaction is written
 */
function mcapi_signatures_mcapi_transaction_insert($transaction) {
  if (!isset($transaction->signatures)) return;

  $uid = \Drupal::currentUser()->id();
  if (TRUE) {//TODO is it worth making a config option for the current user to sign automatically?
    module_load_include('inc', 'mcapi_signatures');
    transaction_sign($transaction, \Drupal::currentUser());
  }

  $q = db_insert('mcapi_signatures')
    ->fields(array('serial', 'uid', 'signed'));
  foreach ($transaction->signatures as $uid => $signed_unixtime) {
    $q->values(array($transaction->serial->value, $uid, $signed_unixtime));
  }
  $q->execute();
}

/**
 * implements hook_ENTITY_update
 * rewrites the signatures after the transaction is updated
 */
function mcapi_signatures_mcapi_transaction_update($transaction) {
  if (!isset($transaction->signatures)) return;
  foreach ($transaction->signatures as $uid => $signed) {
    $q = db_merge('mcapi_signatures')
      ->keys(array(
        'serial' => $transaction->serial->value,
        'uid' => $uid
      ))->fields(array(
        'signed' => $signed
      ))->execute();
  }
}

/**
 * implements hook_theme
 */
function mcapi_signatures_theme() {
  $items['mcapi_signatures'] = array(
    'template' => 'mcapi_signatures',
    'variables' => array(
      'transaction' => NULL,
    ),
    'file' => 'mcapi_signatures.inc'
  );
  return $items;
}

/**
 * implements hook_ENTITY_TYPE_view_alter
 * show the signatures on the transaction certificate.
 * @todo shouldn't this be in hook_transaction_view and extra_fields?
 */
function mcapi_signatures_mcapi_transaction_view(array &$build, TransactionInterface $transaction, $display, $view_mode, $langcode) {
  if ($view_mode == 'certificate' && isset($transaction->signatures) && in_array('mcapi_signatures', $display->getComponents())) {
    $build['mcapi_signatures'] = array(
      '#theme' => 'mcapi_signatures',
      '#transaction' => $build['#mcapi_transaction'],
      '#attached' => array('css' => array(drupal_get_path('module', 'mcapi_signatures') .'/templates/signatures.css'))
    );
  }
}

/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_signatures_entity_extra_field_info() {
  return array(
    'user' => array(
      'user' => array(
        'display' => array(
          'mcapi_signatures' => array(
            'label' => t('Pending transactions'),
            'description' => t('Transactions yet to be signed'),
            'weight' => 0,
          ),
        )
      )
    ),
    'mcapi_transaction' => array(
    	'mcapi_transaction' => array(
    	  'display' => array(
    		  'mcapi_signatures' => array(
            'label' => t('Signatures'),
            'description' => t('List of signatures needed and obtained'),
            'weight' => 5,
    	    )
    	  )
      )
    )
  );
}

/**
 * implement hook_user_view().
 */
function mcapi_signatures_user_view(&$build, $mode, $language) {
  module_load_include('inc', 'mcapi_signatures');
  $serials = list_pending($build['#user']);
  foreach (mcapi_transaction_load_by_serial($serials) as $transaction) {
    $build['mcapi_signatures'][] = entity_view($transaction, 'sentence');
  }
}

/**
 * helper to retrive the signature override settings for a transaction type
 * @param string $transaction_type
 * @return array|NULL
 *   array contains exman and partners
 */
function _mcapi_signature_overrides($transaction_type) {
  $override = &drupal_static(__FUNCTION__);
  if (!$override) {
    $override = array_filter(\Drupal::config('mcapi.signatures')->getRawData());
  }
  return @$override[$transaction_type];
}

