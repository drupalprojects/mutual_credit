<?php

use \Drupal\mcapi\Entity\Transaction;

define ('TRANSACTION_STATE_PENDING', 'pending');


/**
 * implements hook_ENTITY_TYPE_load().
 * alter the start_state of transaction types according to this module's settings
 */
function mcapi_signatures_mcapi_type_load($entities) {
  foreach($entities as $transaction_type_id => $entity) {
    $override = _mcapi_signature_overrides($transaction_type_id);
    if ($override['both']) {
      $entity->start_state = 'pending';
    }
  }
}

/**
 * implements hook_ENTITY_TYPE_presave().
 * add the signatures to a new transaction object and sign for the current user
 */
function mcapi_signatures_mcapi_transaction_presave($transaction) {
  //the start state has already been set in transaction::validate
  if ($transaction->state->target_id == 'pending') {
    if ($transaction->isNew()) {
      $override = _mcapi_signature_overrides($transaction->type->target_id);//should always return an array for pending transactions
      if ($override['both']) {
        $transaction->signatures[$transaction->payer->entity->user_id()] = 0;
        $transaction->signatures[$transaction->payee->entity->user_id()] = 0;
      }
      //the exchange manager should also sign
      if($override['exman']) {
        //TODO move or remove this
        //at this point the exchange hasn't been determined
        //foreach ($transaction->flatten() as $t) {
          //$exchange = reset($t->exchange->referencedEntities());
          //$transaction->signatures[$exchange->getOwnerId()] = 0;
        //}
      }
      //this autosign sets the transaction state so must happen before the transaction entity is written
      module_load_include('inc', 'mcapi_signatures');
      transaction_sign($transaction, \Drupal::currentUser());
    }
  }
}

/**
 * implements hook_ENTITY_TYPE_load
 * put the signatories into the transaction entity
 */
function mcapi_signatures_mcapi_transaction_load($entities) {
  //as we put the signatures into the transaction objects, we check that each transaction is pending
  foreach ($entities as $key => $transaction) {
    if ($override = _mcapi_signature_overrides($transaction->type->target_id)) {
      $transaction->signatures = db_select('mcapi_signatures', 's')
        ->fields('s', array('uid', 'signed'))
        ->condition('serial', $transaction->serial->value)
        ->execute()->fetchAllKeyed(0);
    }
  }
}

/**
 * implement mcapi hook_ENTITY_delete
 * this doesn't happen with the undo transition, which merely changes the state.
 * delete the signature data when a transaction is deleted
 */
function mcapi_signatures_mcapi_transaction_delete($transaction) {
  db_delete('mcapi_signatures')
    ->condition('serial', $transaction->serial->value)
    ->execute();
}

/**
 * implements hook_ENTITY_insert().
 * writes the signatures after the transaction is written
 */
function mcapi_signatures_mcapi_transaction_insert($transaction) {
  if (!isset($transaction->signatures)) return;
  if (empty($transaction->parent)) return;
  $uid = \Drupal::currentUser()->id();
  $q = db_insert('mcapi_signatures')
    ->fields(array('serial', 'uid', 'signed'));

  foreach ($transaction->signatures as $uid => $signed_unixtime) {
    $q->values(array($transaction->serial->value, $uid, $signed_unixtime));
  }
  $q->execute();
}

/**
 * implements hook_ENTITY_update().
 * rewrites the signatures after the transaction is updated
 */
function mcapi_signatures_mcapi_transaction_update($transaction) {
  if (!isset($transaction->signatures)) return;
  if (empty($transaction->parent)) return;
  debug($transaction->signatures);
  foreach ($transaction->signatures as $uid => $signed) {
    $q = db_merge('mcapi_signatures')
      ->keys(array(
        'serial' => $transaction->serial->value,
        'uid' => $uid
      ))->fields(array(
        'signed' => $signed
      ))->execute();
  }
}

/**
 * implements hook_theme().
 */
function mcapi_signatures_theme() {
  $items['mcapi_signatures'] = array(
    'template' => 'mcapi_signatures',
    'variables' => array(
      'transaction' => NULL,
    ),
    'file' => 'mcapi_signatures.inc'
  );
  return $items;
}

/**
 * implements hook_ENTITY_TYPE_view().
 * show the signatures on the transaction certificate.
 */
function mcapi_signatures_mcapi_transaction_view(array &$build, $transaction, $display, $view_mode, $langcode) {
  if ($view_mode == 'certificate' && isset($transaction->signatures) && in_array('mcapi_signatures', $display->getComponents())) {
    $build['mcapi_signatures'] = array(
      '#theme' => 'mcapi_signatures',
      '#transaction' => $build['#mcapi_transaction'],
      '#attached' => array('css' => array(drupal_get_path('module', 'mcapi_signatures') .'/templates/signatures.css'))
    );
    debug('did the attached css work without making a library?');
  }
}

/**
 * implements hook_entity_extra_field_info().
 */
function mcapi_signatures_entity_extra_field_info() {
  return array(
    'user' => array(
      'user' => array(
        'display' => array(
          'mcapi_signatures' => array(
            'label' => t('Pending transactions'),
            'description' => t('Transactions yet to be signed'),
            'weight' => 0,
          ),
        )
      )
    ),
    'mcapi_transaction' => array(
      'mcapi_transaction' => array(
        'display' => array(
          'mcapi_signatures' => array(
            'label' => t('Signatures'),
            'description' => t('List of signatures needed and obtained'),
            'weight' => 5,
          )
        )
      )
    )
  );
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 * add the extraField
 */
function mcapi_signatures_user_view(array &$build, \Drupal\user\UserInterface $account, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($display->getComponent('mcapi_signatures')) {
    //TODO check if the extra field is visible
    module_load_include('inc', 'mcapi_signatures');
    $serials = list_pending($build['#user']);
    foreach (Transaction::loadBySerials($serials) as $transaction) {
      $build['mcapi_signatures'][] = entity_view($transaction, 'sentence');
    }
  }
}

/**
 * Retrieve the signature override settings for a transaction type
 *
 * @param string $transaction_type
 *
 * @return array|NULL
 *   array contains exman and partners
 *
 * @todo rethink or remove exman coz it belongs in mcapi_exchanges.module
 */
function _mcapi_signature_overrides($transaction_type) {
  if (empty($transaction_type))die('_mcapi_signature_overrides');
  $override = &drupal_static(__FUNCTION__);
  if (!$override) {
    $override = array_filter(\Drupal::config('mcapi.signatures')->getRawData());
  }

  return array_key_exists($transaction_type, $override) ?
    $override[$transaction_type] :
    array('both' => FALSE, 'exman' => TRUE);
}

