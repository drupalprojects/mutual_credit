<?php
// $Id:

define ('TRANSACTION_STATE_PENDING', -1);

function mcapi_signatures_help($path) {
  if ($path != 'admin/accounting/signatures') return;
  $help = t('Require signatures for certain transaction types before they are cleared.');
  return $help;
}

/*
 * Introduces a new transaction state, 'pending', and
 * modifies existing default transaction forms to create pending transactions
 * Pending transactions require at least one signature
 * Required signatures are stored in a db table and marked 'signed'
 * Signatures happen via menu callbacks
 * Its possible both to sign a transaction 'off' thus 'finishing' it
 * Also to sign all a user's transactions.
 * There is also a 'cancel' operation for pending transactions, permissions defined in the currency.
  */
function mcapi_signatures_menu() {
  //this item makes it possible to sign on someone elses behalf, if the link is provided.
  //That's not in the scope of this module
  $items['admin/accounting/signatures'] = array(
    'title' => 'Signatures',
    'description' => 'Require signatures before transactions enter pending state',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcapi_signatures_config'),
    'access arguments' => array('configure all transactions'),
  );
  $items['transaction/%transaction/signoff'] = array(
    'title' => 'Sign off',
    'description' => 'Sign the transaction on behalf of everyone',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcapi_signoff_confirm_form', 1),
    'access callback' => 'transaction_signoff_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['transaction/%transaction/cancel_pending'] = array(
    'title' => 'Cancel',
    'description' => 'Cancel the transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcapi_cancel_confirm_form', 1),
    'access callback' => 'transaction_cancel_pending_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['transactions/signall/%user'] = array(
    'title' => 'Sign all my transactions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcapi_signall_confirm_form', 2),
    'access callback' => 'user_has_pending',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function mcapi_signatures_hook_info() {
  return array(
    //a signature is added to a transaction
    //takes args $transaction and $signer_uid
    'transaction_sign' => array(),
    'transaction_signed_off' => array(),
  );
}

function mcapi_signatures_menu_alter(&$items) {
  //this menu item is generated from the transaction form-in-code
  //it can ONLY be seen by signatories
  $items['transaction/%transaction/sign']['access callback'] = 'transaction_sign_access';
  $items['transaction/%transaction/sign']['access arguments'] = array(1);
  $items['transaction/%transaction/sign']['type'] = MENU_LOCAL_ACTION;
  $items['admin/structure/trigger/mcapi']['weight'] = 1;
}

/*
 * Implements hook_views_api
 */
function mcapi_signatures_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_signatures').'/views',
  );
}

/*
 * Implements ctools hook_ctools_plugin_api
 * not sure if this is needed
 */
function mcapi_signatures_ctools_plugin_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mcapi_signatures'),
  );
}
/*
 * Will implement hook_entity_load or some such
 */
function mcapi_signatures_entity_load($entities, $type) {
  if ($type != 'transaction')return;
  //as we put the signatures into the transaction objects, we check that each transaction is pending
  foreach ($entities as $key => $transaction) {
    $transaction->pending_signatures = mcapi_get_signatories($transaction->serial);
  }
}

/*
 * Will implement hook_entity_delete or some such
 */
function mcapi_signatures_entity_delete($transaction, $type) {
  if ($type == 'transaction') {
    db_delete("mcapi_signatures")
    ->condition('serial', $transaction->serial)
    ->execute();
  }
}


/*
 * Implements hook_mcapi_info_states
 */
function mcapi_signatures_mcapi_info_states() {
  return array(
    //must be defined with lower case
    TRANSACTION_STATE_PENDING => array(
      'name' => t("Pending"),
      'description' => t("awaiting signatures before becoming 'finished'."),
      'default_access_callbacks' => array('transaction_access_participants')
    )
  );
}

function mcapi_signatures_config($form, $form_state) {
  module_load_include('inc', 'mcapi');
  //some types we know about will never be pending
  $types = _get_signable_transaction_types();
  $w = 0;
  $form = array('#tree' => TRUE);
  //I don't like storing these as separate variables. however it seems to be good practice elsewhere in Drupal
  foreach ($types as $type) {
    $var_name = 'mcapi_signatures_'.$type;
    $settings = @$form_state['values'][$var_name] ? $form_state['values'][$var_name] : variable_get($var_name, array());
    $form[$var_name] = array(
      '#title' => $type,
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#id' => $type,
      'participants' => array(
        '#title' => t('Both participants must sign'),
        '#description' => t("Logged in user signs automatically"),
        '#type' => 'checkbox',
        '#default_value' => isset($settings['participants']) ? $settings['participants'] : TRUE
      ),
      'countersignatories' => array(
        '#title' => t('Counter-signers'),
        '#description' => t('Choose one or more users'),
        '#type' => 'user_chooser_roles',
        '#args' => array(DRUPAL_AUTHENTICATED_RID),
        '#default_value' => isset($settings['countersignatories']) ? $settings['countersignatories'] : array(),
        '#multiple' => TRUE,
        '#me' =>TRUE
      ),
      'complete' => array(
        '#title' => t('Send notification'),
        '#description' => t("Use the email template on this page to notify all signatories"),
        '#type' => 'checkbox',
        '#default_value' => isset($settings['complete']) ? $settings['complete'] : FALSE,
        '#weight' => 5
      ),
      '#weight' => $w++
    );
  }
  $mail_def = variable_get('mcapi_sign_notify_template', array());
  $form['mcapi_sign_notify_template'] = array(
    '#title' => t('Signature notification'),
    '#description' => implode(' ', array(
      t('Compose the email sent to users when a signature is required of them.'),
      t('Use the following tokens:') .' '. implode(', ', matslats_list_tokens(array('transaction', 'user', 'site')))
    )),
    '#type' => 'fieldset',
    'subject' => array(
      '#title' => t('Subject'),
      '#type' => 'textfield',
      '#default_value' => isset($mail_def['subject']) ? $mail_def['subject'] : t('Your signature required'),
      '#required' => TRUE,
    ),
    'body' => array(
      '#title' => t('Body'),
      '#type' => 'textarea',
      '#default_value' => isset($mail_def['body']) ? $mail_def['body'] : '[transaction:uri]',
      '#required' => TRUE,
      '#weight' => 1
    ),
    '#weight' => $w++
  );
  $mail_def = variable_get('mcapi_signed_off_notify_template', array());
  $form['mcapi_signed_off_notify_template'] = array(
    '#title' => t('Completed notification'),
    '#description' => implode(' ', array(
      t('Compose the email sent to all signatories when a pending transaction completes.'),
      t('Use the following tokens:') .' '. implode(', ', matslats_list_tokens(array('transaction', 'site', 'user')))
    )),
    '#type' => 'fieldset',
    'subject' => array(
      '#title' => t('Subject'),
      '#type' => 'textfield',
      '#default_value' => isset($mail_def['subject']) ? $mail_def['subject'] : t('Transaction signed off'),
      '#required' => TRUE,
    ),
    'body' => array(
      '#title' => t('Body'),
      '#type' => 'textarea',
      '#default_value' => isset($mail_def['body']) ? $mail_def['body'] : '[transaction:uri]',
      '#required' => TRUE,
      '#weight' => 1
    ),
    '#weight' => $w++
  );
  return system_settings_form($form);
}

/*
 * write the signature for each transaction to the database.
 * $transaction->pending signatures is an array
 * array(
 *   $uid => $signature_needed BOOLEAN
 * )
 * Every value should be 1 when the transaction is created
 */
function mcapi_signatures_save($transaction) {
  $old_state = $transaction->state;
  //need to check property 'pending_signatures' because it may not have been declared
  if (!empty($transaction->pending_signatures)) {
    //save all the signatures whether or not they have been signed
    foreach ($transaction->pending_signatures as $uid => $pending) {
      $values[] = "( $transaction->serial, $uid, ". intval($pending)." )";
    }
    db_query("REPLACE INTO {mcapi_signatures} (serial, uid, pending) VALUES ". implode(', ', $values));
  }
  $new_state = count(array_filter($transaction->pending_signatures)) ? TRANSACTION_STATE_PENDING : TRANSACTION_STATE_FINISHED;
  if ($new_state != $old_state) {
    //change the state of the loaded object, then change the state in the db
    $transaction->state = $new_state;
    //because the transaction is already written, and to improve integrity, we reset the state here
    transactions_state(
      array($transaction->serial),
      $new_state
    );
  }
}

/*
 * resaves signatories from the transaction object and changes state if all are signed
 */
function mcapi_sign($serials, $uids) {
  if (is_numeric($uids)) {
    $uids = array($uids);
  }
  if (count($uids) > 1 && count($serials) > 1) throw new Exception('Pending module error');
  //remove signatures one at a time
  foreach ($serials as $serial) {
    //only the first transaction in the cluster can have signatures
    $transaction = transaction_load($serial);
    foreach ($uids as $uid) {
      if ($transaction->pending_signatures[$uid] == 1) {
        $transaction->pending_signatures[$uid] = 0;
        //this might change the state of the transaction
        mcapi_signatures_save($transaction);
      }
      else {
        drupal_set_message(t('Transaction #@serial is already signed by @name',
          array('@serial' => $transaction->serial, '@name' => user_load($uid)->name)
        ));
      }
    }
    if ($transaction->state == TRANSACTION_STATE_PENDING) {
      drupal_set_message(t("@num signatures remaining on transaction #@serial", 
        array('@num' => count(array_filter($transaction->pending_signatures)), '@serial' => $serial)
      ));
    }
    else {
      drupal_set_message(t('Transaction @serial is signed off', array('@serial' => $transaction->serial)));
      module_invoke_all('transaction_signed_off', $transaction);
    }
  }
}


//returns a list of the user objects who are yet to sign
//will take EITHER a serial OR a uid, returns a list of the other
function mcapi_get_signatories($serial = NULL, $uid = NULL) {
  if ($serial && $uid) {
    drupal_set_message('Bad arguments to mcapi_get_signatories', 'error');
    return;
  }
  $signatures = array();
  $query = db_select('mcapi_signatures', 's');
  if ($serial) {
    $result = $query->fields('s', array('uid', 'pending'))->condition('serial', $serial)->execute()->fetchAllKeyed(0);
  }
  else {
    $result = $query->fields('s', array('serial'))->condition('pending', 1)->condition('uid', $uid)->execute()->fetchCol();
  }
 
  return $result;
}

function user_has_pending($account) {
  $whether = db_query("SELECT count(serial) FROM {mcapi_signatures} where uid = :uid AND pending = 1", array(':uid' => $account->uid))
    ->fetchfield();
  if (!$whether) return;
  return $account->uid == $GLOBALS['user']->uid || user_access('manage all transactions');

}
//menu access callback
//returns true if the user is a listed signatory and hasn't signed
//this function name is constructed - do not change!
function transaction_sign_access($transaction) {
  //check the transaction is pending and the given account needs to sign it.
  if ($transaction->state != TRANSACTION_STATE_PENDING) return FALSE;
  //check the user is listed as a signatory
  if (!empty($transaction->pending_signatures[$GLOBALS['user']->uid])) return TRUE;
}

//menu access callback
//can the current user 'sign off' any (pending) transaction
function transaction_signoff_access($transaction) {
  if ($transaction->state == TRANSACTION_STATE_PENDING) {
    if (user_access('manage all transactions')) return TRUE;
  }
}
//menu access callback
function transaction_cancel_pending_access($transaction) {
  if ($transaction->state != TRANSACTION_STATE_PENDING) return;
  module_load_include('inc', 'mcapi');
  currencies_load();//menu access functions run before hook_init - see mcapi_init
  $currencies = &drupal_static('currencies');
  $callbacks = &$currencies[$transaction->worth[LANGUAGE_NONE][0]['currcode']]->transaction_access['cancel_pending'];
  if (empty($callbacks)) return FALSE;
  foreach (array_filter($callbacks) as $callback) {
    if ($callback($transaction)) return TRUE;
  }
}


/*
 * implements hook_form_FORMID_alter
 * bumps the signature form up to stage 2, where the fields are rendered as text
 */
function mcapi_signatures_form_mcapi_forms_form_alter(&$form, &$form_state) {

  if ($form_state['build_info']['args'][1]->name != 'add_my_signature') return;
  unset($form['experience']['title'], $form['experience']['template']);
  //replace the transaction_form_submit callback because we only want to change the state, not save the 'values and everything
  $key = array_search('transaction_form_submit', $form['#submit']);
  $form['#submit'][$key] = 'add_my_signature_submit';
  unset($form['buttons']['delete']);
}
/*
 * implements hook_form_FORM_ID_alter
 * changes the status in the transaction form according to the settings for the transaction_type
 */
function mcapi_signatures_form_transaction_form_alter(&$form, $form_state) {
  if (isset($form['#step']) && $form['#step'] > 1) return;//this only applies to the forms module
  $type = isset($form['type']['#value']) ? $form['type']['#value'] : $form['type']['#default_value'];//yuk
  if (in_array($type, _get_signable_transaction_types())) {
    $config = variable_get('mcapi_signatures_'.$type, array());
    if (@$config['participants'] || count(@$config['countersignatories'])) {
      $form['state'] = array(
        '#type' => 'value',
        '#value' => TRANSACTION_STATE_PENDING
      );
    }
  }
}


/*
 * Integration with mcapi_forms module
 *
 * Implements hook_form_FORM_ID_alter
 * modifies the saved form 'add_my_signature' to hide exceptional fields
 */
function mcapi_signatures_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  //check that this is actually a transaction form
  if ($form_state['plugin']['schema'] == 'mcapi_forms') {
    //on the mcapi form edit page, add a link to the signatures config page
    $form['signatures'] = array(
      '#markup' => l(t('Set up signatories (new window)'), 'admin/accounting/signatures', array('fragment' => $form_state['item']->name, 'attributes' => array('target' => '_blank'))),
      '#weight' => 101
    );
    if ($form_state['item']->name != 'add_my_signature') return;
    $form['architecture']['path']['#disabled'] = TRUE;
    $form['architecture']['use_block']['#type'] = 'hidden';
    $form['architecture']['menu_link']['#type'] = 'hidden';
    $form['architecture']['menu_link']['#value'] = 0;
    $form['perspective']['#type'] = 'hidden';
    $form['perspective']['#value'] = 3;
    $form['experience']['title']['#type'] = 'hidden';
    $form['experience']['template']['#type'] = 'hidden';
    $instances = field_info_instances('transaction', 'transaction');
      mcapi_disable_recursive($form['payer']);
      mcapi_disable_recursive($form['payee']);
    foreach ($instances as $instance) {
      mcapi_disable_recursive($form[$instance['field_name']]);
    }
    unset($form['step-1']);
  }
  //for the currencies form,
  //Add the a new operation to the currency access
  elseif ($form_state['plugin']['schema'] == 'mcapi_currencies') {
    $currency = isset($form_state['values']) ? (object)$form_state['values'] : $form_state['item']->data;
    $form['transaction_access']['cancel_pending'] = array(
      '#title' => t('Cancel pending transactions'),
      '#type' => 'checkboxes',
      '#options' => $form['transaction_access'][1]['#options'],
      '#default_value' => isset($currency->transaction_access['cancel_pending']) ? $currency->transaction_access['cancel_pending'] : array(),
      '#weight' => 5,
    );
  }
}


/*
 * form submit callback
 */
function add_my_signature_submit($form, &$form_state) {
  $serial = $form_state['build_info']['args'][TRANSACTION_BUILD_INFO_ARG]->serial;
  mcapi_sign(array($serial), array($GLOBALS['user']->uid));
}


/*
 * This menu callback is handled differently to the standard signing form
 */
function mcapi_signoff_confirm_form($form, $form_state, $transaction) {
  mcapi_hide_tabs();
  $form = array();
  $form_state['redirect'] = 'transaction/'. $transaction->serial;
  $form['serial'] = array(
    '#type' => 'hidden',
    '#value' => $transaction->serial
  );
  $signatories = array_filter(mcapi_get_signatories($transaction->serial));
  $users = user_load_multiple(array_keys($signatories));
  $form['#prefix'] = t('Are you sure you want to sign this transaction on behalf of @users?',
    array('@users' => mcapi_format_usernames($users))
  );
  return confirm_form(
    $form,
    t('Are you sure?'),
    'user',
    '',
    t('Sign'), t('Cancel'),
    'sign'
  );
}

function mcapi_signoff_confirm_form_validate($form, $form_state) {
  if ($reason = pending_not_signable($form_state['values']['serial'])) {
    form_set_error('', $reason);
  }
}


function mcapi_signoff_confirm_form_submit($form, &$form_state) {
  $serial = &$form_state['values']['serial'];
  if ($reason = pending_not_signable($serial)) {
    drupal_set_message($reason, 'error');
    return;
  }
  $signatories = array_filter(mcapi_get_signatories($serial));
  mcapi_sign(array($serial), array_keys($signatories));
  $form_state['redirect'] = 'transaction/'. $serial;
}

function mcapi_cancel_confirm_form($form, $form_state, $transaction) {
  $form = array();
  $form_state['redirect'] = 'transaction/'. $transaction->serial;
  $form['serial'] = array(
    '#type' => 'hidden',
    '#value' => $transaction->serial
  );
  $signatories = array_filter(mcapi_get_signatories($transaction->serial));
  $users = user_load_multiple(array_keys($signatories));
  $form['#prefix'] = t('Are you sure you want to cancel this pending transaction',
    array('@users' => mcapi_format_usernames($users))
  );
  return confirm_form(
    $form,
    t('Are you sure?'),
    'user',
    '',
    t('Cancel'), t('Not so sure'),
    'sign'
  );
}

function mcapi_cancel_confirm_form_submit($form, &$form_state) {
  $serial = &$form_state['values']['serial'];
  transactions_state(array($serial), TRANSACTION_STATE_ERASED);
  $form_state['redirect'] = 'user';
}

//signs the transaction and returns a message if the transaction is not signable
function pending_not_signable($serial) {
  $signatories = array_filter(mcapi_get_signatories($serial));
  try {
    if (transaction_load($serial)->state != TRANSACTION_STATE_PENDING) {
      throw new Exception(t('Transaction is not in pending state'));
    }
    if (empty($signatories)) {
      throw new Exception(t('Pending transaction has no signatures waiting'));
    }
  }
  catch(Exception $e) {
    return $e->getMessage();
  }
}

function mcapi_signall_confirm_form($form, $form_state, $account) {
  $form = array();
  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $account->uid
  );
  $form['#prefix'] = t('Are you sure you want to sign all your transactions?');
  return confirm_form(
    $form,
    t('Are you sure?'),
    'user',
    '',
    t('Sign'), t('Cancel'),
    'sign'
  );
}

function mcapi_signall_confirm_form_submit($form, &$form_state) {
  $uid = &$form_state['values']['uid'];
  //get all the transactions
  $serials = array_keys(mcapi_get_signatories(NULL, $uid));
  $transactions = transactions_load(array(), array('serial' => $serials));
  //sign them one by one
  foreach ($transactions as $transaction) {
    $serials[] = $transaction->serial;
  }
  mcapi_sign($serials, array($uid));
  $form_state['redirect'] = 'user';
}


/*
 * implements hook_block_info_alter
 * adjusts the blocks declared by the default view
 */
function mcapi_signatures_block_info_alter(&$blocks) {
  //because this view requires an argument which probably comes from the url
  if (isset($blocks['views']['signatures-user_pending'])) {
    $blocks['views']['signatures-user_pending']['visibility'] = 1;
    $blocks['views']['signatures-user_pending']['pages'] = 'user*';
  }
}

function mcapi_signatures_cron() {
  //call me paranoid, but I'd like to just check data integrity
  $serials = db_query("SELECT t.serial FROM {mcapi_transactions} t LEFT JOIN {mcapi_signatures} s ON t.serial = s.serial WHERE s.pending = 1 AND t.state = :state", array(':state' => TRANSACTION_STATE_FINISHED))->fetchCol();
  if (count($serials)){
    watchdog('mcapi_signatures', 'Some completed transactions still have signatures pending, please report to matslats: @serials', array('@serials' => implode(', ', $serials)), WATCHDOG_ERROR);
  }
}


function mcapi_disable_recursive(&$array) {
  $array['#disabled'] = TRUE;
  foreach(element_children($array) as $fieldname) {
    mcapi_disable_recursive($array[$fieldname]);
  }
}


/*
 * implements hook_trigger_info
 */
function mcapi_signatures_trigger_info() {
  return array(
    'mcapi' => array(
      'transaction_sign' => array(
        'label' => t('A signature is added to a transaction'),
      ),
    )
  );
}

/*
 * implements mcapi hook_transactions_state
 * gets the config for the transaction according to type.
 * For new transactions, defines the signatories.
 * Then sends mail as needed
 */
function mcapi_signatures_transactions_state($old_clusters, $new_state) {
  //check the module settings for the transaction type
  foreach ($old_clusters as $transaction) {
    $config = variable_get('mcapi_signatures_'.$transaction->type, array());
    $params = array('transaction' => $transaction);
    $uid = &$GLOBALS['user']->uid;
    if ($new_state == TRANSACTION_STATE_PENDING) {
      if (@$config['participants']) {
        $transaction->pending_signatures[$transaction->payer] = $uid == $transaction->payer ? 0 : 1;
        $transaction->pending_signatures[$transaction->payee] = $uid == $transaction->payee ? 0 : 1;
      }
      foreach(@$config['countersignatories'] as $counter_uid) {
        $transaction->pending_signatures[$counter_uid] = $uid == $counter_uid ? 0 : 1;
      }
      mcapi_signatures_save($transaction);
      $key = 'participants';
      $params['conf'] = variable_get('mcapi_sign_notify_template', array());
    }
    //moving from pending to finished
    elseif($new_state == TRANSACTION_STATE_FINISHED && current($old_clusters)->state == TRANSACTION_STATE_PENDING) {
      $config = variable_get('mcapi_signatures_'.$transaction->type, array());
      $key = 'complete';
      $params['conf'] = variable_get('mcapi_signed_off_notify_template', array());
    }
    //send the mail, using the module settings for this transaction
    if (isset($params['conf']) && $config[$key]) {
      foreach(user_load_multiple(array_keys(array_filter($transaction->pending_signatures))) as $account) {
        $params['user'] = $account;
        drupal_mail('mcapi_signatures', $key, $account->mail, user_preferred_language($account), $params);
      }
    }
  }
}

function mcapi_signatures_mail($key, &$message, $params) {
  $options = array('language' => $message['language'], 'sanitize' => FALSE);
  $message['subject'] = token_replace($params['conf']['subject'], $params, $options);
  $message['body'][] = token_replace($params['conf']['body'], $params, $options);
}

/*
 * implements theming hook_process_transaction
 */
function mcapi_signatures_process_transaction(&$variables) {
  $transaction = &$variables['transaction'];
  if (!isset($transaction->pending_signatures) || empty($transaction->pending_signatures)) return;
  $table = array();
  foreach ($transaction->pending_signatures as $uid => $pending) {
    $status = 'signed';
    if ($pending) {
      if ($uid == $GLOBALS['user']->uid && transaction_sign_access($transaction)) {
        $status = 'transaction/'.$transaction->serial.'/sign';
      }
      else {
        $status = 'pending';
      }
    }
    $signatories[$uid] = $status;
  }
  $signoff = array();
  if (transaction_signoff_access($transaction)) {
    $signoff = array(
      '#theme' => 'link',
      '#text' => t('Sign off'),
      '#path' => 'transaction/'.$transaction->serial.'/signoff',
      '#options' => array(
        'attributes' => array('title' => t('Sign the transaction on behalf of everyone')),
        'html' => TRUE,//required
       ),
    );
  }
  $variables['pending_signatures'] = array(
    '#theme' => 'pending_signatures',
    '#pending_signatures' => $transaction->pending_signatures,
    '#signatories' => $signatories,
    '#signoff_link' => $signoff,
    '#finished' => $transaction->state == TRANSACTION_STATE_FINISHED ? TRUE : FALSE
  );
}

/*
 * implements hook_theme
 */
function mcapi_signatures_theme() {
  $items = array(
    'pending_signatures' => array(
      'template' => 'pending_signatures',
      'variables' => array(
        'pending_signatures' => array(),//raw data pulled from the transaction
        'signatories' => array(),
        'signoff_link' => array(),
        'finished' => FALSE
      )
    )
  );
  return $items;
}

/*
 * default preprocessor for theme callback 'pending_signatures'
 */
function template_preprocess_pending_signatures(&$variables) {
  $signatories = &$variables['signatories'];
  foreach ($signatories as $uid => $status) {
    $link = '';
    $username  = format_username(user_load($uid));
    if (strlen($status) > 7 ) {//then its a url
      $link = l( t('Sign transaction'), $status);
      $status = 'sign-link';
      $title = '';
    }
    else {
      $title = $status == 'pending' ? t('Awaiting signature') : t('Signed');
    }
    $rows[$uid] = array(
      $username, array(
        'class' => $status,
        'data' => $link,
        'title' => $title
      )
    );
  }
  $variables['table'] = array(
    '#theme' => 'table',
    '#attributes' => array('style' => 'width:15em'),
    '#rows' => $rows
  );
}

function mcapi_signatures_mcapicurrencies_default_alter(&$currencies) {
  foreach ($currencies as $name => $currency) {
    $currencies[$name]->data->transaction_access[TRANSACTION_STATE_PENDING] = drupal_map_assoc(array('transaction_access_accountant', 'transaction_access_participants'));
  }
}
/*
 * implements hook_transaction_view_alter
 * inserts the css for the pending graphic
 */
function mcapi_signatures_transaction_view_alter($renderable, $type) {
  foreach ($renderable as $array) {
    if ($array['#view_mode'] == 'certificate' && $array['#transaction']->state == TRANSACTION_STATE_PENDING) {
      $imagefile = url(drupal_get_path('module', 'mcapi_signatures') . '/pending.png');
      $declaration = "background-image:url(\"$imagefile\"); background-repeat: no-repeat; height:163px;";
      drupal_add_css('.transaction.state--1{'.$declaration.'}', array('type' => 'inline'));
      return;
    }
  }
}

function _get_signable_transaction_types() {
  $types = array_diff(mcapi_get_types(), array('child', 'undo', 'undone', 'remote payment', 'remote receipt', 'mass'));
  sort($types);
  return $types;
}