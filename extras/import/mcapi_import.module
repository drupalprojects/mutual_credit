<?php

define('CENTRAL_ACCOUNT_UID', 1);

function mcapi_import_init() {

}

function mcapi_import_help($path) {
  $help = array();
  switch ($path) {
    case 'admin/help#mcapi_import':
      $help[] = t('Prepare a csv file and create transactions from the currency reservoir account');
      $help[] = t("The 'migrate' module is too complex for this, so this bespoke solution is provided.");
      break;
    case 'admin/accounting/import/transactions' :
      $currencies = &drupal_static('currencies');
      $help[] = t("Import a whole transaction history using the user 'uid' property.");
      if (module_exists('mcapi_limits')) {
        $help[] = t("It is advised to disable the currency's balance limits before importing.");
      }
      break;
    case 'admin/accounting/import/balances':
      $help[] = t("This page allows you to import users' balances and gross incomes for users already on the system.");
      $help[] = t("To import users, see the User Import Framework (UIF) module.");
  }
  return implode(' ', $help);
}

/**
 * Implements hook_menu.
 */
function mcapi_import_menu() {
  if(user_access('manage all currencies')) {
    drupal_set_message('The Community Accounting import module is installed, and should be disabled and uninstalled when importing is complete.', 'warning', FALSE);
  }

  $items['admin/accounting/import'] = array (
    'title' => 'Import Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_settings_form'),
    'access arguments' => array('configure all currencies'),
    'weight' => 0
  );
  $items['admin/accounting/import/balances'] = array(
    'title' => 'Import balances',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_balances_form'),
    'access arguments' => array('configure all currencies'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 4
  );
  $items['admin/accounting/import/transactions'] = array(
    'title' => 'Import transactions',
    'description' => 'Import transactions for users already on the system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_transactions_form'),
    'access arguments' => array('configure all currencies'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 6
  );
  return $items;
}

/*
 * form called by menu
 */
function import_transactions_form($form, $form_state) {
  $columns = array('"payer"', '"payee"', '"quantity"', '"created"');
  if ($desc = variable_get('transaction_description_field', '')) {
    //we don't actually use the name of the field here
    $columns[] = '"description"';
  }
  $form['#prefix'] = implode(' ', array(
    t('Prepare a csv file, without quotes'),
    t('Payer and Payee should be user IDs or email addresses'),
    t("'created' is optional, but will be converted to unixtime using php function !strtotime", array('@strtotime' => l('strtotime', 'http://php.net/strtotime'), array('absolute' => TRUE))),
    t('Use the following column headings, in any order: !columns', array('!columns' => '<blockquote>'.implode(', ', $columns).'</blockquote>'))
  ));
  $currencies = &drupal_static('currencies');
  $form['currcode'] = currency_picker_element(array_keys($currcodes), $default = 'credunit', 0);
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => isset($form_state['values']['data']) ? $form_state['values']['data'] : implode(', ', $columns),
    '#required' => TRUE
  );
  $form['set_created'] = array (
    '#type' => 'checkbox',
    '#title' => 'Adjust user created date',
    '#description' => 'Set $account->created to one day before the first transaction',
    '#default_value' => TRUE,
  );
  $form['import_transactions'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'user/1';
  return $form;
}

function import_transactions_form_validate(&$form, &$form_state) {
  module_load_include('inc', 'mcapi');
  $rows = parse_getcsv($form_state['values']['data']);
  foreach ($rows as $row) {
    $user_ids[] = $row['payer'];
    $user_ids[] = $row['payee'];
  }
  if ($errors = check_users($user_ids, TRUE)) {
    form_set_error('data', implode('<br />', $errors));
    return;
  }

  foreach (mcapi_import_generate_transactions($rows, $form_state['values']['currcode'], $form_state['values']['transaction_type']) as $transaction) {
    try{
      $transactions = array($transaction);
      //each will have its own serial number
      transaction_cluster_write($transactions, FALSE);
    }
    catch (Exception $e){
      form_set_error('', $e->message());
    }
  }
}

function import_transactions_form_submit($form, &$form_state) {
  $csv = parse_getcsv($form_state['values']['data']);
  //store the earliest values
  foreach ($csv as $row) {
    if (empty($row['created'])) continue;
    $earliest[$row['payer']][] = $transaction['created'];
    $earliest[$row['payee']][] = $transaction['created'];
  }
  //create the transactions
  foreach(mcapi_import_generate_transactions($csv, $form_state['values']['currcode'], $form_state['values']['transaction_type']) as $transaction) {
    $cluster = array($transaction);
    transaction_cluster_write($cluster, TRUE);
  }
  if ($form_state['values']['set_created'] && !empty($earliest)) {
    //set the user created to 1 day before the transaction
    foreach($earliest as $uid => $times) {
      db_query("UPDATE {users} SET created = :created WHERE uid = $uid", array(':created' => min($times)));
    }
  }
}

function mcapi_import_generate_transactions($rows, $currcode, $type) {
  foreach ($rows as $row) {
    $props = array(
      'payer' => mcapi_import_get_uid($row['payer']),
      'payee' => mcapi_import_get_uid($row['payer']),
      'quantity' => trim($row['quantity']),
      'currcode' => $currcode,
      'state' => TRANSACTION_STATE_FINISHED,
      'type' => $type,
      'description' => trim($row['description'])
    );
    if (isset($row['created'])) {
      $props['created'] = is_numeric($row['created']) ? trim($row['created']) : strtotime($row['created']);
    }
    $transactions[] = entity_create('transaction', $props);
  }
  return $transactions;
}

function mcapi_import_get_uid($string) {
  if (is_numeric($string)) return $uid;
  else return user_load_by_mail($string)->uid;
}

function import_balances_form($form, &$form_state) {
  $columns = array('User', 'Balance', 'GrossIncome');
  $form['#prefix'] = implode(' ', array(
    t("Paste 2 or 3 comma separated columns into the field below, the first column should be the uid or email, the second column the current balance, and optionally the third column should be the user's gross income until now (turnover)."),
    t("The second column SHOULD add up to 0 for LETS and other zero balance systems, but this will not be checked."),
    t("Do not use quotes"),
    t("The first line should read (third column is optional): !code", array('!code' => '<blockquote>'.implode(', ', $columns).'</blockquote>'))
  ));
  $form['transaction_type'] = array(
    '#title' => t('Transaction type for imported transactions'),
    '#type' => 'select',
    '#options' => mcapi_get_types(),
    '#required' => TRUE
  );
  $currencies = &drupal_static('currencies');
  $form['currcode'] = currency_picker_element(array_keys($currcodes), $default = 'credunit', 0);
  $form['currcode']['#required'] = TRUE;
  $form['data'] = array (
    '#type' => 'textarea',
    '#title' => 'paste data',
    '#default_value' => isset($form_state['values']['data']) ? $form_state['values']['data'] : implode(", ", $columns),
    '#required' => TRUE
  );
  $form['import_balances'] = array (
    '#type' => 'submit',
    '#value' => 'import',
  );
  $form['#redirect'] = 'user/1';
  return $form;
}

function import_balances_form_validate($form, &$form_state) {
  $form_state['values']['data'] .= "\n";
  $rows = parse_getcsv($form_state['values']['data']);
  foreach ($rows as $row) {
    $user_ids[] = $row['UserID'];
  }
  check_users($user_ids, FALSE);
  foreach ($rows as $rownum => $row) {
    //check integrity of balances, the second field
    if (!is_numeric($row['Balance'])) {
      form_set_error('data', t("Balance (second item) on row @num is not numeric: @val", array('@num' => $rownum +1, '@val' => $row['Balance'])));
    }
    //check integrity of gross income, the optional third field
    if (!empty($row['GrossIncome'])){
      $quant = trim($row['GrossIncome']) + 0;
      if (!is_integer($quant)) {
        form_set_error('data', t("Gross income (third item) on row @rownum is not a number: @val", array('@rownum' => $rownum + 1, '@val' => $quant)));
      } elseif ($quant < 0) {
        form_set_error('data', t("gross income (third item) on row @rownum cannot be less than 0: @val", array('@rownum' => $rownum + 1, '@val' => $quant)));
      }
    }
  }
}

function import_balances_form_submit($form, &$form_state) {
  $rows = parse_getcsv($form_state['values']['data']);
  $currencies = &drupal_static('currencies');
  $def_cur = key($currencies);
  foreach ($rows as $key => $stats) {
    mcapi_import_balances_member(
      mcapi_import_get_uid($stats['UserID']),
      $form_state['values']['currcode'],
      $form_state['values']['transaction_type'],
      $stats['Balance'],
      @$stats['GrossIncome']
    );
  }
}


function mcapi_import_balances_member($uid, $currcode, $type, $balance, $gross_income = 0) {
  global $language;
  $currency = currency_load($currcode);
  $transactions = array();
  $values = array(
    'type' => $type,
    'state' => TRANSACTION_STATE_FINISHED,
    'currcode' => $currcode
  );

  $transaction = entity_create('transaction', $values);

  if ($gross_income) {
    $gross_expenditure = $gross_income - $balance;
    $in = $values;
    $out = clone($values);
    $in['quantity'] = $gross_expenditure;
    $in['payer'] = $currency->reservoir;
    $in['payee'] = $uid;
    $transactions[] =  entity_create('transaction', $in);
    $out['quantity'] = $gross_income;
    $out['payer'] = $uid;
    $out['payee'] = $currency->reservoir;
    if ($desc_field = variable_get('transaction_description_field', '')) {
      $in['description'] = t("Gross income");
      $out['description'] = t("Gross expenditure");
    }
    $transactions[] =  entity_create('transaction', $out);
  }
  elseif ($balance != 0) {//if there is only balance, we do one exchange, which is simply + balance
    if ($balance > 0) {
      $values['payer'] = $currency->reservoir;
      $values['payee'] = $uid;
      $values['quantity'] = $balance;
    }
    else {
      $values['payer'] = $uid;
      $values['payee'] = $currency->reservoir;
      $values['quantity'] = -$balance;
    }
    if ($desc_field = variable_get('transaction_description_field', '')) {
      $values['description'] = t("Carried Forward");
    }
    $transactions[] = entity_create('transaction', $values);
  }
  if ($transactions) transaction_cluster_write($transactions, TRUE);
}



//check that the user ids or names actually correspond to a user on the system
//coming from the csv all keys and values will be strings, surrounded by quotes
function check_users($user_ids, $allow1 = FALSE) {

  $errors = array();
  $user_ids = array_unique($user_ids);
  foreach ($user_ids as $user_id){
    if (!is_numeric($user_id)) {
      if (valid_email_address($user_id)) {
        $uid = user_load_by_mail($user_id)->uid;
      }
      else {
        $errors[] = t('Invalid email: @string', array('@string' => $user_id));
      }
    }
    else ($uid = $user_id);
    if (!is_numeric($uid)) {
      $errors[] = t('User not identified @value)', array('@value' => $user_id));
    }
  }
  return $errors;
}


function parse_getcsv($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
  $i = 0;
  $rows = explode("\n", $input);
  $headers = csv2array(array_shift($rows));
  $all = array();
  while ($row = array_shift($rows)){
    $i++;
    $values = explode($delimiter, $row);
    foreach ($headers as $header) {
      $data[$i][$header] = trim(array_shift($values));
    }
    //append any other values to the final field, which must have been a string with commas in
    if ($extra = implode(',', $values)) {
      $data[$i][$header] .= ','. $extra;
    }
  }
  return $data;
}


function csv2array($input, $delimiter = ",", $enclosure = '"', $escape = "\\") {
  $input = str_replace(' ', '', trim($input));
  $fields = explode($delimiter, $input);
  foreach ($fields as $key => $value) {
    $fields[trim($key)]=str_replace($escape.$enclosure, $enclosure, trim($value));
  }
  return($fields);
}



/**
 * Implementation of hook_uif_help().
 */
function mcapi_import_uif_help() {
  $currencies = &drupal_static('currencies');
  $items = array(
    'balance' => 'balance : ' .t('The starting balance of the imported user'),
    'gross_income' => 'gross_income : ' . t('The total income ever of this user.'),
    'currcode' => 'currcode : ' . t('The currency code (optional, default is @currcode)', array('@currcode' => key($currencies)))
  );
  return '<p>' . t('Importing balance (and gross income) per user is incompatible with importing the transaction history.') . '</p>'
  . theme('item_list', array('items' => $items));
}

/**
 * implements uif hook_post_create
 * Give users an initial balance, paid from the central account
 */
function mcapi_import_uif_post_create($account, $user_data, $form_state) {
  if (isset($user_data['balance'])) {
    if (!isset($user_data['currcode'])) {
      $currencies = &drupal_static('currencies');
      $user_data['currcode'] = key($currencies);
    }
    mcapi_import_balances_member($account->uid, $user_data['currcode'], 'auto', $user_data['balance'], @$user_data['gross_income']);
  }
}
