<?php

use Drupal\Core\Template\Attribute;
use Drupal\mcapi\TransactionInterface;
use Drupal\mcapi_limits\McapiLimitsException;

/*
 * implements hook_mcapi_transaction_validate
 * runs only on transaction insertion
 * takes the transaction cluster and makes a projection of the sum of these plus all saved transactions in a positive state.
 * against the balance limits for each affected account,
 * NB. the accounting_validate hook is only run when a transaction is inserted:
 * It only checks against transactions in a POSITIVE state i.e. counted transactions.
 */
function mcapi_limits_mcapi_transaction_validate(array $cluster) {
  module_load_include('inc', 'mcapi_limits');
  _mcapi_limits_mcapi_transaction_validate($cluster);
}


function mcapi_limits_plugin($currency) {
  //TODO how to specify $config for new currencies? Should be just 'none'
  //if the file doesn't exist then a valid config object is still returned.
  //TODO is there a more elegant way of retrieving plugin name?
  //it should come from the $config file unless this is an ajax build in which case from $form_State[values]
  //might be a good idea to keep the $manager in static
  return \Drupal::service('plugin.manager.mcapi_limits')->setup($currency);
}

/*
 * implements hook_form_FORM_ID_alter
 * Add the limits section to the currency form
 */
function mcapi_limits_form_mcapi_currency_edit_form_alter(&$form, $form_state) {
  module_load_include('inc', 'mcapi_limits');
  _mcapi_limits_form_mcapi_currency_edit_form_alter($form, $form_state);
}


/*
 * ajax callback
 */
function limits_settings_subform($form, $form_state) {
  return $form['limits']['limits_settings'];
}

/*
 * implements hook_form_user_form_alter
 * if the current user has permission for each currency that requires it
 * put the limits field on the user profile form
 */
function mcapi_limits_form_user_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'mcapi_limits');
  _mcapi_limits_form_user_form_alter($form, $form_state);
}

/*
 * implements hook_user_presave
 * save the personal override currency limits into the $account object
 * //TODO how best to do this in d8??
 */
function mcapi_limits_user_presave(UserInterface $account) {
  return;
  if ((property_exists($account, 'is_new') && $account->is_new) || empty($account->uid)) return;
  foreach(currencies_load($account) as $currcode => $currency) {
    if (isset($currency->limits['personal'])) {
      if (isset($edit['min-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['min'] = $edit['min-'.$currcode];
      }
      if (isset($edit['max-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['max'] = $edit['max-'.$currcode];
      }
    }
  }
}

/*
 * Implements hook_theme
 */
function mcapi_limits_theme($existing, $type, $theme, $path){
  //we provide a theme function for every plugin, but don't feel obliged
  return array(
    'mcapi_limits' => array(
      'template' => 'mcapi_limits_absolute',
      'variables' => array(
        'currency' => NULL,
        'account' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
    'mcapi_limits_relative' => array(
      'template' => 'mcapi_limits_relative',
      'variables' => array(
        'currency' => NULL,
        'account' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
    'mcapi_limits_balanced' => array(
      'template' => 'mcapi_limits_balanced',
      'variables' => array(
        'currency' => NULL,
        'account' => NULL,
        'size' => '100%',
      ),
      'file' => 'mcapi_limits.inc'
    ),
  );
}

/*
 * implements hook_field_extra_fields
*/
function mcapi_limits_field_extra_fields() {
	return array(
		'user' => array(
			'user' => array(
				'form' => array(
					'mcapi_limits' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				),
				'display' => array(
					'mcapi_limits' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				)
			)
		)
	);
}

/*
 * implement hook_user_view().
*/
function mcapi_limits_user_view($account, $mode, $language) {
  module_load_include('inc', 'mcapi');
  $account->content['mcapi_limits'] = mcapi_view_limits(
    $account,
    mcapi_get_available_currencies($account),
    TRUE
	);
}

/*
 * callback to build a render array
 * used in user_view, block and the view field
 */
function mcapi_view_limits($account, $currencies, $absolute) {
  $renderable = array();
  $manager = \Drupal::service('plugin.manager.mcapi_limits');
  //get a render array for each applicable currency
  foreach ($currencies as $currency) {
    if ($currency->limits_plugin == 'none') continue;
    if ($absolute) {
      $renderable[] = $manager->setup($currency)->view($account);
    }
    else {
      $renderable[] = array(
        '#theme' => 'mcapi_limits_relative',
        '#account' => $account,
        '#currency' => $currency,
      );
    }
  }
  return $renderable;
}

/*
 * implements hook_element_info().
 */
function mcapi_limits_element_info() {
  return array(
    'minmax' => array(
  	  '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('mcapi_limits_process_minmax'),
      '#currcode' => 'credunit'
    )
  );
}

/*
 * processor for minmax element
 */
function mcapi_limits_process_minmax(&$element) {
  //@todo need to know how to make a worth field properly
  $element['min'] = array(
    '#title' => t('Minimum balance'),
    '#description' => t('Must be less than or equal to zero'),
    '#type' => 'worth',
    '#default_value' => $element['#default_value']['min'],
    //'#currcodes' => array($element['#currcode']),
    '#size' => 7,
    '#maxlength' => 7,
    '#attributes' => array('style' => 'width:inherit;'),
    '#max' => 0,
  );
  $element['max'] = array(
    '#title' => t('Maximum balance'),
    '#description' => t('Must be greater than 1.'),
    '#type' => 'worth',
    '#default_value' => $element['#default_value']['max'],
    //'#currcodes' =>array($element['#currcode']),
    '#size' => 6,
    '#maxlength' => 6,
    '#weight' => 1,
    '#attributes' => array('style' => 'width:inherit;'),
    '#min' => 1,
  );
  return $element;
}
