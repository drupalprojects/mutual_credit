<?php

use Drupal\Core\Template\Attribute;
use Drupal\mcapi\TransactionInterface;
use Drupal\mcapi_limits\McapiLimitsException;

/*
 * implements hook_mcapi_transaction_validate
 * runs only on transaction insertion
 * takes the transaction cluster and makes a projection of the sum of these plus all saved transactions in a positive state.
 * against the balance limits for each affected account,
 * NB. the accounting_validate hook is only run when a transaction is inserted:
 * It only checks against transactions in a POSITIVE state i.e. counted transactions.
 */
function mcapi_limits_mcapi_transaction_validate(array $cluster) {
  //first add up all the transactions
  $errors = array();
  module_load_include('inc', 'mcapi');
  $messages = array();
  //to exclude the current transactions from the sum of saved transactions
  //compare the resulting balances for each user with their limits
  foreach (_transactions_diff($cluster) as $uid => $percurrency) {
    $account = user_load($uid);
    foreach ($percurrency as $currcode => $diffs) {
      //check to see if any of the skip settings apply.
      //these check, or at least these reports should possiblly be done after the check, and only if the check failed
      $currency = entity_load('mcapi_currency', $currcode);
      //upgraded sites need to check for the presence of the skip property
      $skips = isset($currency->limits['skip']) ? $currency->limits['skip'] : array('user1' => 0, 'owner' => 0, 'auto' => 0, 'reservoir' => 0 );
      if ($skips['user1'] && \Drupal::currentUser()->id() == 1) {
        $messages[$currcode] = t("Skipped @currency balance limit check because you are user 1.", array('@currency' => $currency->name));
      }
      elseif ($skips['owner'] && \Drupal::currentUser()->id() == $currency->uid) {
        $messages[$currcode] = t("Skipped @currency balance limit check because you are the currency owner.", array('@currency' => $currency->name));
      }
      elseif ($skips['auto'] && current($cluster)->type == 'auto') {
        $messages[$currcode] = t("Skipped balance limit checks for automated transactions with @currency.", array('@currency' => $currency->name));
      }
      elseif ($skips['reservoir'] && $uid == $currency->reservoir )  {
        $messages[$currcode] = t("Skipped balance limit checks for @currency transactions involving the reservoir account.", array('@currency' => $currency->name));
      }
      $summary = mcapi_account_summary($account, $currency);
      $projected = $summary['balance'] + array_sum($diffs);
      $limits = mcapi_limits_plugin($currency)->getLimits($account);
      //we could send 'worth' values to the exception, but that seems like a hassle.
      //instead we'll send the currency and the quantities
      if ($projected > 0 && $limits['max'] && $projected > $limits['max']) {
        $errors[$uid][] = array(
          'currency' => $currency,
          'projected' => $projected,
          'limit' => $limits['max'],
          'excess' => $projected - $limits['max'],
        );
      }
      elseif ($projected < 0 && $limits['min'] != NULL && $projected < $limits['min']) {
        $errors[$uid][] = array(
          'currency' => $currency,
          'projected' => $projected,
          'limit' => $limits['min'],
          'excess' => $limits['min'] - $projected,
        );
      }
    }
  }
  //all balance errors are on the main transaction and can stop.
  $main_transaction = reset($cluster);
  if (count($errors)) {
    foreach ($errors as $uid => $info) {
      foreach ($info as $delta => $vars) {
        //actually the mcapi_transaction_validate hook doesn't require that errors be thrown
        $main_transaction->exceptions[] = new McapiLimitsException($vars['currency'], $uid, $vars['projected'], $vars['limit'], $vars['excess']);
      }
    }
  }
  if (count($messages) && \Drupal::currentUser()->hasPermission('manage all transactions')) {
    foreach ($messages as $currcode => $message) {
      drupal_set_message($message, 'warning', FALSE);
    }
  }
}

function mcapi_limits_plugin($currency) {
  //TODO how to specify $config for new currencies? Should be just 'none'
  //if the file doesn't exist then a valid config object is still returned.
  //TODO is there a more elegant way of retrieving plugin name?
  //it should come from the $config file unless this is an ajax build in which case from $form_State[values]
  $manager = \Drupal::service('plugin.manager.mcapi_limits');

  return $manager->setup($currency);
}

/*
 * implements hook_form_ctools_export_ui_edit_item_form_alter
 * Add the limits section to the currency form
 * I've got a feeling if I was a OO programmer then functions like this would be quite different.
 * Perhaps in drupal 8
 */
//function mcapi_limits_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
function mcapi_limits_form_mcapi_currency_edit_form_alter(&$form, $form_state) {

  foreach(\Drupal::service('plugin.manager.mcapi_limits')->getDefinitions() as $name => $plugin) {
    $options[$name] = $plugin['label'];
  }

  $currency = $form_state['controller']->getEntity();

  //I didn't expect to have to do this, for ajax
  if (isset($form_state['values'])) {
    $currency->limits_plugin = $form_state['values']['limits_plugin'];
  }

  $selected_plugin = mcapi_limits_plugin($currency);

  //limits could be managed by drupal OR the entity controller. Drupal offers more flexibility
  $warning[] = t("With great power comes great responsibility!");
  $warning[] = t("The first rule of accounting is: no account should issue more credit than it can redeem.");
  $warning[] = t("Even fiat currencies can be run sustainably if they are used to pay tax.");
  $warning[] = t("Trust in the system can be increased by limiting the right to issue credit to trusted, known, productive actors in the economy, which may or not include the goverment!");
  $warning[] = t("Transactions will be rejected which take accounts beyond these limits.");
  $warning[] = t("Choose which method to use, and configure it.");
  $form['limits'] = array(
    '#title' => t('Balance limits'),
    '#description' => implode(' ', $warning),
    '#type' => 'fieldset',
    '#weight' => 20,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    'limits_plugin' => array(
      '#title' => t('Plugin'),
      '#description' => t('How will the limits be determined?'),
      '#type' => 'select',
      '#options' => $options,
      //'none' is the default plugin name
      '#default_value' => $currency->limits_plugin ? $currency->limits_plugin : '',
      '#weight' => -1,
      '#ajax' => array(
        'callback' => 'limits_settings_subform',
        'wrapper' => 'limits-settings',
        'effect' => 'fade'
      ),
    ),
  );
  //depending on which plugin is selected, show the options form
  $form['limits']['limits_settings'] = $selected_plugin->settingsForm();

  $form['limits']['limits_settings']['#prefix'] = '<div id="limits-settings">';
  $form['limits']['limits_settings']['#suffix'] = '</div>';
  $form['limits']['limits_settings']['#tree'] = TRUE;

}

function limits_settings_subform($form, $form_state) {
  return $form['limits']['limits_settings'];
}

/*
 * implements hook_form_user_form_alter
 * if the current user has permission for each currency that requires it
 * put the limits field on the user profile form
 */
function mcapi_limits_form_user_form_alter(&$form, &$form_state) {

  foreach (mcapi_get_available_currencies() as $currcode => $currency) {
    if ($currency->limits_plugin == 'none') continue;
    if (property_exists($currency, 'limits_settings') && is_array($currency->limits_settings) && array_key_exists('personal', $currency->limits_settings)) {
     $inherit = $currency->limits_settings['personal'];
    }
    else continue;
    if (\Drupal::currentUser()->hasPermission('configure all currencies') || \Drupal::currentUser()->id() == $currency->uid->value) {
      $access = TRUE;
    }
    //fire up the plugin
    $plugin = mcapi_limits_plugin($currency);
    $base_limits = $plugin->getLimits();
    //for now the personal override allows admin to declare absolute min and max per user.
    //the next thing would be for the override to support different plugins and settings per user.
    $form['limits_personal'][$currcode] = array(
      '#type' => 'fieldset',
      '#title' => $currency->label(),
      '#description' => t('Basic min: !min, max: !max', array(
        '!min' => $currency->format($base_limits['min']),
        '!max' => $currency->format($base_limits['max'])
      )),
      '#attributes' =>  new Attribute(array('style' => 'float:left;')),
      '#disabled' => !(\Drupal::currentUser()->hasPermission('configure all currencies') || \Drupal::currentUser()->id() == $currency->uid->value)
      );
      $def = $plugin->getLimits($form_state['controller']->getEntity());
      if ($plugin->id == 'balanced') {
        //would be a real hasle to get this inside the plugin and do this.
        $form['limits_personal'][$currcode]['minmax'] = $plugin->widget($def);
      }
      else {
        $form['limits_personal'][$currcode]['minmax'] = array(
          '#type' => 'minmax',
          '#default_value' => $plugin->getLimits($def),
          '#currcode' => $currency->id()
        );
      }
    }
  //add a containing fieldset if needed
  if (isset($form['limits_personal'])) {
    $form['limits_personal'] += array(
      '#title' => t('Personal balance limits, set manually'),
      '#description' => t('These override any limits defined in the currency.') .' '.
         t("Leave blank to inherit the values from the currency's settings"),
      '#type' => 'fieldset',
      '#weight' => 2
    );
  }
}

/*
 * implements hook_user_presave
 * save the personal override currency limits into the $account object
 * //TODO how best to do this in d8
 */
function mcapi_limits_user_presave(&$edit, $account, $category) {
  if ((property_exists($account, 'is_new') && $account->is_new) || empty($account->uid)) return;
  foreach(currencies_load($account) as $currcode => $currency) {
    if (isset($currency->limits['personal'])) {
      if (isset($edit['min-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['min'] = $edit['min-'.$currcode];
      }
      if (isset($edit['max-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['max'] = $edit['max-'.$currcode];
      }
    }
  }
}

/*
 * Implements hook_theme
 */
function mcapi_limits_theme($existing, $type, $theme, $path){
  //we provide a theme function for every plugin, but don't feel obliged
  return array(
    'mcapi_limits_absolute' => array(
      'template' => 'mcapi_limits_absolute',
      'variables' => array(
        'currency' => NULL,
        'account' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
    'mcapi_limits_relative' => array(
      'template' => 'mcapi_limits_relative',
      'variables' => array(
        'currency' => NULL,
        'account' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
    'mcapi_limits_balanced' => array(
      'template' => 'mcapi_limits_balanced',
      'variables' => array(
        'currency' => NULL,
        'account' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
  );
}


/*
 * implements hook_field_extra_fields
*/
function mcapi_limits_field_extra_fields() {
	return array(
		'user' => array(
			'user' => array(
				'form' => array(
					'limits_personal' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				),
				'display' => array(
					'limits_personal' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				)
			)
		)
	);
}


/*
 * callback to return render array showing balance limits
 * //this is only called by views at the moment
 */
function balance_limits_view($uid, $currcodes = array()) {
  module_load_include('inc', 'mcapi');
  $renderable = array();
  if (empty($currcodes)) {
    $currcodes = array_keys(currencies_load(user_load($uid)));
  }
  foreach ($currcodes as $currcode) {
    if (\Drupal::currentUser()->id() != $uid && !currency_access('trader_data', $currcode)) continue;
    $limits = limits_get(mcapi_currency_load($currcode), $uid);
    //this chart makes no sense if there isn't a max (or min) limit
    if (empty($limits['max']) && empty($limits['min'])) continue;
    $renderable[$currcode] = array(
      '#theme' => 'balance_limits',
      '#currcode' => $currcode,
      '#min' => @$limits['min'],
      '#max' => @$limits['max'],
      '#uid' => $uid,
    );
  }
  return $renderable;
}

/*
 * implements hook_element_info().
 */
function mcapi_limits_element_info() {
  return array(
    'minmax' => array(
  	  '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('mcapi_limits_process_minmax'),
      '#currcode' => 'credunit'
    )
  );
}

/*
 * processor for minmax element
 */
function mcapi_limits_process_minmax(&$element) {
  $element['min'] = array(
    '#title' => t('Minimum balance'),
    '#description' => t('Must be less than or equal to zero'),
    '#type' => 'worth',
    '#default_value' => $element['#default_value']['min'],
    '#currcodes' => array($element['#currcode']),
    '#size' => 7,
    '#maxlength' => 7,
    '#attributes' => array('style' => 'width:inherit;'),
    '#max' => 0,
  );
  $element['max'] = array(
    '#title' => t('Maximum balance'),
    '#description' => t('Must be greater than 1.'),
    '#type' => 'worth',
    '#default_value' => $element['#default_value']['max'],
    '#currcodes' =>array($element['#currcode']),
    '#size' => 6,
    '#maxlength' => 6,
    '#weight' => 1,
    '#attributes' => array('style' => 'width:inherit;'),
    '#min' => 1,
  );
  return $element;
}

/*
 * Calculate the balance changes that this transaction proposes
* by convention, if the transaction state < 0 it is NOT COUNTED
* this is only used in tokens, so far, and in mcapi_limits module
* incoming transaction can be a transaction object with children or an array
*/
function _transactions_diff(array $cluster) {
  $diff = array();
  foreach ($cluster as $transaction) {
    foreach ($transaction->worths[0] as $currcode => $worth) {
      //we can't prepare the array in advance with zeros so += and -= throws notices
      //instead we just build up an array and add them up when we need them
      $diff[$transaction->payer->value][$currcode][] = -$worth->value;
      $diff[$transaction->payee->value][$currcode][] = $worth->value;
    }
  }
  return $diff;
}
