<?php

use Drupal\Core\Template\Attribute;
use Drupal\mcapi\TransactionInterface;

/*
 * returns an array of min and max, if the keys are unset that means there is no limit.
 */
function limits_get($currcode, $uid){
  module_load_include('inc', 'mcapi_limits');
  $currency = entity_load('mcapi_currency', $currcode);
  $callback = @$currency->limits['limits_callback'];
  $personal = @$currency->limits['personal'];

  $limits = array();
  //first we get the personal limits and if they are complete and absolute, return them.
  if (@$currency->limits['personal']) {
    $account = user_load($uid);
    $limits = array_filter((array)@$account->data['limits_personal'][$currcode], 'is_numeric');
  }
  if (count(array_filter($limits)) == 2) return $limits;

  //now we fill the blanks with currency limits
  if (isset($currency->limits['limits_callback'])) {
    $callback = $currency->limits['limits_callback'];
    $limits += array_filter($callback($currency, $uid), 'is_numeric');
  }
  return $limits;
}

//this shows the amount available to spend or earn, by factoring in the user's balance
//rather than just showing the fixed limits
function limits_get_adjusted($currcode, $uid, $balance = NULL) {
  $adjusted = array();
  if ($limits = limits_get($currcode, $uid)) {
    if ($balance === NULL) {
      $balance = transaction_totals($uid, $currcode)->balance;
    }
    if (isset($limits['min'])) $adjusted['spend_limit'] = $balance - $limits['min'];
    if (isset($limits['max'])) $adjusted['earn_limit'] = $limits['max'] - $balance;
    return $adjusted;
  }
}

/*
 * implements hook_mcapi_transaction_validate
 * runs only on transaction insertion
 * takes the transaction cluster and makes a projection of the sum of these plus all saved transactions in a positive state.
 * against the balance limits for each affected account,
 * NB. the accounting_validate hook is only run when a transaction cluster is inserted:
 * This hook does no checking when transactions are undone nor when they change state.
 *
 * I didn't want to output only readable messages by this module,
 * but throw data and messages to be handled later
 * Because i don't know how to pass args into an exception,
 * the limit checker catches its own Exceptions, parses them,
 * and throws a new Exception with the previous one as a descendent
 * the coded form is:
 * i.e. "$difference>$limit" for transactions that would exceed the max
 * i.e. "$difference>$limit" for transactions that would exceed the min
 */
function mcapi_limits_mcapi_transaction_validate(TransactionInterface $transaction) {
  //first add up all the transactions

  $errors = array();
  module_load_include('inc', 'mcapi');
  $messages = array();
  //to exclude the current transactions from the sum of saved transactions
  //compare the resulting balances for each user with their limits
  foreach (_transactions_diff($cluster) as $uid => $percurrency) {
    foreach ($percurrency as $currcode => $diffs) {
      //check to see if any of the skip settings apply.
      //these check, or at least these reports should possiblly be done after the check, and only if the check failed
      $currency = entity_load('mcapi_currency', $currcode);
      if ($currency->issuance == 'acknowledgement') continue;
      //upgraded sites need to check for the presence of the skip property
      $skips = isset($currency->limits['skip']) ? $currency->limits['skip'] : array('user1' => 0, 'owner' => 0, 'auto' => 0, 'reservoir' => 0 );
      if ($skips['user1'] && \Drupal::currentUser()->id() == 1) {
        $messages[$currcode] = t("Skipped @currency balance limit check because you are user 1.", array('@currency' => $currency->name));
      }
      elseif ($skips['owner'] && \Drupal::currentUser()->id() == $currency->uid) {
        $messages[$currcode] = t("Skipped @currency balance limit check because you are the currency owner.", array('@currency' => $currency->name));
      }
      elseif ($skips['auto'] && current($cluster)->type == 'auto') {
        $messages[$currcode] = t("Skipped balance limit checks for automated transactions with @currency.", array('@currency' => $currency->name));
      }
      elseif ($skips['reservoir'] && $uid == $currency->reservoir )  {
        $messages[$currcode] = t("Skipped balance limit checks for @currency transactions involving the reservoir account.", array('@currency' => $currency->name));
      }
      $balance = transaction_totals($uid, $currcode)->balance;
      $projected = $balance + array_sum($diffs);
      $limits = limits_get($currcode, $uid);
      if (!empty($limits['max']) && is_numeric($limits['max']) && $projected > $limits['max'] && $projected > $balance) {
        $errors[$uid][$currcode] = array(
          '@name' => user_load($uid)->name,
          '@projected' => $projected,
          '@max' => $limits['max'],
          '@excess' => $projected - $limits['max'],
        );
      }
      elseif (!empty($limits['min']) && is_numeric($limits['min']) && $projected < $limits['min'] && $projected < $balance) {
        $errors[$uid][$currcode] = array(
          '@name' => user_load($uid)->name,
          '@projected' => $projected,
          '@min' => $limits['min'],
          '@excess' => $limits['min'] - $projected,
        );
      }
    }
  }
  //the only way I can think of to pass both messages and codes back,
  //short of defining my own exception is to nest exceptions
  try {
    if (count($errors)) {
      if (count($messages)) {
        foreach ($messages as $currcode => $message) {
          if (user_access('manage all transactions')) drupal_set_message($message, 'warning', FALSE);
        }
        return;
      }
      throw new Exception(serialize($errors));
    }
  }
  catch (exception $e) {
    $message = mcapi_limits_exception_parse(unserialize($e->getMessage()));
    if (phpversion() >= 5.3) {
      throw new Exception($message, 0, $e);
    }
    else {
      throw new Exception($message);
    }
  }
}


/*
 * utility parse the error messages which hitherto, were coded.
 */
function mcapi_limits_exception_parse($errors) {
  $messages = array();
  foreach ($errors as $uid => $percurrency) {
    foreach ($percurrency as $currcode => $info) {
      //parse balance limits error
      if (isset($info['@max'])) {
        $messages[] = t('Transaction would take @name !quant above the maximum balance of !max',
          array(
            '@name' => $info['@name'],
            '!quant' => theme('worth_item', array('quantity' => $info['@excess'], 'currcode' => $currcode)),
            '!max' => theme('worth_item', array('quantity' => $info['@max'], 'currcode' => $currcode))
          )
        );
      }
      if (isset($info['@min'])) {
        $messages[] = t('Transaction would take @name !quant below the minimum balance of !min',
          array(
            '@name' => $info['@name'],
            '!quant' => theme('worth_item', array('quantity' => $info['@excess'], 'currcode' => $currcode)),
            '!min' => theme('worth_item', array('quantity' => $info['@min'], 'currcode' => $currcode)),
          )
        );
      }
    }
  }
  return implode('; ', $messages);
}

function mcapi_limits_plugin($currency) {
  //TODO how to specify $config for new currencies? Should be just 'none'
  //if the file doesn't exist then a valid config object is still returned.
  //TODO is there a more elegant way of retrieving plugin name?
  //it should come from the $config file unless this is an ajax build in which case from $form_State[values]
  $manager = \Drupal::service('plugin.manager.mcapi_limits');

  return $manager->createInstance($currency->limits_plugin, $currency->limits_settings);
}

/*
 * implements hook_form_ctools_export_ui_edit_item_form_alter
 * Add the limits section to the currency form
 * I've got a feeling if I was a OO programmer then functions like this would be quite different.
 * Perhaps in drupal 8
 */
//function mcapi_limits_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
function mcapi_limits_form_mcapi_currency_edit_form_alter(&$form, $form_state) {

  foreach(\Drupal::service('plugin.manager.mcapi_limits')->getDefinitions() as $name => $plugin) {
    $options[$name] = $plugin['label'];
  }

  $currency = $form_state['controller']->getEntity();
  $selected_plugin = mcapi_limits_plugin($currency);

  //limits could be managed by drupal OR the entity controller. Drupal offers more flexibility
  $warning[] = t("With great power comes great responsibility!");
  $warning[] = t("The first rule of accounting is: no account should issue more credit than it can redeem.");
  $warning[] = t("Even fiat currencies can be run sustainably if they are used to pay tax.");
  $warning[] = t("Trust in the system can be increased by limiting the right to issue credit to trusted, known, productive actors in the economy, which may or not include the goverment!");
  $warning[] = t("Transactions will be rejected which take accounts beyond these limits.");
  $warning[] = t("Choose which method to use, and configure it.");
  $form['limits'] = array(
    '#title' => t('Balance limits'),
    '#description' => implode(' ', $warning),
    '#type' => 'fieldset',
    '#weight' => 20,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    'limits_plugin' => array(
      '#title' => t('Plugin'),
      '#description' => t('How will the limits be determined?'),
      '#type' => 'select',
      '#options' => $options,
      //'none' is the default plugin name
      '#default_value' => $currency->limits_plugin ? $currency->limits_plugin : '',
      '#weight' => -1,
      '#ajax' => array(
        'callback' => 'limits_settings_subform',
        'wrapper' => 'limits-settings',
        'effect' => 'fade'
      ),
    ),
  );
  //depending on which plugin is selected, show the options form
  $form['limits']['limits_settings'] = $selected_plugin->settingsForm();

  $form['limits']['limits_settings']['#prefix'] = '<div id="limits-settings">';
  $form['limits']['limits_settings']['#suffix'] = '</div>';
  $form['limits']['limits_settings']['#tree'] = TRUE;

}

function limits_settings_subform($form, $form_state) {
  return $form['limits']['limits_settings'];
}

/*
 * implements hook_form_user_form_alter
 * if the current user has permission for each currency that requires it
 * put the limits field on the user profile form
 */
function mcapi_limits_form_user_form_alter(&$form, &$form_state) {

  foreach (mcapi_get_available_currencies() as $currcode => $currency) {
    if ($currency->limits_plugin == 'none') continue;
    if (property_exists($currency, 'limits_settings') && is_array($currency->limits_settings) && array_key_exists('personal', $currency->limits_settings)) {
     $inherit = $currency->limits_settings['personal'];
    }
    else continue;
    if (user_access('configure all currencies') || \Drupal::currentUser()->id() == $currency->uid->value) {
      $access = TRUE;
    }
    //fire up the plugin
    $plugin = mcapi_limits_plugin($currency);
    $base_limits = $plugin->getLimits();

    $form['limits_personal'][$currcode] = array(
      '#type' => 'fieldset',
      '#title' => $currency->label(),
      '#description' => t('Basic min: !min, max: !max', array(
        '!min' => $currency->format($base_limits['min']),
        '!max' => $currency->format($base_limits['max'])
      )),
      '#attributes' =>  new Attribute(array('style' => 'float:left;')),
      'minmax' => array(
        '#type' => 'minmax',
        '#default_value' => $plugin->getLimits($form_state['controller']->getEntity()),
        '#currcode' => $currency->id()
      ),
      '#disabled' => !(user_access('configure all currencies') || \Drupal::currentUser()->id() == $currency->uid->value)
    );
  }
  //add a containing fieldset if needed
  if (isset($form['limits_personal'])) {
    $form['limits_personal'] += array(
      '#title' => t('Personal balance limits, set manually'),
      '#description' => t('These override any limits defined in the currency.') .' '.
         t("Leave blank to inherit the values from the currency's settings"),
      '#type' => 'fieldset',
      '#weight' => 2
    );
  }
}

/*
 * implements hook_user_presave
 * save the personal override currency limits into the $account object
 * //TODO how best to do this in d8
 */
function mcapi_limits_user_presave(&$edit, $account, $category) {
  if ((property_exists($account, 'is_new') && $account->is_new) || empty($account->uid)) return;
  foreach(currencies_load($account) as $currcode => $currency) {
    if (isset($currency->limits['personal'])) {
      if (isset($edit['min-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['min'] = $edit['min-'.$currcode];
      }
      if (isset($edit['max-'.$currcode])) {
        $edit['data']['limits_personal'][$currcode]['max'] = $edit['max-'.$currcode];
      }
    }
  }
}

/*
 * Implements hook_theme
 */
function mcapi_limits_theme($existing, $type, $theme, $path){
  //the block names are the same as the theme callbacks
  //lets have an inc file to do the preprocessing
  return array(
    'balance_limits' => array(
      'template' => 'balance_limits',
      'variables' => array(
        'currcode' => '',
        'uid' => 0,
        'min' => 0,
        'balance' => 0,
        'max' => 0
      ),
    ),
    'trading_limits' => array(
      'template' => 'trading_limits',
      'variables' => array(
        'currcode' => '',
        'uid' => 0,
        'earn_limit' => 0,
        'spend_limit' => 0
      ),
    ),
  );
}


/*
 * implements hook_field_extra_fields
*/
function mcapi_limits_field_extra_fields() {
	return array(
		'user' => array(
			'user' => array(
				'form' => array(
					'limits_personal' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				),
				'display' => array(
					'limits_personal' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				)
			)
		)
	);
}


/*
 * callback to return render array showing balance limits
 */
function balance_limits_view($uid, $currcodes = array()) {
  module_load_include('inc', 'mcapi');
  $renderable = array();
  if (empty($currcodes)) {
    $currcodes = array_keys(currencies_load(user_load($uid)));
  }
  foreach ($currcodes as $currcode) {
    if (\Drupal::currentUser()->id() != $uid && !currency_access('trader_data', $currcode)) continue;
    $limits = limits_get($currcode, $uid);
    //this chart makes no sense if there isn't a max (or min) limit
    if (empty($limits['max']) && empty($limits['min'])) continue;
    $renderable[$currcode] = array(
      '#theme' => 'balance_limits',
      '#currcode' => $currcode,
      '#min' => @$limits['min'],
      '#max' => @$limits['max'],
      '#uid' => $uid,
    );
  }
  return $renderable;
}

function template_preprocess_balance_limits(&$vars) {
  $vars['balance'] = transaction_totals($vars['uid'], $vars['currcode'])->balance;
}

function mcapi_limits_element_info() {
  return array(
    'minmax' => array(
  	  '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('mcapi_limits_process_minmax'),
      '#default_value' => array('min' => 0, 'max' => 100),
      '#currcode' => 'credunit'

    )
  );
}

function mcapi_limits_process_minmax(&$element) {
  $element['min'] = array(
    '#title' => t('Minimum balance'),
    '#description' => t('Must be less than or equal to zero'),
    '#type' => 'worth',
    '#default_value' => array(
       '#currcode' => $element['#currcode'],
       '#value' => $element['#default_value']['min'],
    ),
    '#placeholder' => "-".t('h:m:s'),
    '#currcodes' => array($element['#currcode']),
    '#size' => 7,
    '#maxlength' => 7,
    '#attributes' => array('style' => 'width:inherit;'),
    '#max' => 0,
  );
  $element['max'] = array(
    '#title' => t('Maximum balance'),
    '#description' => t('Must be greater than 1.'),
    '#type' => 'worth',
    '#default_value' => array(
       '#currcode' => $element['#currcode'],
       '#value' => $element['#default_value']['max'],
    ),
    '#currcodes' =>array($element['#currcode']),
    //'#placeholder' => $element['#placeholder']['max'],
    '#size' => 6,
    '#maxlength' => 6,
    '#weight' => 1,
    '#attributes' => array('style' => 'width:inherit;'),
    '#min' => 1,
  );
  return $element;
}

//validate callback subsection of currency form (and sometimes user profile form)
//this could be done in javascript also, on the form
function mcapi_limits_validate_min(&$element, $form_state) {
  if (!empty($element['#value']) && $element['#value'] > 0) {
    form_error($element, t('Minimum balance must not be larger than 0'));
  }
}

//validate callback subsection of currency form (and sometimes user profile form)
//this could be done in javascript also, on the form
function mcapi_limits_validate_max(&$element, $form_state) {
  if (!empty($element['#value']) && $element['#value'] <= 0) {
    form_error($element, t('Maximum balance must be larger than 0'));
  }
}
