<?php

use Drupal\Core\Template\Attribute;
use Drupal\mcapi\Entity\TransactionInterface;
use Drupal\mcapi\Entity\CurrencyInterface;
use Drupal\mcapi_limits\WalletLimits;
use Drupal\mcapi\Entity\WalletInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * implements hook_mcapi_transaction_validate().
 * runs only on transaction insertion
 * takes the transaction cluster and makes a projection of the sum of these plus all saved transactions in a positive state.
 * against the balance limits for each affected account,
 * NB. the accounting_validate hook is only run when a transaction is inserted:
 * It only checks against transactions in a POSITIVE state i.e. counted transactions.
 *
 * @param TransactionInterface[] $cluster
 *
 * @return ViolationInterface[]
 */
function mcapi_limits_mcapi_transaction_validate(array $cluster) {
  //only validate if there are no fatal errors yet
  //i.e. no exceptions on the first transaction in the cluster
  //print_R(reset($cluster)->mcapiExceptions);die('mcapi_limits_mcapi_transaction_validate should show violations');
  if (reset($cluster)->mcapiExceptions) return;
  module_load_include('inc', 'mcapi_limits');
  return _mcapi_limits_mcapi_transaction_validate($cluster);
}

/**
 * add the limits decorator to the wallet class
 * in fact its not a proper decorator class coz I couldn't get my head around it
 *
 * @return \Drupal\mcapi_limits\WalletLimitsDecorator
 *
 * @todo consider putting this in the inc file
 */
function mcapi_limits($wallet) {
  return new WalletLimits($wallet);
}

/**
 * get the plugin for the given currency
 *
 * @param CurrencyInterface $currency
 * @param string $name
 *   the plugin to load, if not the currency's saved plugin.
 *
 * @todo expand this function to keep the Plugins in static
 */
function mcapi_limits_saved_plugin(CurrencyInterface $currency, $name = '') {
  $plugins = &drupal_static(__FUNCTION__, array());
  $curr_id = $currency->id();
  if (!array_key_exists($curr_id, $plugins)) {
    $config = \Drupal::config('mcapi.limits.'.$currency->id());
    $name = ($name ? : $config->get('plugin'));
    $settings = array('currency' => $currency);
    $plugins[$curr_id] = \Drupal::service('plugin.manager.mcapi_limits')
      ->createInstance($name ? : 'none', $settings);
  }
  return $plugins[$curr_id];
}

/**
 * implements hook_form_FORM_ID_alter().
 * Add the limits section to the currency form
 * @todo clear the wallet entity cache of all wallets that might be holding this currency
 */
function mcapi_limits_form_mcapi_currency_edit_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'mcapi_limits');
  _mcapi_limits_form_mcapi_currency_edit_form_alter($form, $form_state);
}


/**
 * Implements hook_theme().
 */
function mcapi_limits_theme($existing, $type, $theme, $path){
  return array(
    'mcapi_limits_absolute' => array(
      'template' => 'mcapi_limits_absolute',
      'variables' => array(
        'currency' => NULL,
        'wallet' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
    'mcapi_limits_relative' => array(
      'template' => 'mcapi_limits_relative',
      'variables' => array(
        'currency' => NULL,
        'wallet' => NULL,
      ),
      'file' => 'mcapi_limits.inc'
    ),
    //only for exchange currencies
    'mcapi_limits_balanced' => array(
      'template' => 'mcapi_limits_balanced',
      'variables' => array(
        'currency' => NULL,
        'wallet' => NULL,
        'size' => '100%',
      ),
      'file' => 'mcapi_limits.inc'
    ),
  );
}

/**
 * implements hook_entity_extra_field_info().
*/
function mcapi_limits_entity_extra_field_info() {
	return array(
		'mcapi_wallet' => array(
			'mcapi_wallet' => array(
				'form' => array(
					'mcapi_limits' => array(
						'label' => t('Balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				),
				'display' => array(
				  //may show themes absolute or balanced depending on whether min and max are equal
					'mcapi_limits_absolute' => array(
						'label' => t('Absolute balance limits'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
					'mcapi_limits_relative' => array(
						'label' => t('Balance limits relative to the balance'),
						'description' => t('Trading limits per currency'),
						'weight' => 0,
					),
				)
			)
		)
	);
}

/**
 * implement hook_ENTITY_TYPE_view().
 * adds the extra_fields to the wallet view
*/
function mcapi_limits_mcapi_wallet_view(&$build, WalletInterface $wallet, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  //module_load_include('inc', 'mcapi') is already included
  if ($display->getComponent('mcapi_limits_absolute')) {
    $build += mcapi_view_limits($wallet, TRUE);
  }
  //showing both would be confusing
  elseif ($display->getComponent('mcapi_limits_absolute')) {
    $build += mcapi_view_limits($wallet, FALSE);
  }
}

/**
 * callback to build a render array
 * used in hook_wallet_view, views, & blocks
 *
 * @param WalletInterface $wallet
 *
 * $param boolean $relative
 */
function mcapi_view_limits(WalletInterface $wallet) {
  $renderable = array();
  foreach ($wallet->currencies_all() as $currency) {
    $curr_id = $currency->id();
    $limits_config = mcapi_limits_saved_plugin($currency);
    if ($limits_config->id == 'none') continue;
    //TODO check later if \Drupal\Component\Plugin\ConfigurablePluginInterface has been expanded to allow getting just one config key
    $config = $limits_config->getConfiguration();
    if ($config['display_relative'] == 'relative') {
      $theme = 'mcapi_limits_relative';
    }
    else {
      $limits = mcapi_limits($wallet)->limits($currency->id());
      //special opportunity to show an alternative display when +ve & -ve limits are balanced
//      print_r($limits);
      if ($limits['max'] && ($limits['max'] == -$limits['min'])) {
        $theme = 'mcapi_limits_balanced';
      }
      else {
        $theme = 'mcapi_limits_absolute';
      }
    }
    $renderable[$curr_id]['mcapi_limits'] = array(
      '#theme' => $theme,
      '#wallet' => $wallet,
      '#currency' => $currency,
    );
  }
  return $renderable;
}

/**
 * implements hook_element_info().
 * a new element for the upper and lower balance limits, a wrapper round 2 'worth' items
 */
function mcapi_limits_element_info() {
  return array(
    'minmax' => array(
  	  '#input' => TRUE,
      '#tree' => TRUE,
      '#process' => array('mcapi_limits_process_minmax'),
      '#value_callback' => 'mcapi_limits_form_type_minmax_value',
      '#minus' => FALSE
    )
  );
}

/**
 * processor for minmax element
 */
function mcapi_limits_process_minmax(&$element) {
  $default = (array)$element['#default_value'] + array('min' => array(), 'max' => array());
  $element['min'] = array(
    '#title' => t('Minimum balance'),
    '#description' => t('Must be less than or equal to zero'),
    '#type' => 'worth',
    '#config' => TRUE,
    '#default_value' => array(
      0 => array('curr_id' => $element['#curr_id'], 'value' => $default['min']),
    ),
    '#placeholder' => array(
      0 => $element['#placeholder']['min']
    ),
    '#minus' => TRUE
  );
  $element['max'] = array(
    '#title' => t('Maximum balance'),
    '#description' => t('Must be greater than 1.'),
    '#type' => 'worth',
    '#config' => TRUE,
    '#default_value' => array(
      0 => array('curr_id' => $element['#curr_id'], 'value' => $default['max']),
    ),
    '#placeholder' => array(
      0 => $element['#placeholder']['max']
    ),
    '#weight' => 1,
    '#min' => 1
  );
  return $element;
}

/**
 * value callback for minmax
 * take the two single worth fields above and represent them as
 * array($curr_id => array($min, $max));
 */
//Why is this function running BEFORE the worth has been calculated? What an ugly hack. McNasty.
function mcapi_limits_form_type_minmax_value(&$element, $input = FALSE, &$form_state) {
  if ($input === FALSE) return;
  $element = mcapi_limits_process_minmax($element);//why was the element sent through partuly unprocessed?
  $output['min'] = mcapi_form_type_worth_value($element['min'], $input['min'], $form_state);
  $output['max'] = mcapi_form_type_worth_value($element['max'], $input['max'], $form_state);
  return $output;
}
