<?php

//ABOUT

/*
 * Conventional money credit is created by trusted institutions - banks, who control how much is in circulation.
 * A digital payment system must ensure that as one account is debited, another is credited, and doesn't normally worry about who is issuing it
 * Mutual credit money is not issued by banks but by the users themselves, within the exchanges to which they belong
 * Therefore in addition to ensuring proper accounting, we must be much more careful about who is issuing (spending it into circulation).
 * Mutual credit networks, just like mutual credit, depend for stability on all credit issued by members being redeemable in principle
 * So in addition to sound accounting and payment protocols, members must submit to governance.
 * This may be of interest
 * http://timebanks.org/wp-content/uploads/2011/08/Key-Indicators-of-TimeBank-Participation.pdf
 *
 * This is an open API, which means we must protect against clients spoofing all their reported data.
 * So as with p2p mutual credit, we will keep a central registry of transactions between servers.
 * This simplifies the authentication issue, as each exchange has only to log into the centre.
 *
 * The central server should also
 * * decline transactions which would take an exchange beyond its limits.
 * * check solvency of member exchanges
 * * keep a backup record of each transaction
 * * converts from one currency to another using a base unit, called ticks
 * * produce reports
 * * produces a list of valid members, (suitable for including in a transaction form)
 *
 * Some human oversight will be needed. For example there should be no robo-membership, just as with a LETS
 *
 */

//APPROACH

/*
 * Intertrading involves one server mediating between many clients,
 * although ideally it would be a genuine p2p, (or server2server) network
 * This file documents the API to enable non-Drupal implementations of the client.
 *
 * Authentication
 *
 * There is no session or http authentication. This is security is good enough for now
 * All interactions are initiated by the client, except for when the transaction is relayed from server to client
 * Every POST made by the client to the server includes the following fields:
 * - src_url //the url of the client
 * - key //the new_key in the last handshake
 * - (note that ip address is also checked
 * When the server is passing the transaction to the 2nd client it includes only
 * - key //the last key generated by the second client
 *
 * Handshake
 * Client sends the server some current stats, mostly to enable the server to determine if the client is eligible to trade.
 * The eligibility criteria is configurable on the server.
 * The initial implementation checks:
 * that the deficit is less than a proportion of the volume
 * that the integrity is TRUE i.e. that all balances add up to zero
 * that the intertrading balance is within the balance limits
 *
 * response
 * Successful connections always return http code 200 and a json encoded array.
 * The first value in the array is the intertrading code, which is 'OK' by default
 * if the intertrading code is a number, then the subsequent args may be used to formulate the error message
 * See error codes below
 *
 */

//CONVERSATION

/*
 * Each Client is configured to know the $server url.
 * Then the client and server can have following conversations
 * Help
 * Client Request:
 * Server Response: A description of the rules and ethics on that server + account stats
 *
 * Handshake
 * Client Request: Announces to server, refreshes key, and sends statement data
 * Server Response: 'Check client validity' and creates / verifies user account
 *
 * Prepare form
 * Client Request:
 * Server Response: returns list of exchanges and spending/earning limits
 *
 * Try transaction
 * Client Request: transaction params
 * Server Response: returns OK or error code
 *
 * Relay transaction
 * Server relays transaction to second client
 * Server Request: relay's transaction to client2
 * Client2 Response: returns OK or error code
 *
 */

//API SPECIFICS
/*
 * Help : Client Request
 * http://myserver.com/intertrading/help/json
 * POST the handshake array (optional)
 */

/*
 * Help : Server Response :
 * Returns OK or http error code specified below
 * or on success this JSON array:
 */
array(
  '@message' => STRING, //html,
  '@status' => ENUM, // -1 means no account, 0 means blocked, 1 means trading
  //following arguments are passed if the account exists
  '@balance' => INTEGER, //in the base unit i.e. minutes
  '@min' => INTEGER, //in the base unit i.e. minutes
  '@max' => INTEGER, //in the base unit i.e. minutes
  '@count' => INTEGER, //number of transactions
  '@keymatch' => BOOLEAN //whether the stored key is the same as the given one.
);

/*
 * Handshake : Client Request
 * http://myserver.com/exchange/handshake
 * typically called only after it is changed, maybe on cron to update the key
 * POST 2 authentication fields + the report fields (below), + the following
 */
array (
  //address of the site admin. Error messages, news, and notification may be sent here.
  'mail' => STRING, 63,
  //not used at present..
  'api' => 1.0,
  //relative value of the currency against 1 tick. One tick might be 1 minute, and an hour currency would be 60 ticks
  'ticks' => FLOAT,
  //the date of the first trade in the system, in case age of the system is needed for membership criteria
  'first_trade',
  //Number of traders
  'traders' => INTEGER,
  //number of transactions in the last 30 days
  'transactions' => INTEGER,
  //OPTIONAL FIELDS
  'divisions' => mixed, //01 means cents OR list of acceptable centilesseparated by pipe|
  //The root path e.g. domain.org/mytown?q=
  'uri' => STRING, 63,
  //Toggle whether all this data should be visible to the public
  'visibility' => BOOLEAN,
  //The absolute url of the logo of the site (optional)
  'logo' => URL,
  //The latitude of the site
  'lat' => FLOAT,
  //The latitude of the site
  'lon' => FLOAT,
  //random string
  'new_key' => VARCHAR,
);
/*
 * Handshake : Client response
 * return http code + optional message
 */

/*
 * Prepare form : Client
 * http://myserver.com/exchange/prepare
 * typically called before a transaction is attempted, to verify client validity and prep client about its balance limits on the server
 * POST 2 authentication fields + the following
 */
array(
  //Last 365 days volume
  'volume' => FLOAT,
  //the largest negative balance - an indicator of deficit spending, a common problem
  'deficit' => FLOAT,
  //Boolean whether the balances add up to zero. Must be TRUE!
  'integrity' => 1,
  //balance of the account designated for intertrading
  'balance' => FLOAT,
);


/*
 * Prepare form : Server response
 * Returns http error code specified below
 * or on success this JSON array
 */
array(
  //suitable for populating a dropdown or for client-side validation
  'sites' => array(
    'servername.com' => 'Site Title',
    'servername2.com' => 'Site2 Title'
  ),
  //according the limits of the sites account on the intertrading server
  //suitable for client-side validation
  //both values are > 0 since they indicate the max value of a transaction in a given direction
  'spend_limit' => FLOAT,
  'earn_limit' => FLOAT,
);
//Note transactions are fully validated by the server regardless of data sent here.

/*
 * Try transaction : Server Request
 * http://myserver.com/transaction/try  >>replayed to>> http://client2.com/intertrade
 * POST the following fields
 */
array(
  'payer' => varchar,
  'payer_url' => varchar,
  'payee' => varchar,
  'payee_url' => varchar,
  'dest_url' => STRING, //'servername.com',
  'src_url' => STRING, //'servername.com',
  'quantity' => FLOAT, //denominated in src units
  'description' => TEXT, //255
  'really' => boolean //whether or not to write
);
//going towards the server, the 2 authentication fields should be added
//on the second leg, towards the 2nd client, that client's key is needed for authentication
/*
 * Try transaction : Client response
 * return OK or error message
 */


/*
 * http error codes
 * this is an ad hoc extenstion of the http status codes
 * http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
 * $args is an array, keyed by the preceding @words
 * The actual strings below are not definitive

   4: "Transaction would exceed limits on server"
   5: 'Problem saving transaction on server'
   6: 'Unknown account & failed to create a new account on intertrading server'
   7: 'Diagnostics from server: @message', $args
   8: 'Invalid transaction field: @field: @value', $args
      //failure to authenticate or validate handshake with server
   11: 'Missing config field: @fieldname', $args
   12: 'Field @fieldname should be @rel 0: $val', $args
   13: 'Field @fieldname contains invalid characters', $args
   14: 'Your Intertrading ratio (balance/volume) exceeds @num%: @balance / @volume', $args
   15: 'Type error in field @fieldname. Should be a @type.', $args
   16: 'Your exchange is not permitted on the intertrading network.
   17: 'Wrong key'
   18: 'not enough data to authenticate'
       //failure of remote client
   20: "server failed to authenticate with remote client"
   24: "Transaction would exceed remote client's account limits"
   25: "Misc validation error on remote client: @message", $args);
   26: "Server not found: @server", $args);
   27: "@message", $args
   default: return t('Unknown error code: @code', array('@code' => $code));
*/