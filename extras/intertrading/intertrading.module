<?php
/*
 * Drupal 7 intertrading client
 */
define('INTERTRADING_API_VERSION', 1.0);
define('INTERTRADING_REF_URL',
  str_replace('www.', '', @$_SERVER['HTTP_HOST']). str_replace('/index.php', '', $_SERVER['SCRIPT_NAME']) .'/?q=');
require('intertrading.inc'); //functions shared with server
/*
 * implements hook_menu
 */
function intertrading_menu() {
  $items['statement'] = array(
    'title' => 'Trading network',
    'description' => 'Display statistics about this exchange in the Community Forge network',
    'page callback' => 'statement',
    'access arguments' => array('access statement'),
    'menu_name' => 'secondary-links',
    'weight' => 1
  );

  if ($currcode = variable_get('intertrading_currcode') && variable_get('intertrading_uid')) {
    mcapi_init();//
    $transaction =  entity_create('transaction', array());
    //this attempt to preset has little effect if the field cardinality > 0
    $transaction->worth[LANGUAGE_NONE][0] = array(
      'currcode' => variable_get('intertrading_currcode', NULL),
      'quantity' => 0
    );
    $items['transact/remote'] = array(
      'title' => 'Remote transaction',
      'description' => 'Trade with another exchange in the network',
      'page callback' => array('intertrading_direction'),
      'access arguments' => array('intertrade'),
      'menu_name' => 'main-menu',
      'type' => MENU_LOCAL_TASK,
      'weight' => 1
    );
    $items['transact/remote/choose'] = array(
      'title' => 'Remote claim',
      'description' => 'Request credit from another exchange',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1
    );
    $items['transact/remote/incoming'] = array(
      'title' => 'Remote claim',
      'description' => 'Request credit from another exchange',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('remote_incoming_form', $transaction),
      'access arguments' => array('intertrade'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'mcapi.inc',
      'file path' => drupal_get_path('module', 'mcapi'),
      'weight' => 1
    );
    $items['transact/remote/outgoing'] = array(
      'title' => 'Remote payment',
      'description' => 'Credit someone in another exchange',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('remote_outgoing_form', $transaction),
      'access arguments' => array('intertrade'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'mcapi.inc',
      'file path' => drupal_get_path('module', 'mcapi'),
      'weight' => 2
    );
    $items['intertrade/replicate'] = array(
      'title' => 'Replicate transaction history to server',
      'page callback' => 'report_intertrading_history',
      'access callback' => 'intertrading_check_key',
      'access arguments' => array(),
      'type' => MENU_CALLBACK,
    );
  }
  $items['intertrade'] = array(
    'page callback' => 'intertrading_passive',
    'access callback' => 'intertrading_check_key',
    'type' => MENU_CALLBACK,
  );
  $items['admin/accounting/intertrade'] = array(
    'title' => 'Trading network',
    'description' => "Credit clearing systems are by nature closed systems. But it is possible to make meta credit-clearing systems, composed of local systems, each trusting the the credit of the others. This is called 'intertrading', It widens the scope of your market, and it brings with it a new level of governance and accountability. ",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intertrading_settings'),
    'access arguments' => array('manage all transactions'),
    'weight' => 4
  );
  return $items;
}


/*
 * implements hook_permission
 */
function intertrading_permission() {
  return array(
    'access statement' => array(
      'title' => t('access statement'),
      'description' => t('View the aggregating trading stats which show the activity of this exchange to the trading network.')
    ),
    'intertrade' => array(
      'title' => t('Intertrade'),
      'description' => t('Initiate transactions with other exchanges')
    )
  );
}

/*
 * implements hook_forms
 * $args[0] => $transaction
 */
function intertrading_forms($form_id, $args) {
  $forms['remote_incoming_form'] = array(
    'callback' => 'transaction_form',
    'callback arguments' => $args
  );
  $forms['remote_outgoing_form'] = array(
    'callback' => 'transaction_form',
    'callback arguments' => $args
  );
  return $forms;
}

/*
 * access callback for menu items
 */
function intertrading_check_key() {           return true;
  $post = intertrading_get_post();
  if (empty($post) || substr($_GET['q'], 0, 10) != 'intertrade' || $GLOBALS['user']->uid) {
    return FALSE;
  }
  if ($post['key'] != variable_get('intertrading_key', '')) {
    watchdog(
      'intertrading',
      'server passed wrong key, @key to this client. Actual key is @key1',
      array('@key' => $post['key'], '@key1' => variable_get('intertrading_key', '')),
      WATCHDOG_ERROR
    );
    mail('matslats@gmail.com', 'intertrading key mismatch', 'http://'.INTERTRADING_REF_URL);
    intertrading_respond(20, array('@server' => INTERTRADING_REF_URL, '@message' => 'wrong key'));
  }
  $GLOBALS['user'] = user_load(variable_get('intertrading_uid', 0));
  return TRUE;
}

/*
 * menu callback
 * this could be one of three forms, depending on whether the site is set up
 */
function intertrading_settings() {
  form_load_include($form_state, 'inc', 'mcapi');
  $form['intertrading_server'] = array(
    '#title' => t('Intertrading server'),
    '#description' => t('The url of the server.') .'<br />'.
      t('WARNING. This cannot and should not be easily changed once your account on the intertrading server is created'),
    '#field_prefix' => 'http://',
    '#type' => 'textfield',
    '#default_value' => variable_get('intertrading_server', 'intertesting.communityforge.net'),
    '#disabled' => variable_get('intertrading_server', 0),
    '#required' => TRUE
  );

  $form['intertrading_uid'] = array(
    '#title' => t('Account for external transactions'),
    '#description' => t('WARNING. This cannot and should not be easily changed once your account on the intertrading server is created'),
    '#type' => 'user_chooser_few',
    '#callback' => 'user_chooser_segment_perms',
    '#args' => array('transact'),
    '#default_value' => variable_get('intertrading_uid', 0),
    '#disabled' => variable_get('intertrading_uid', 0),
    '#required' => TRUE
  );

  $currencies = &drupal_static('currencies');
  $form['intertrading_currcode'] =  currency_picker_element(array_keys($currencies), variable_get('intertrading_currcode', 0));

  $form['intertrading_ticks'] = array(
    '#title' => 'Ticks',//this is a reference to the forex base comparision unit
    '#description' => t('The value of the currency, relative to a common denominator.') . '<br />'.
      t('If 1 tick is 1 minute and your currency is hours, then enter 60') . '<br />' .
      t('WARNING. This cannot and should not be easily changed once your account on the intertrading server is created'),
    '#type' => 'textfield',
    '#element_validate' => array('intertrading_validate_ticks'),
    '#default_value' => variable_get('intertrading_ticks', 0),
    '#disabled' => variable_get('intertrading_ticks', 0),
    '#required' => TRUE,
    '#weight' => 2
  );

  //this widget and variable is also used in intertrading.module
  $fields = array();
  foreach(field_info_instances('transaction', 'transaction') as $fieldname => $instance) {
    if ($fieldname == 'worth') continue; //this field is reserved!
    $fields[$fieldname] = $instance['label'];
  }
  if (count($fields)) {
    $form['transaction_description_field'] = array(
      '#title' => 'Description field',
      '#description' => t("Which field API field on the transaction entity should be used for 'description'"),
      '#type' => 'select',
      '#options' => $fields,
      '#default_value' => variable_get('transaction_description_field', ''),
      '#weight' => 5
    );
  }
  else {
    drupal_set_message(t('Intertrading works better when the transaction entity has a description field'), 'warning', FALSE);
    $form['transaction_description_field'] = array(
      '#type' => 'hidden',
      '#default_value' => ''
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Handshake with server'),
    '#weight' => 10
  );
  $form['#validate'] = array('intertrading_settings_validate');
  $form['#submit'] = array('intertrading_settings_submit', 'menu_rebuild', 'intertrading_handshake');
  return $form;
}

function intertrading_settings_validate(&$form, &$form_state) {
  $ticks = &$form_state['values']['intertrading_ticks'];
  if (is_numeric($ticks) && $ticks <= 0) {
    form_error($form['intertrading_ticks'], t('Ticks must be greater than zero'));
  }
}

function intertrading_settings_submit($form, $form_state) {
  $vars = array_keys(intertrading_variable_info());//or could use form_state_clean function
  foreach ($vars as $var) {
    variable_set($var, $form_state['values'][$var]);
  }
}


function intertrading_validate_ticks(&$element, $form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('Ticks must be numeric'));
  }
}

/*
 * implements hook_form_FORM_ID_alter
 * injects the lat lon variables into the site_information form
 * no validation
 */
function intertrading_form_system_site_information_settings_alter(&$form) {
  $form['coordinates'] = array(
    '#title' => t('Geolocation'),
    '#description' => t('The intertrading server would like to know where you are.') .' '. t('To determine your coordinates, please visit !link', array('!link' => l('http://www.whatsmygps.com/', 'http://www.whatsmygps.com/'))),
    '#type' => 'fieldset',
    'site_latitude' => array(
      '#type' => 'textfield',
      '#title' => t('Latitude'),
      '#default_value' => variable_get('site_latitude', 0),
      '#element_validate' => array('intertrading_validate_coords'),
      '#weight' => 0,
    ),
    'site_longitude' => array(
      '#type' => 'textfield',
      '#title' => t('Longitude'),
      '#default_value' => variable_get('site_longitude', 0),
      '#element_validate' => array('intertrading_validate_coords'),
      '#weight' => 1,
    ),
    '#weight' => -5
  );
}

/*
 * implements hook_theme
 */
function intertrading_theme() {
  return array (
    'statement' => array(
      'arguments' =>array(
        'data' => array()
      )
    )
  );
}

//announce to the intertrading server
//always make a new key
function intertrading_handshake() {
  $data = _intertrading_handshake() + _intertrading_report();
  $new_key = md5(time() . user_password());//could be anything...
  $data['new_key'] = $new_key;
  $data['key'] = $new_key;
  $result = intertrading_json_client_request('exchange/handshake', $data);
  if ($result->code == 'OK') {
    //if the result is good then save the key
    variable_set('intertrading_key', $data['new_key']);
    watchdog('intertrading', 'server accepted new key: @key', array('@key' => $data['new_key']), WATCHDOG_INFO);
    $result->message = t('You have an account on the intertrading server.');
  }
  drupal_set_message($result->message, $result->code == 'OK' ? 'status' : 'warning');
}

function _intertrading_handshake() {
  $currency = currency_load(variable_get('intertrading_currcode', ''));
  if (!$currency) {
    drupal_set_message('Intertrading requires a currency to be specified', 'error');
    return array();
  }
  $stats['mail'] = variable_get('site_mail', '');
  $stats['api'] = INTERTRADING_API_VERSION;
  $stats['ticks'] = variable_get('intertrading_ticks', 0);
  if (isset($currency->divisions)) {
    //divisions is either string '01' or an keyed array
    $stats['divisions'] = $currency->divisions == '01' ? '01' : implode('|', array_keys($currency->divisions));
  }
  //I can't help think there's a better way of counting unique traders without using the optional transaction_index table
  $uids = array();
  $result = db_query("SELECT DISTINCT(payer) FROM {mcapi_transactions} UNION SELECT DISTINCT(payee) FROM {mcapi_transactions}")->fetchCol();
  foreach ($result as $uid) {
    $uids[$uid] = 1;
  }
  $stats['traders'] = count($uids);
  $stats['transactions'] = db_query(
    "SELECT COUNT(xid) from {mcapi_transactions} t
    LEFT JOIN {field_data_worth} fw ON t.xid = fw.entity_id
    WHERE t.state = :state AND fw.worth_currcode = '$currcode' AND created > :created",
    array(':state' => TRANSACTION_STATE_FINISHED, ':created' => strtotime('-30 days'))
  )->FetchField();

  $stats['first_trade'] = db_query("SELECT min(created) FROM {mcapi_transactions}")->fetchField();
  $stats['name'] = variable_get('site_name', '');
  //the rest are optional
  $stats['visibility'] = db_query('SELECT rid FROM {role_permission} WHERE rid = :rid AND permission = :perm',
    array(':rid' => DRUPAL_ANONYMOUS_RID, ':perm' => 'access statement')
  )->fetchField();
  $stats['logo'] = theme_get_setting('logo');
  $stats['lat'] = variable_get('site_lat', 0);
  $stats['lon'] = variable_get('site_lon', 0);
  return $stats;
}

function _intertrading_report() {
  $currcode = variable_get('intertrading_currcode', '');
  $query = "SELECT COALESCE(SUM(fw.worth_quantity), 0) FROM {mcapi_transactions} t
    LEFT JOIN {field_data_worth} fw ON t.xid = fw.entity_id
    WHERE t.state > 0 AND fw.worth_currcode = :currcode AND created > :created";
  $replacements = array(
    ':created' => strtotime('-1 year'),
    ':currcode' => $currcode
  );
  $stats['volume'] = db_query($query, $replacements)->fetchField();
  //this isn't foolproof. but then nothing is
  //the intention is to identify an account or even group of accounts which are so far in debt (or credit)
  //that they will never return to zero
  //getting lots of balances is tricky in mcapi.module coz they are not cached
  if (module_exists('mcapi_index_views')) {
    //but balances can be easily calculated with the index module
    $bal = db_query("SELECT SUM(diff) FROM {mcapi_index} WHERE currcode = :currcode GROUP BY uid1 ORDER BY SUM(diff) ASC LIMIT 0,1", array(':currcode' => $currcode))->fetchField();
    $stats['deficit'] = floatval($bal);
  }
  else {
    //retrieve the smallest balance from a cunningly placed variable
    $stats['deficit'] = array_shift(variable_get('mcapi_deficit', array()));
  }
  //checks that all balances add up to zero
  //In mcapi.module for drupal 7, they must, because there is no caching of balances
  $stats['integrity'] = TRUE;
  $stats['balance'] = transaction_totals(variable_get('intertrading_uid', 0), $currcode)->balance;
  return $stats;
}

/*
 * menu callback
 */
function statement() {
  $data = _intertrading_handshake() + _intertrading_report();
  return theme('statement', array('data' => $data));
}


//this could be made prettier
function theme_statement($variables) {
  $currencies = &drupal_static('currencies');
  $data = &$variables['data'];
  unset($data['api'], $data['divisions'], $data['mail'], $data['name'], $data['logo'], $data['first_trade']);
  $currcode = variable_get('intertrading_currcode', key($currencies));

  $rows = array();
  $rows['currency_name'] = array(
    'title' => t('Name of intertrading currency'),
    'value' => currency_load($currcode)->human_name
  );
  $rows['lat']['title'] = t('Latitude');
  $rows['lon']['title'] = t('Longitude');
  $rows['ticks']['title'] = t('Relative value');

  $rows['integrity'] = array(
    'title' => t('Balances add up to zero'),
    'value' => $data['integrity'] == TRUE ? t('Yes') : t('No')
  );
  $rows['traders']['title'] = t('Number of traders');
  $rows['transactions']['title'] = t('Last 30 days transactions');
  $rows['volume'] = array(
    'title' => t('Last 365 days volume'),
    'value' => theme('worth_item', array('currcode' => $currcode, 'quantity' => $data['volume'])),
  );
  $rows['deficit'] = array(
    'title' => t('Largest negative balance'),
    'value' => theme('worth_item', array('currcode' => $currcode, 'quantity' => $data['deficit']))
  );
  $rows['balance'] = array(
    'title' => t('Balance of Trade'),
    'value' => theme('worth_item', array('currcode' => $currcode, 'quantity' => $data['balance']))
  );
  $rows['visibility'] = array(
    'title' => t('Visibility'),
    'value' => $data['visibility'] == 0 ? t('Public') : t('Not public'),
  );
  //fill in a load of defaults and anything we missed out
  foreach ($data as $key => $prop) {
    $rows[$key] += array('value' => $prop);
  }

  return theme('table', array('rows' => $rows));
}

function intertrading_validate_coords(&$element, &$form_state) {
  if (!is_numeric($element['#value'])) {
    form_error($element, t('Coordinates must be numeric'));
  }
  if ($element['#value'] > 180 || $element['#value'] < -180) {
    form_error($element, t('Coordinates out of range: @val', array('@val' => $element['#value'])));
  }
}

/*
 * implements mcapi hook_info_types
 */
function intertrading_mcapi_info_types() {
  return array('remote receipt', 'remote payment');
}
/*
 * wrapper around intertrading json request
 * adds client validation criteria to the POST
 */
function intertrading_json_client_request($path, $data = array()) {
  foreach (array('intertrading_uid', 'intertrading_server', 'intertrading_currcode', 'intertrading_ticks') as $varname) {
    $$varname = variable_get($varname, 0);
    if (!$$varname) {
      return (object)array(
        'code' => -1,
        'message' => t('@varname not set. Configure intertrading at !link', array(
          '@varname' => $varname,
          '!link' => l('admin/accounting/intertrade', 'admin/accounting/intertrade')
        ))
      );
    }
  }
  return intertrading_json_request(
    'http://'. $intertrading_server .'/'. $path,
    $data += array(
      'key' => variable_get('intertrading_key', ''),
      'src_url' => INTERTRADING_REF_URL
    )
  );
}
//menu callback
//force a deliberate choice of intertrading form
function intertrading_direction() {
  return array(
    array(
      '#markup' => t('Which way will the transaction go?')
    ),
    array(
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#items' => array(
        l('Pay out to another site', 'transact/remote/outgoing'),
        l('Request in from another site', 'transact/remote/incoming'),
      )
    )
  );
}

/*
 * implements  hook_form_remote_incoming_form_alter
 * heavily modifies the base transaction form
 */
function intertrading_form_remote_incoming_form_alter(&$form, &$form_state, $form_id) {
  $form['#incoming'] = $form_id == 'remote_incoming_form';
  if (empty($form_state['step']) || $form_state['step'] == 1)  {
    $form_state['step'] = 1;
    //page title is blank coz its too much along with the tabs and otherwise 'Home' appears
    drupal_set_title('');
    $currcode = variable_get('intertrading_currcode', NULL);
    //check that the intertrading settings are all set
    if (!isset($form_state['server_params'])) {
      $result = intertrading_json_client_request('exchange/prepare', _intertrading_report());
      if ($result->code == 'OK') {
        $form_state['server_params'] = $result->args;
        if ($form['#incoming']) {
          if (isset($form_state['server_params']['earn_limit'])) {
            if ($form_state['server_params']['earn_limit'] < 0) {
              form_set_error('', t('No receipts are possible at this time'));
              $form['#disabled'] = TRUE;
            }
            else {
              $form['worth'][LANGUAGE_NONE][0]['#max'][$currcode] = $form_state['server_params']['earn_limit'];
              drupal_set_message(t('The most @name can receive is !amount', array(
                '@name' => variable_get('site_name', NULL),
                '!amount' => theme('worth_item', array('quantity' => $form_state['server_params']['earn_limit'], 'currcode' => $currcode))
              )));
            }
          }
        }
        else {
          if (isset($form_state['server_params']['spend_limit'])) {
            if ($form_state['server_params']['spend_limit'] < 0) {
              form_set_error('', t('No payments are possible at this time'));
              $form['#disabled'] = TRUE;
            }
            else {
              $form['worth'][LANGUAGE_NONE][0]['#max'][$currcode] = $form_state['server_params']['spend_limit'];
              drupal_set_message(t('The most @name can pay is !amount', array(
                '@name' => variable_get('site_name', NULL),
                '!amount' => theme('worth_item', array('quantity' => $form_state['server_params']['spend_limit'], 'currcode' => $currcode))
              )));
            }
          }
        }
      }
      else {
        //request failed
        drupal_set_message($result->message, 'error');
        $form['#disabled'] = TRUE;
        $form_state['server_params']['sites'] = array();
      }
    }
    //just ensure that the delta value is 0 (it might not be if there are multiple currencies)
    //$form['worth'][LANGUAGE_NONE][0] = array_shift($form['worth'][LANGUAGE_NONE]);

    //tweak the default form; hide the state and set the transaction type
    $form['state']['#access'] = FALSE;
    $form['type']['#value'] = $form['#incoming'] ? 'remote receipt' : 'remote payment';
    $form['type']['#type'] = 'hidden';
    $form['dest_url'] = array(
      '#title' => t('Remote exchange'),
      '#description' => l(t('Not listed?'), 'intertrading/help'),
      '#type' => 'select',
      '#options' => array('' => t('Please choose...')) + $form_state['server_params']['sites'],
      '#required' => TRUE,
      '#weight' => -10,
    );
    unset($form['dest_url']['#options'][INTERTRADING_REF_URL]);

    $form['dest_user'] = array(
      '#title' => $form['#incoming'] ? t('Remote payer email address') : t('Remote payee email address'),
      '#type' => 'textfield',
      '#weight' => -3
      //this can't be validated because it's an address on another system
    );
    $form['creator']['#type'] = 'hidden';

    if ($form['#incoming']) {
      $first_person = 'payee';
      $second_person = 'payer';
    }
    else {
      $first_person = 'payer';
      $second_person = 'payee';
    }

    $form[$first_person]['#value'] = $GLOBALS['user']->uid;
    $form[$first_person]['#type'] = 'hidden';
    $form[$second_person]['#type'] = 'hidden';
    $form[$second_person]['#value'] = variable_get('intertrading_uid', 0);
    unset($form[$second_person]['#description']);
  }
  else {//step 2
    drupal_set_title(t('Are you sure?'));
    //clear the transaction fields because the value is in form_state['storage
    foreach(element_children($form) as $fieldname) {
      if (in_array($fieldname, array('actions', 'form_id', 'form_build_id', 'form_token'))) continue;
      unset($form[$fieldname]);
    }
    $form['preview'] = array(
      '#type' => 'markup',
      '#markup' => drupal_render(transaction_view($form_state['transactions'], 'certificate'), 'token')
    );
    $form['buttons']['submit']['#value'] = t('Confirm');
  }
  //provides consistency with the forms module, particularly for function mcapi_signatures_form_transaction_form_alter
  $form['#step'] = $form_state['step'];
  //this replaces the usual transaction form validation
  $form['#validate'] = array('intertrading_transaction_form_validate');
  $form['#submit'] = array('intertrading_transaction_form_submit');
}
/*
 * form function for menu callback
 * provide a basic form for intertrading
 */
function intertrading_form_remote_outgoing_form_alter(&$form, &$form_state, $form_id) {
  return intertrading_form_remote_incoming_form_alter($form, $form_state, $form_id);
}


/*
 * form validation callback for intertrading_transaction_form
 * if the form has validated so far
 * build the transaction and send it to the intertrading server
 */
function intertrading_transaction_form_validate($form, &$form_state) {
  if ($form_state['step'] < 2) {
    if ($error = user_validate_mail($form_state['values']['dest_user'])) {
      form_set_error('dest_user', $error);
    }
    if (form_get_errors()) return;
    //this is the standard transaction validation hook
    transaction_form_validate($form, $form_state);
    if (form_get_errors()) return;
    $result = intertrading_send_transaction($form_state['values'], $form['#incoming'], FALSE);
    if ($result->code != 'OK') {
      form_set_error('', $result->message);
      return;
    }
    $form_state['step']++;
    $form_state['rebuild'] = TRUE;
    $copy = $form_state;
    form_state_values_clean($copy);
    $form_state['storage'] = $copy['values'];
  }
}

/*
 * form submit callback for intertrading_transaction_form
 */
function intertrading_transaction_form_submit($form, &$form_state) {
  $values = &$form_state['storage'];
  $result = intertrading_send_transaction($values, $form['#incoming'], TRUE);
  if ($result->code == 'OK') {//this should always be the case
    $transaction = entity_create('transaction', $values);
    transaction_cluster_create($transaction, TRUE);
    drupal_set_message('Transaction saved with remote site.');
  }
  else {
    drupal_set_message(t('There was a problem saving the transaction on the remote site.'), 'warning');
  }
  //$form_state['redirect'] = 'user';
}

function intertrading_send_transaction($values, $incoming, $really = FALSE) {
  $desc_field = variable_get('transaction_description_field', '');
  $data = array(
    'payer' => $incoming ? $values['dest_user'] : user_load($values['payer'])->mail,
    'payer_url' => $incoming ? $values['dest_url'] : INTERTRADING_REF_URL,
    'payee' => $incoming ? user_load($values['payer'])->mail : $values['dest_user'],
    'payee_url' => $incoming ? INTERTRADING_REF_URL :  $values['dest_url'],
    'quantity' => $values['worth'][LANGUAGE_NONE][0]['quantity'],
    'src_url' => INTERTRADING_REF_URL,
    'dest_url' => $values['dest_url'],
    'description' => $desc_field ? $values[$desc_field][LANGUAGE_NONE][0]['value'] : '',
    'date' => REQUEST_TIME,
    'really' => $really
  );

  //this should overwrite whichever of payer and payee is the local intertrading account
  return intertrading_json_client_request('transaction/try', $data);
}


/*
 * Main function for the server to send a transaction here.
 * converts, validates and saves the transaction.
 * returns usual json object format, with OK or an error code
 */
function intertrading_passive() {
  $post = intertrading_get_post();
  if ($error = intertrading_validate_transaction_post($post)) {
    intertrading_respond($error[0], $error[1]);
  }
  $local_trader_mail = $post['dest_url'] == $post['payer_url'] ? $post['payer'] : $post['payee'];
  if ($local_trader = user_load_by_mail($local_trader_mail)) {
    $outgoing = $post['dest_url'] == $post['payee_url'];
    $transaction = array(
      'creator' => variable_get('intertrading_uid'),
      'state' => TRANSACTION_STATE_FINISHED,
      'payer' => $outgoing ? variable_get('intertrading_uid', 0) : $local_trader->uid,
      'payee' => $outgoing ? $local_trader->uid : variable_get('intertrading_uid', 0),
      'type' => $outgoing ? 'remote payment' : 'remote receipt',
      'worth' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'quantity' => $post['quantity'],
            'currcode' => variable_get('intertrading_currcode', '')
          )
        )
      ),
    );
    if($description_field = variable_get('transaction_description_field', '')) {
      $transaction[$description_field] = array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => urldecode($post['description'])
          )
        )
      );
    }
  }
  else {
    intertrading_respond(28, array('@client' => INTERTRADING_REF_URL, '@mail' => $local_trader_mail));
  }

  try {
    //should be using entity_API_create to create the transaction here
    transaction_cluster_create((object)$transaction, $post['really']);
    intertrading_respond('OK');
  }
  catch (Exception $e) {
    $message = $e->getMessage();
    if ($d = $e->getPrevious()) {
      $errors = unserialize($d->getMessage());//see limits exception handling
      //convert the values FROM minutes to the src systems currency
      intertrading_respond(24, array('@message' =>  serialize($errors)));
    }
    else {
      $code = 25;
      $args = array('@message' => $message . print_r($transaction, 1));
    }

    watchdog('intertrading', '@message: @transaction', array(
      '@message' => intertrading_error_codes($code, $args),
      '@transaction' => print_r($transaction, 1)
    ), WATCHDOG_ERROR);
    //we should really convert the excess here
    intertrading_respond($code, $args);
  }
}

/*
 * Implements variable module's hook_variable_info
 * only block settings really
 */
function intertrading_variable_info() {
  $vars['intertrading_server'] = array(
    'type' => 'string',
    'title' => t('Intertrading server url'),
    'default' => '',
    'description' => t('The url of the server. Contact the server administrator to change this'),
    'required' => TRUE,
  );
  $vars['intertrading_ticks'] = array(
    'type' => 'string',
    'title' => t('Ticks'),
    'default' => '10',
    'description' => t('The value of the currency, relative to a common denominator.') . '<br />'.
      t('If 1 tick is 1 minute and your currency is hours, then enter 60'),
    'required' => TRUE,
  );
  $vars['intertrading_currcode'] = array(
    'type' => 'string',
    'title' => t('Currency used for intertrading'),
    'default' => '',
    'required' => TRUE,
  );
  $vars['intertrading_uid'] = array(
    'type' => 'string',
    'title' => t('The account on this exchange used for intertrading'),
    'default' => '',
    'description' => t('Enter the account number'),
    'required' => TRUE,
  );
  $vars['transaction_description_field'] = array(
    'type' => 'string',
    'title' => t('Description field'),
    'default' => '',
    'description' => t('Choose from these fields which have been added to the transaction entity'),
    'required' => TRUE,
  );
  return $vars;
}
/*
 * implements hook_help
 */
function intertrading_help($path, $args) {
  if ($path == 'admin/accounting/intertrade') {
    $result = intertrading_json_client_request('intertrading/help/json');
    if ($result->code != 'OK') {
      drupal_set_message($result->message, 'error');
      return ;
    }
    $args = &$result->args;
    $args['@name'] = variable_get('site_name', '');
    $statuses = array(
      '-1' => t('No account'),
      '0' => t('Account blocked'),
      '1' => t('Account active')
    );
    $help = $args['@message'] . '<hr />';
    $help .= '<p>'.t('@name account status is: @status',
      array('@name' => $result->args['@name'], '@status' => $statuses[$args['@status']]));
    //following applies only if the account has been created already
    if ($args['@status'] != -1) {
      $args['!balance'] = theme('worth_item', array('quantity' => $args['@balance'], 'currcode' => variable_get('intertrading_currcode')));

      $help .= '<br />'.t('@name account balance is !balance', $result->args);
      if (isset($result->args['@min']) && isset($result->args['@max'])) {
        $help .= '<br />'.t('@name can trade between: @min & @max', $result->args);
      }
      else{
        if (isset($result->args['@min'])) {
          $help .= '<br />'.t('@name must trade above: @min', $result->args);
        }
        elseif(isset($result->args['@max'])) {
          $help .= '<br />'.t('@name must trade below: @max', $result->args);
        }
      }
      $help .= '<br />'.t('Transactions so far: @count', $result->args);
      $help .= '<br />Intertrading key: '. variable_get('intertrading_key', '00');
    }
    return $help;
  }
}

function report_intertrading_history() {
  $intertrading_uid = variable_get('intertrading_uid', 0);
  $intertrading_currcode = variable_get('intertrading_currcode', '');
  $output = array();

  $serials = db_query("SELECT serial FROM {mcapi_transactions} t
    LEFT JOIN {field_data_worth} w ON t.xid = w.entity_id
    WHERE (payer = :payer OR payee = :payee) AND state > 0 AND w.worth_currcode = :currcode",
      array(':payer' => $intertrading_uid, ':payee' => $intertrading_uid, ':currcode' => $intertrading_currcode))
  ->fetchCol();

  if (count($serials)) {
    $transactions = transaction_load_multiple(array(), array('serial' => $serials));
    foreach ($transactions as $transaction) {

      $outgoing = FALSE;
      if ($transaction->payee_uid == $intertrading_uid) $outgoing = TRUE;

      $output[$transaction->xid] = array(
        'payer' => $outgoing ? user_load($transaction->payer)->mail : '',
        'payer_url' => $outgoing ? INTERTRADING_REF_URL : '',
        'payee' => $outgoing ? 0 : user_load($transaction->payee)->mail,
        'payee_url' => $outgoing ? '' : INTERTRADING_REF_URL,
        'src_url' => INTERTRADING_REF_URL, //the url of the client OR blank
        'dest_url' => '', //the url of the client OR blank
        'quantity' => transaction_quant($transaction, $intertrading_currcode), //denominated in src units
        'date' => $transaction->created, //unixtime
      );
      if ($desc = variable_get('transaction_description_field', '')) {
        $field = field_view_field('transaction', $transaction, $desc);
      }
      //rendering the children removes the the title field and stuff
      $output[$transaction->xid]['description'] = isset($field) ? strip_tags(drupal_render_children($field)) : '';
    }
    watchdog('intertrading', 'Uploaded @num transactions to intertrading server', array('@num' => count($output)));
  }
  intertrading_respond('OK', $output);
}

//returns the transaction quant for a given currency, or the first, if no curency is stated
//gets around the problem of not being sure of the language.
function transaction_quant($transaction, $currcode = NULL) {
  $flows = current($transaction->worth);
  if (empty($currcode)) return $flows[0]['quantity'];
  foreach ($flows as $item) {
    if ($item['currcode'] == $currcode) return $item['quantity'];
  }
}

/*
 * implements hook_form_FORM_ID_alter
 * prevent
 */
function intertrading_form_transaction_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form_state['build_info']['args'][0])) return;
  //ensure that the intertrading account never validates in mcapi_forms
  if (!in_array($form_id, array('remote_incoming_form', 'remote_outgoing_form'))) {
    $form['#validate'][] = 'intertrading_occlude_account';
  }
}
/*
 * form_alter validation callback
 * checks that no-one is attempting to trade with the intertrading account
 */
function intertrading_occlude_account(&$form, &$form_state) {
  foreach (array('payer', 'payee') as $participant) {
    if (isset($form_state['values'][$participant]) && $form_state['values'][$participant] && $form_state['values'][$participant] == variable_get('intertrading_uid', 0)) {
      form_set_error($participant, t('Intertrading is not possible with this form.'));
    }
  }
}