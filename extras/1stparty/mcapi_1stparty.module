<?php

/**
 * implements hook_help().
 */
function mcapi_1stparty_help($path, $args) {
  if ($path == 'admin/help/#mcapi_1stparty' || $path == 'admin/accounting/workflow/forms') {
    $help[] = t('Design your own forms for users to start transactions on their workflow paths.');
    $help[] = t('Each form has access control and can be presented as a block, page or panel.');
    $help[] = t('Each form can have presets and hidden fields.');
    //TODO might want to put some more detail here or at the top of the form editor page
    return implode(' ', $help);
  }
}

/**
 * implements hook_menu().
 * makes menu links for all the transaction forms
 */
function mcapi_1stparty_menu() {
  foreach (entity_load_multiple('1stparty_editform') as $id => $editform) {
    if ($editform->path) {//it is a required field right now
      $items[$editform->path] = array(
        'title' => $editform->title,
        'description' => 'Custom transaction form',
        'route_name' => "mcapi.1stparty.$id",
        'weight' => 5,
      );
    }
  }
  $items['admin/accounting/workflow/forms'] = array(
    'title' => 'Transaction form designer',
    'description' => "Design your own transaction forms from the logged in user's perspective.",
    'weight' => 4,
    'route_name' => 'mcapi.admin_1stparty_editform_list',
  );
  return $items;
}

/**
 * implements hook_theme().
 */
function mcapi_1stparty_theme() {
  return array(
    '1stpartyform'=> array(
      'function' => 'theme_1stpartyform',//no template is possible here
      'render element' => 'element',
    ),
  );
}

/**
 * implements hook_entity_info_alter().
 * adds a form controller to the transaction entity
 * slighly clumsy, but I think this is the proper way
 */
function mcapi_1stparty_entity_type_alter(array &$entity_types) {
  $classes = $entity_types['mcapi_transaction']->getControllerClasses();
  $form_classes = array(
    '1stparty' => 'Drupal\mcapi_1stparty\Form\FirstPartyTransactionForm'
  ) + $classes['form'];
  $entity_types['mcapi_transaction']->setControllerClass('form', $form_classes);
}

function template_preprocess_1stpartyform(&$vars) {
  $form = &$vars['element'];
	//add the buttons if they weren't  in the twig template already
  if (strpos($form['#twig'], '{{ actions }}') === FALSE) {
    $form['#twig'] .= "{{ actions }}";
  }
}

/**
 * theme implementation of callback 1stpartyform
 * this must be a function, because we are taking a twig string instead of using a template file
 */
function theme_1stpartyform($vars) {
	$form = $vars['element'];
	$tokens = array();
	foreach ($form['#twig_tokens'] as $fieldname) {
	  //transaction property or field API field
	  //stripping the theme_wrappers is cleaner but prevents the #states from working.
    $tokens[$fieldname] = mcapi_render_stripped($form[$fieldname]);

		if (empty($form[$fieldname]['#required']) && $form[$fieldname]['#default_value'] == '') {
		  //field does not occur in the form
		  //unset($form[$fieldname]);//TODO something better than this.
		}
		else {
		  if (\Drupal::currentUser()->hasPermission('design 1stparty forms')) {
		    //drupal_set_message("Warning! Software limitation means there may be a problem hiding field '$fieldname', which has a preset value and is hidden.");
		  }
		}
	}
	//adjustments for intertrade mode
	if ($tokens['intertrade']) {
	  $tokens['partner'] .= mcapi_render_stripped($form['partner_all']);
	}

	$last = drupal_render($form);

  //add everything not rendered onto the last rendered thing.
  $tokens[$fieldname] .= $last;
  module_load_include('inc', 'mcapi');
  return mcapi_render_twig($form['#twig'], $tokens);
}

function mcapi_render_stripped(&$element) {
  if (in_array($element['#type'], array('checkbox', 'checkboxes', 'radios', 'actions'))) {
    return drupal_render($element);
  }
  elseif ($element['#type'] != array('value')) {
    unset($element['#theme_wrappers']);
    return '<span class = "form-item">'.drupal_render($element).'</span>';
  }
}


function mcapi_editform_load($id) {
  return entity_load('1stparty_editform', $id);
}

/**
 * get all the tokens which apply in the transaction form
 * @return array
 *   the token names, without the 'type:'
 */
function mcapi_1stparty_transaction_tokens() {
  module_load_include ('inc', 'mcapi');
  $tokens = array();
  if (\Drupal::config('mcapi.wallets')->get('entity_types.user:user') > 1) {
    $tokens[-1] = 'mywallet';
  }
  $tokens += mcapi_transaction_list_tokens(FALSE);
  unset($tokens[array_search('state', $tokens)]);
  unset($tokens[array_search('serial', $tokens)]);
  unset($tokens[array_search('exchange', $tokens)]);
  unset($tokens[array_search('creator', $tokens)]);
  //replace payer and payee with partner and direction
  $tokens[array_search('payer', $tokens)] = 'partner';
  $tokens[array_search('payee', $tokens)] = 'direction';
  $tokens[] = 'intertrade';
  return $tokens;
}

/**
 * Check whether the current user can access a given 1stparty form.
 * used by the router and by the block controller
 *
 * @param unknown $editform
 *   the configuration object
 * @return boolean
 *   TRUE if the current user can access the given form
 */
function mcapi_1stparty_access($editform) {
  $account = entity_load('user', \Drupal::currentUser()->id());
  if ($exchange_id = $editform->get('exchange')) {
    $exchange = entity_load('mcapi_exchange', $exchange_id);
    if (is_object($exchange) && $exchange->is_member($account)) {
      return TRUE;
    }
  }
  //user can access the form if they are in at least one exchange
  else return count(referenced_exchanges($account, TRUE)) != 0;
}
